<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>学会信息检索真挺重要的</title>
      <link href="2021/12/30/%E5%AD%A6%E4%BC%9A%E4%BF%A1%E6%81%AF%E6%A3%80%E7%B4%A2%E7%9C%9F%E6%8C%BA%E9%87%8D%E8%A6%81%E7%9A%84/"/>
      <url>2021/12/30/%E5%AD%A6%E4%BC%9A%E4%BF%A1%E6%81%AF%E6%A3%80%E7%B4%A2%E7%9C%9F%E6%8C%BA%E9%87%8D%E8%A6%81%E7%9A%84/</url>
      
        <content type="html"><![CDATA[<p>声明：本文中的截图虽然是真人真事，但没有挂出来嘲讽的意思，只是有感而发的博客素材，请图中友情出演的小学弟不要介意，反正头像什么的都截掉了看不出来是谁</p><p>先说结论：学会信息检索真挺重要的，不然你就只能到处问傻傻的问题🤐</p><a id="more"></a><p>今天突然有个桃子去年当流导助教的学生找我问问题：</p><img src="https://image.wanyijizi.com/20211230/2ffd6adaea6649469b5fc643ef2a3f78.jpg" alt="Screenshot_20211230-165535__01__01.jpg" style="zoom: 80%;" loading="lazy"><p>啊这..同是力学专业，你今年也研二了，怎么还在问这个？</p><p>没有办法，桃子作为大一岁的学姐也不好意思强硬地把他拍回去（这点问题自己去搜一下不会吗.jpg），帮他上谷歌搜了一下：</p><img src="https://image.wanyijizi.com/20211230/06f3a0aea6af4d6ea8e6342157da1405.jpg" alt="Screenshot_20211230-165544__01.jpg" style="zoom: 80%;" loading="lazy"><p>然后（这点问题自己去搜一下…居然真的不会搜！震惊.jpg）：</p><img src="https://image.wanyijizi.com/20211230/d380a78c2be642e89c5c33f2f5fea758.jpg" alt="Screenshot_20211230-165601__01.jpg" style="zoom:67%;" loading="lazy"><p> 啊，之后小可爱还在问：</p><img src="https://image.wanyijizi.com/20211230/1bbb2c2462964b69b0fa84b49e8b74bb.jpg" alt="Screenshot_20211230-171113.jpg" style="zoom:67%;" loading="lazy"><p>问得桃子都觉得自己天赋异禀了，我怎么想也想不出来到底看了什么教程，感觉就是遇到问题谷歌，觉得写得好就放进收藏夹吃灰🤔</p><p>唉，反正，真的就是，学会用谷歌/必应/百度原来是这么重要的技能。</p><p>不过，遇到问题向更有经验的人请教也是没错的，比如<a href="https://www.5ibug.net/">吾爱bug</a>大大帮忙解决了桃子网站中的bug，不愧是bug大大！简直追着bug打 [手动狗头]</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 吐槽 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>幻塔再见！圣诞快乐！元旦快乐！</title>
      <link href="2021/12/25/%E5%B9%BB%E5%A1%94%E5%86%8D%E8%A7%81%EF%BC%81%E5%9C%A3%E8%AF%9E%E5%BF%AB%E4%B9%90%EF%BC%81%E5%85%83%E6%97%A6%E5%BF%AB%E4%B9%90%EF%BC%81/"/>
      <url>2021/12/25/%E5%B9%BB%E5%A1%94%E5%86%8D%E8%A7%81%EF%BC%81%E5%9C%A3%E8%AF%9E%E5%BF%AB%E4%B9%90%EF%BC%81%E5%85%83%E6%97%A6%E5%BF%AB%E4%B9%90%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<p>虽然只在幻塔玩了 6 小时，但其实桃子也是预约+开服玩家？</p><p>只是，幻塔还是有很多细微之处做的不好的，可惜了，感觉如果仔细打磨会是个好游戏。捏脸是真的好玩，幻塔最最好玩的地方，我根本没有兴趣用拟态。</p><p>然而桃子的同学小米10进游戏就卡死，亲友团组不起来，所以还是退游了。</p><p>以此纪念我在幻塔度过的 6 小时，并祝看到视频的大家圣诞快乐，元旦快乐！</p><p>（最后我收回上次说必剪还行的话，多试了试，感觉很多地方不好用，素材里找不到基本形状，而且自动对齐也非常地迷，怎么都对不齐）</p><a id="more"></a><h2 id="幻塔告别视频"><a href="#幻塔告别视频" class="headerlink" title="幻塔告别视频"></a>幻塔告别视频</h2><div style="position: relative; padding: 30% 45%;"><iframe style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;" src="https://player.bilibili.com/player.html?aid=807502191&amp;bvid=BV1m34y167ug&amp;cid=468120876&amp;page=1&amp;high_quality=1" frameborder="no" scrolling="no"> </iframe></div><h2 id="新头像"><a href="#新头像" class="headerlink" title="新头像"></a>新头像</h2><p>圣诞快乐！再见 2021！元旦快乐！</p><p><img src="https://image.wanyijizi.com/20211225/20211224_%E5%A4%B4%E5%83%8F.jpg" alt="me" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 幻塔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【原神·战场英姿】蒙德篇 - 开盲盒啦！</title>
      <link href="2021/12/20/%E3%80%90%E5%8E%9F%E7%A5%9E%C2%B7%E6%88%98%E5%9C%BA%E8%8B%B1%E5%A7%BF%E3%80%91%E8%92%99%E5%BE%B7%E7%AF%87%20-%20%E5%BC%80%E7%9B%B2%E7%9B%92%E5%95%A6%EF%BC%81/"/>
      <url>2021/12/20/%E3%80%90%E5%8E%9F%E7%A5%9E%C2%B7%E6%88%98%E5%9C%BA%E8%8B%B1%E5%A7%BF%E3%80%91%E8%92%99%E5%BE%B7%E7%AF%87%20-%20%E5%BC%80%E7%9B%B2%E7%9B%92%E5%95%A6%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<p>今天我买的盲盒终于到啦！超级惊喜，惊喜到我甚至给开盒过程录了像😄</p><p>而且，抽到了最最最想要的温迪款~</p><p>顺便试用了一下 b 站的必剪，傻瓜操作，还行叭</p><a id="more"></a><h2 id="开盲盒"><a href="#开盲盒" class="headerlink" title="开盲盒"></a>开盲盒</h2><div style="position: relative; padding: 30% 45%;"><iframe style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;" src="https://player.bilibili.com/player.html?aid=507426694&amp;bvid=BV1Ag411A7yt&amp;cid=464739253&amp;page=1&amp;high_quality=1" frameborder="no" scrolling="no"> </iframe></div><h2 id="特写"><a href="#特写" class="headerlink" title="特写"></a>特写</h2><p><img src="https://image.wanyijizi.com/20211220/IMG_20211220_114419.jpg" alt="wd" loading="lazy"></p><p><img src="https://image.wanyijizi.com/20211220/IMG_20211220_120617.jpg" alt="wdnwsmzma" loading="lazy"></p><h2 id="必剪"><a href="#必剪" class="headerlink" title="必剪"></a>必剪</h2><p><img src="https://image.wanyijizi.com/20211220/QQ%E6%88%AA%E5%9B%BE20211220130138.jpg" alt="bj" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原神 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决hugo加载valine评论遇到报错的问题</title>
      <link href="2021/12/16/%E8%A7%A3%E5%86%B3hugo%E9%83%A8%E7%BD%B2valine%E8%AF%84%E8%AE%BA%E9%81%87%E5%88%B0%E6%8A%A5%E9%94%99/"/>
      <url>2021/12/16/%E8%A7%A3%E5%86%B3hugo%E9%83%A8%E7%BD%B2valine%E8%AF%84%E8%AE%BA%E9%81%87%E5%88%B0%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<p>混在十年的 Q 群里极大丰富了桃子关于博客和网站的知识。之前在十年 Q 群里收到<a href="https://zhufan.net/">榆木大大</a>的 hugo 比 hexo 快很多的建议，加上桃子觉得现在这个 <a href="https://github.com/YunYouJun/hexo-theme-yun">yun</a> 主题已经是我找到的所有 hexo 主题里最合心意的一个，继续使用 hexo 获得不了新的快乐。所以决定接下来尝试一下用其他方式构建博客——首先是 hugo。</p><a id="more"></a><p>本次尝试了一个没有封面、图文并茂的简单主题 <a href="https://github.com/g1eny0ung/hugo-theme-dream">dream</a>。hugo 的使用和 hexo 差不太多，随便搜个教程就好。</p><blockquote><p>这里遇到一个小小的坑，是因为我只推送到一个二级目录，结果出现了 css 都找不到路径的情况。只需要在 config.toml 文件里写清楚 baseURL 就行，比如默认 hugo 生成的文件都在 public 文件夹里，就应该写：</p><pre class="language-none"><code class="language-none">&gt;baseURL = "https:/hugo.wanyijizi.com/test/public"</code></pre><p>感谢<a href="https://xiabanlo.cn/">求索日记</a>帮我找到这个问题~~</p></blockquote><p>选择主题 <a href="https://github.com/g1eny0ung/hugo-theme-dream">dream</a> 的原因之一是它支持 Valine，之前桃子的 Valine 已经是个有完整的后台管理、邮件通知的评论系统了，可惜因为备案关闭了。我觉得，如果只是子域名的二级目录，用一下不合规的评论大概也没人管，因此，总之……</p><p>按照 <a href="https://github.com/g1eny0ung/hugo-theme-dream">dream</a> 主题自带的文档，在 config.toml 文件里加上 AppID 和 AppKey 的值：</p><pre class="language-none"><code class="language-none">valine = trueLEANCLOUD_APP_ID = "12345678***************"LEANCLOUD_APP_KEY = "**************"VALINE_LANGUAGE = "zh-CN"</code></pre><p>就应该可以使用了。但实际上，尝试评论会发现提交不了，打开控制台，发现显示 <a href="https://us.avoscloud.com/1.4/classes/Comment?xxxxx">https://us.avoscloud.com/1.4/classes/Comment?xxxxx</a> 请求失败，（net::ERR_NAME_NOT_RESOLVED）……</p><p>Google 了一下发现，桃子并不是第一个遇到类似问题的人，参考<a href="https://ethant.top/articles/hexo541u/#valine%E8%8E%B7%E5%8F%96%E8%AF%84%E8%AE%BA%E5%A4%B1%E8%B4%A5">网址</a>，<a href="https://us.avoscloud.com/">https://us.avoscloud.com/</a> 这个域名是 Valine.min.js 在没有 serverURLs 的值的时候使用的，现在已经失效了。可以替换为 LeanCloud 提供的服务器地址，如下图。</p><img src="https://image.wanyijizi.com/20211216/image-20211216211749331.png" alt="image-20211216211749331" style="zoom: 67%;" loading="lazy"><p>以下针对主题 <a href="https://github.com/g1eny0ung/hugo-theme-dream">dream</a>，不过其他主题大概大同小异？</p><p>修改 themes\dream\layouts_default\single.html 文件，加上 serverURLs：</p><pre class="language-none"><code class="language-none">&lt;script&gt;    new Valine({        el: '#vcomments',        serverURLs: {{ .Site.Params.LEANCLOUD_serverURLs }},        appId: {{ .Site.Params.LEANCLOUD_APP_ID }},        appKey: {{ .Site.Params.LEANCLOUD_APP_KEY }},        lang: {{ .Site.Params.VALINE_LANGUAGE }}    })&lt;/script&gt;</code></pre><p>对应修改 config.toml 文件，加上 serverURLs：</p><pre class="language-none"><code class="language-none">valine = trueLEANCLOUD_serverURLs = "https://12345678.api.lncldglobal.com"LEANCLOUD_APP_ID = "12345678***************"LEANCLOUD_APP_KEY = "**************"VALINE_LANGUAGE = "zh-CN"</code></pre><p>评论显示顺利：</p><img src="https://image.wanyijizi.com/20211216/image-20211216211926769.png" alt="image-20211216211926769" style="zoom:67%;" loading="lazy"><p>邮件提醒顺利：</p><img src="https://image.wanyijizi.com/20211216/image-20211216212403436.png" alt="image-20211216212403436" style="zoom: 67%;" loading="lazy"><p>后台显示正常：</p><img src="https://image.wanyijizi.com/20211216/image-20211216212424034.png" alt="image-20211216212424034" style="zoom:80%;" loading="lazy">]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hugo </tag>
            
            <tag> Valine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>各种学术报告的PPT应该怎么做</title>
      <link href="2021/12/07/%E5%90%84%E7%A7%8D%E5%AD%A6%E6%9C%AF%E6%8A%A5%E5%91%8A%E7%9A%84PPT%E5%BA%94%E8%AF%A5%E6%80%8E%E4%B9%88%E5%81%9A/"/>
      <url>2021/12/07/%E5%90%84%E7%A7%8D%E5%AD%A6%E6%9C%AF%E6%8A%A5%E5%91%8A%E7%9A%84PPT%E5%BA%94%E8%AF%A5%E6%80%8E%E4%B9%88%E5%81%9A/</url>
      
        <content type="html"><![CDATA[<p>这大概是桃子真正意义上第一篇被分类到“生活”的文？今天组会听了 sl 师兄预讲中期以及 yy 小师弟预讲开题的报告，感觉比我自己之前准备开题和转博报告的时候有更多的想法。我之前那些报告，有些地方今天才真正想通为什么当时被老师要求加上或者修改，一方面是因为当时确实认知不如现在，另一方面是身处其中反而不识全貌。（当然，大概也有可能，等我自己中期的时候回头来看这篇博文，感觉啪啪打脸）总之，以此文作为记录，希望等我中期报告的时候能够如持左券。</p><a id="more"></a><h2 id="【一】永远要关注问题所在"><a href="#【一】永远要关注问题所在" class="headerlink" title="【一】永远要关注问题所在"></a>【一】永远要关注问题所在</h2><p>为什么我们的报告通常要求包含研究背景、研究现状、研究成果、结论几个方面？因为他们都是在为阐明清楚我们提出和所要研究的问题服务的：研究背景引出了问题，并说明该问题是值得研究的；研究现状说明这个问题还没有被研究清楚，但是我们可以再推进一步，在这里对问题进行细化；研究成果无疑就是我们对于这个问题所推进的一步，也就是细化之后的问题得到了解答；结论要回到问题上，我们究竟推进到何种程度了。在这个过程中，如果只是关注于报告本身，照着要求的模块进行填写，其实就本末倒置了。永远关注问题的所在，其实就是在把握整个报告最主要的逻辑。</p><p>根据这个思路，大的科学问题和工程问题的提出基本位于讲完研究背景的位置，而讲述研究现状时要细化大问题到数个具体的小问题，研究成果则是展示对几个小问题的回答。结论部分，要能够和研究背景一样，通俗、明确的指明我们的研究成果对于开始提出的大问题有什么推进，对于工程实际有什么意义。对于问题的关注是需要始终贯彻的，包括研究成果展示的每个部分，都是提出了一个小问题并作答。</p><p>以问题为前提，研究才是有意义的，不然很容易迷失方向，结果只是为了研究而研究。在报告中这样很容易失去逻辑，在科研中这样很容易失去目标。反过来说，任何迷茫的时候都可以提问，现在做的研究究竟是为了什么问题。科研的路不止一条也不可能总是直线，甚至研究的终点可能不是开始提出的那个问题，但问题会像北极星一样告知方位。</p><h2 id="【二】不知道应该获得怎样的成果，就去思考研究的实际应用"><a href="#【二】不知道应该获得怎样的成果，就去思考研究的实际应用" class="headerlink" title="【二】不知道应该获得怎样的成果，就去思考研究的实际应用"></a>【二】不知道应该获得怎样的成果，就去思考研究的实际应用</h2><p>这是来自小师弟做时变传染率那张图的启发，虽然能从时变传染率的变化获得的传染人数曲线变化并绘制图像，但看起来没有什么意义。这个时候，需要思考我们研究这个问题的初衷。我们的研究，尤其是第一个问题，大体是老师给我们的，我们自己对问题的认识并没有那么深刻。比如为什么要研究传染人数的规律，这是因为在实际生活中有用：领导人们需要能够预测疫情的发展，适时安排和做出正确的决策，比如根据传染人数的峰值做出预案，并在传染人数达到峰值的时候能够及时启动预案。因此，得到关于时变传染率-峰值的(时间,人数)坐标，这样的定量关系就是有意义的，这就是研究需要的成果，而不是找不着重点的曲线图像。</p><h2 id="【三】牢记报告是针对听众的"><a href="#【三】牢记报告是针对听众的" class="headerlink" title="【三】牢记报告是针对听众的"></a>【三】牢记报告是针对听众的</h2><p>绝大多数人肯定不是自己没事干给自己做报告，这意味着必须考虑报告的受众。如果只是组会报告，老师们周周听，对我们的研究内容十足了解，就可以讲得更细节，可以掐头去尾。但是开题中期这样的报告，观众是对我们的研究内容只有少量认识的老师，这个时候，内容的完整、逻辑的自洽，是更加重要的。</p><p>比如 sl 哥的无量纲数，组会可以讲推导的细节；但是中期报告更需要说明的是这个无量纲数表征了什么，对于问题的解决起到什么作用，不再有人关心这个数究竟是什么形式了。</p><h2 id="【四】注意报告的特点"><a href="#【四】注意报告的特点" class="headerlink" title="【四】注意报告的特点"></a>【四】注意报告的特点</h2><p>开题和中期报告有一些特别的点，是需要格外注意和遵守的。</p><p>比如中期报告的每一节对应于毕业论文一个章节，所以节标题要好好写，而且尽量有页面顺序罗列这几个标题，让大家明确知道论文的思路，现在正在讲述的是其中哪部分内容。</p><p>再比如，图例需要清晰的标记，一目了然，好于口头的叙述。</p><p>再比如，写上页码，方便评委老师记录。</p><h2 id="【五】关于-PPT-是否需要套模板"><a href="#【五】关于-PPT-是否需要套模板" class="headerlink" title="【五】关于 PPT 是否需要套模板"></a>【五】关于 PPT 是否需要套模板</h2><p>这个老师没有给出具体建议。我觉得可以不套模板。</p><p>PPT 的作用在于展示，如果是自我介绍或者产品展示这种汇报，精致的 PPT 可以极大提升听众的兴趣，并辅佐展示个人或者产品的特质。但是学术报告，任何多余的装饰都是干扰，除了用于引导视线的线条、线框、色块，以及代表归属的校徽或者实验室 logo，其他都不需要。这种场合，尤其是中期（相较于开题），使用学校网站上那种花花绿绿的模板做 PPT 是不合适的。</p><p>个人认为：</p><ol><li><p><strong>白底</strong>最适合清晰展示各种曲线图像，别无他选。（黑底或者死亡蓝底加个白图白字真的很难看，而且白色显得格外刺眼，嗯，说的就是如果用 2003 版 Office 自带的模板）</p></li><li><p>每个页面都要明确标题和重点内容，通过灵活使用线条、线框、色块以及动画等来引导视线。</p><ul><li>每页<strong>最大的字号是标题</strong>，绝对不能让人想知道这页讲什么的时候需要费劲找。可以在标题下面画条线，将标题和正文隔开。</li><li>重点一定要简洁鲜明的突出，比较好的选择是将<strong>重点内容框起来或者字体变红色</strong>。因为加粗、改变字体、斜体这些不是所有人都能第一时间很好的识别到。</li><li>如果一页有不止一个重点，或者有必要强调内容之间的逻辑，<strong>可选择通过动画顺次展示</strong>。如果没有条件放动画的话（答辩的那个教室电脑太垃圾的话），<strong>也可用虚线隔开</strong>，激光笔指好。</li><li>注意<strong>对齐</strong>！注意周围、尤其是左右<strong>留白</strong>！注意左右空的一样宽！</li><li><strong>所有字号大于 18，行间距 1.3 倍</strong>最好看</li></ul></li><li><p>推荐标题用微软雅黑，正文用黑体，英文用 Arial 或 Calibri 或 Times New Roman，<strong>不要用奇怪的字体</strong>，有时候保存字体在别人电脑上也不一定能显示。</p></li><li><p>PPT 封面标题要突出，其他如果花哨一点，放了学校照片什么的无所谓</p></li></ol><p><strong>总结来说，重点必须突出，任何元素不可喧宾夺主。</strong></p><p>在这样的思路下，所有点缀都在为突出要表达的想法服务，每个框、图都是有目的设置的，根据所讲内容的不同而不同，没有任何装饰是为了 PPT 看起来漂亮而设置的。感到漂亮这个思想本身就是对思考的干扰，学术 PPT ，服务于其目的，应该侧重于观看的舒适和信息的易获取，PPT 美化对此提供的帮助很有限。</p><hr><p>希望老师看到这篇文的时候不要在心里想，“我当时说的还有 xxx 怎么直到现在都没想通？”</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科研笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反应力场如何提高运算效率（三）lammps中Kokkos包和OpenMP包的安装</title>
      <link href="2021/11/26/%E5%8F%8D%E5%BA%94%E5%8A%9B%E5%9C%BA%E5%A6%82%E4%BD%95%E6%8F%90%E9%AB%98%E8%BF%90%E7%AE%97%E6%95%88%E7%8E%87%EF%BC%88%E4%B8%89%EF%BC%89lammps%E4%B8%ADKokkos%E5%8C%85%E5%92%8COpenMP%E5%8C%85%E7%9A%84%E5%AE%89%E8%A3%85/"/>
      <url>2021/11/26/%E5%8F%8D%E5%BA%94%E5%8A%9B%E5%9C%BA%E5%A6%82%E4%BD%95%E6%8F%90%E9%AB%98%E8%BF%90%E7%AE%97%E6%95%88%E7%8E%87%EF%BC%88%E4%B8%89%EF%BC%89lammps%E4%B8%ADKokkos%E5%8C%85%E5%92%8COpenMP%E5%8C%85%E7%9A%84%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p>上次CUDA 已经装好，今天我们就要正式在 lammps 中 加装 KOKKOS 包和 OMP 包。</p><a id="more"></a><h2 id="安装-Kokkos-包"><a href="#安装-Kokkos-包" class="headerlink" title="安装 Kokkos 包"></a>安装 Kokkos 包</h2><p>这个在 lammps 中非常简单：</p><pre class="language-shell" data-language="shell"><code class="language-shell">make yes-kokkos</code></pre><p>但是 lammps 的编译则需要注意，Makefile 里需要修改和添加一些值：</p><pre class="language-makefile" data-language="makefile"><code class="language-makefile">……KOKKOS_ABSOLUTE_PATH <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token keyword">shell</span> cd <span class="token variable">$</span><span class="token punctuation">(</span>KOKKOS_PATH<span class="token punctuation">)</span><span class="token punctuation">;</span> pwd<span class="token punctuation">)</span><span class="token keyword">export</span> OMPI_CXX <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span>KOKKOS_ABSOLUTE_PATH<span class="token punctuation">)</span>/bin/nvcc_wrapper……KOKKOS_DEVICES <span class="token operator">=</span> Cuda<span class="token comment"># HOSTARCH = HOST from list above that is hosting the GPU  </span><span class="token comment"># GPUARCH = GPU from list above</span>KOKKOS_ARCH <span class="token operator">=</span> BDW,MAXWELL50  KOKKOS_CUDA_OPTIONS <span class="token operator">=</span> <span class="token string">"enable_lambda"</span>……</code></pre><p>其中第二行 nvcc_wrapper 在哪儿你可以在 /lib/kokkos 里找找。第六行 KOKKOS_ARCH 的两个值分别是上面注释的 HOSTARCH 和 GPUARCH。</p><p>HOSTARCH 参见<a href="https://ark.intel.com/content/www/us/en/ark.html#@Processors">网址</a>，选则自己机器的型号：</p><p><img src="https://image.wanyijizi.com/20211126/2cbd4f073128458c9198b7a74eb2f8c4.png" alt="29ef697826e080bae28c868b92e15c89.png" loading="lazy"></p><p><img src="https://image.wanyijizi.com/20211126/bd2ead8614664b24ae3ce343104b0244.png" alt="c469e5f6f11db69b24428abc7fd25363.png" loading="lazy"></p><p>具体呢，我查看了上面圈出来的两处，对应了 <a href="https://docs.lammps.org/Build_extras.html#kokkos">lammps 官网列表</a>里的 BDW：</p><p><img src="https://image.wanyijizi.com/20211126/bdb038e0916446ccbfa7d9388a383635.png" alt="44a52cd1af3325f0640dcf76b97c3660.png" loading="lazy"></p><p>至于 GPUARCH 为什么选 MAXWELL50…我猜的。我猜后两位数字表示 GPU 的计算能力，就和<a href="https://wanyijizi.com/2021/11/25/%E5%8F%8D%E5%BA%94%E5%8A%9B%E5%9C%BA%E5%A6%82%E4%BD%95%E6%8F%90%E9%AB%98%E8%BF%90%E7%AE%97%E6%95%88%E7%8E%87%EF%BC%88%E4%BA%8C%EF%BC%89CUDA+lammps%E4%B8%ADGPU%E5%8C%85%E7%9A%84%E5%AE%89%E8%A3%85/">前一篇文</a>里面的 sm_50 一样看着数字选就行。</p><p>将新写的 Makefile.peachrl 放在 /src/MAKE 目录下，然后回到 /src 并运行以下命令进行编译：</p><pre class="language-shell" data-language="shell"><code class="language-shell">make peachrl -j 24</code></pre><p>还是先用 lammps example 自带的 in.flow.couette 例子试一试：</p><pre class="language-shell" data-language="shell"><code class="language-shell">mpirun -np 24 lmp_peachrl -k on g 1 -sf kk -in in.flow.couette</code></pre><p><img src="https://image.wanyijizi.com/20211126/c53a5898e46d4a0e9e01873b4f8e6642.png" alt="f60de6859bf174f5a950e07b538c2ebb.png" loading="lazy"></p><p>跑通了，就是比 GPU 包的加速更慢了。</p><h2 id="安装-OpenMP-包"><a href="#安装-OpenMP-包" class="headerlink" title="安装 OpenMP 包"></a>安装 OpenMP 包</h2><p>反应力场本就只有唯二两种加速方式，除了上文的 Kokkos，另一个可以加速的包是 OpenMP。同样是：</p><pre class="language-shell" data-language="shell"><code class="language-shell">make yes-openmp</code></pre><p>同样是Makefile 里需要修改和添加一些值：</p><pre class="language-makefile" data-language="makefile"><code class="language-makefile">CCFLAGS <span class="token operator">=</span>-g -O3 -fopenmpSHFLAGS <span class="token operator">=</span>-fPICDEPFLAGS <span class="token operator">=</span>-MLINK <span class="token operator">=</span>mpicxxLINKFLAGS <span class="token operator">=</span>-g -O -fopenmp</code></pre><p>还是先用 lammps example 自带的 in.flow.couette 例子试一试：</p><pre class="language-shell" data-language="shell"><code class="language-shell">mpirun -np 24 lmp_peachrl -sf omp -pk omp 4 -in in.flow.couette</code></pre><p><img src="https://image.wanyijizi.com/20211126/d94bc87d05c845998a02a20a044d5bf3.png" alt="d93a52e1bfa311d637fc1e928408e342.png" loading="lazy"></p><p>成了！（<del>更慢了更慢了，我都不知道我到底在研究加速还是减速了。</del>）OpenMP 慎用，线程数太多不一定好。</p><h2 id="OpenMP-Kokkos"><a href="#OpenMP-Kokkos" class="headerlink" title="OpenMP + Kokkos"></a>OpenMP + Kokkos</h2><p>Kokkos 是可以和 OpenMP 一起配合使用的，调整 Makefile 如下：</p><pre class="language-makefile" data-language="makefile"><code class="language-makefile"><span class="token comment"># ubuntu = Ubuntu Linux box, g++, openmpi, FFTW3</span><span class="token comment"># you have to install the packages g++, mpi-default-bin, mpi-default-dev,</span><span class="token comment"># libfftw3-dev, libjpeg-dev and libpng12-dev to compile LAMMPS with this</span><span class="token comment"># makefile</span>SHELL <span class="token operator">=</span> /bin/sh<span class="token comment"># ---------------------------------------------------------------------</span><span class="token comment"># compiler/linker settings</span><span class="token comment"># specify flags and libraries needed for your compiler</span>KOKKOS_ABSOLUTE_PATH <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token keyword">shell</span> cd <span class="token variable">$</span><span class="token punctuation">(</span>KOKKOS_PATH<span class="token punctuation">)</span><span class="token punctuation">;</span> pwd<span class="token punctuation">)</span><span class="token keyword">export</span> OMPI_CXX <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span>KOKKOS_ABSOLUTE_PATH<span class="token punctuation">)</span>/bin/nvcc_wrapperCC <span class="token operator">=</span>mpicxxCCFLAGS <span class="token operator">=</span>-g -O3 -fopenmpSHFLAGS <span class="token operator">=</span>-fPICDEPFLAGS <span class="token operator">=</span>-MLINK <span class="token operator">=</span>mpicxxLINKFLAGS <span class="token operator">=</span>-g -O -fopenmpLIB <span class="token operator">=</span> SIZE <span class="token operator">=</span>sizeARCHIVE <span class="token operator">=</span>arARFLAGS <span class="token operator">=</span>-rcSHLIBFLAGS <span class="token operator">=</span>-sharedKOKKOS_DEVICES <span class="token operator">=</span> Cuda,OpenMP<span class="token comment"># KOKKOS_ARCH = MAXWELL50</span>KOKKOS_ARCH <span class="token operator">=</span> BDW,MAXWELL50  <span class="token comment"># HOSTARCH = HOST from list above that is hosting the GPU  # GPUARCH = GPU from list above</span>KOKKOS_CUDA_OPTIONS <span class="token operator">=</span> <span class="token string">"enable_lambda"</span><span class="token comment"># ---------------------------------------------------------------------</span><span class="token comment"># LAMMPS-specific settings, all OPTIONAL</span><span class="token comment"># specify settings for LAMMPS features you will use</span><span class="token comment"># if you change any -D setting, do full re-compile after "make clean"</span><span class="token comment"># LAMMPS ifdef settings</span><span class="token comment"># see possible settings in Section 3.5 of the manual</span>LMP_INC <span class="token operator">=</span>-DLAMMPS_GZIP -DLAMMPS_JPEG -DLAMMPS_PNG -DLAMMPS_FFMPEG<span class="token comment"># MPI library</span><span class="token comment"># see discussion in Section 3.4 of the manual</span><span class="token comment"># MPI wrapper compiler/linker can provide this info</span><span class="token comment"># can point to dummy MPI library in src/STUBS as in Makefile.serial</span><span class="token comment"># use -D MPICH and OMPI settings in INC to avoid C++ lib conflicts</span><span class="token comment"># INC = path for mpi.h, MPI compiler settings</span><span class="token comment"># PATH = path for MPI library</span><span class="token comment"># LIB = name of MPI library</span>MPI_INC <span class="token operator">=</span>MPI_PATH <span class="token operator">=</span> MPI_LIB <span class="token operator">=</span><span class="token comment"># FFT library</span><span class="token comment"># see discussion in Section 3.5.2 of manual</span><span class="token comment"># can be left blank to use provided KISS FFT library</span><span class="token comment"># INC = -DFFT setting, e.g. -DFFT_FFTW, FFT compiler settings</span><span class="token comment"># PATH = path for FFT library</span><span class="token comment"># LIB = name of FFT library</span>FFT_INC <span class="token operator">=</span>    -DFFT_FFTW3FFT_PATH <span class="token operator">=</span> FFT_LIB <span class="token operator">=</span> -lfftw3<span class="token comment"># JPEG and/or PNG library</span><span class="token comment"># see discussion in Section 3.5.4 of manual</span><span class="token comment"># only needed if -DLAMMPS_JPEG or -DLAMMPS_PNG listed with LMP_INC</span><span class="token comment"># INC = path(s) for jpeglib.h and/or png.h</span><span class="token comment"># PATH = path(s) for JPEG library and/or PNG library</span><span class="token comment"># LIB = name(s) of JPEG library and/or PNG library</span>JPG_INC <span class="token operator">=</span>       JPG_PATH <span class="token operator">=</span> JPG_LIB <span class="token operator">=</span> -ljpeg -lpng<span class="token comment"># ---------------------------------------------------------------------</span><span class="token comment"># build rules and dependencies</span><span class="token comment"># do not edit this section</span><span class="token keyword">include</span> Makefile.package.settings<span class="token keyword">include</span> Makefile.packageEXTRA_INC <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span>LMP_INC<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>PKG_INC<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>MPI_INC<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>FFT_INC<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>JPG_INC<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>PKG_SYSINC<span class="token punctuation">)</span>EXTRA_PATH <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span>PKG_PATH<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>MPI_PATH<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>FFT_PATH<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>JPG_PATH<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>PKG_SYSPATH<span class="token punctuation">)</span>EXTRA_LIB <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span>PKG_LIB<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>MPI_LIB<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>FFT_LIB<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>JPG_LIB<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>PKG_SYSLIB<span class="token punctuation">)</span>EXTRA_CPP_DEPENDS <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span>PKG_CPP_DEPENDS<span class="token punctuation">)</span>EXTRA_LINK_DEPENDS <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span>PKG_LINK_DEPENDS<span class="token punctuation">)</span><span class="token comment"># Path to src files</span><span class="token keyword">vpath</span> %.cpp ..<span class="token keyword">vpath</span> %.h ..<span class="token comment"># Link target</span><span class="token symbol"><span class="token variable">$</span>(EXE)</span><span class="token punctuation">:</span> main.o <span class="token variable">$</span><span class="token punctuation">(</span>LMPLIB<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>EXTRA_LINK_DEPENDS<span class="token punctuation">)</span><span class="token variable">$</span><span class="token punctuation">(</span>LINK<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>LINKFLAGS<span class="token punctuation">)</span> main.o <span class="token variable">$</span><span class="token punctuation">(</span>EXTRA_PATH<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>LMPLINK<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>EXTRA_LIB<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>LIB<span class="token punctuation">)</span> -o <span class="token variable">$@</span><span class="token variable">$</span><span class="token punctuation">(</span>SIZE<span class="token punctuation">)</span> <span class="token variable">$@</span><span class="token comment"># Library targets</span><span class="token symbol"><span class="token variable">$</span>(ARLIB)</span><span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>OBJ<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>EXTRA_LINK_DEPENDS<span class="token punctuation">)</span><span class="token operator">@</span>rm -f ../<span class="token variable">$</span><span class="token punctuation">(</span>ARLIB<span class="token punctuation">)</span><span class="token variable">$</span><span class="token punctuation">(</span>ARCHIVE<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>ARFLAGS<span class="token punctuation">)</span> ../<span class="token variable">$</span><span class="token punctuation">(</span>ARLIB<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>OBJ<span class="token punctuation">)</span><span class="token operator">@</span>rm -f <span class="token variable">$</span><span class="token punctuation">(</span>ARLIB<span class="token punctuation">)</span><span class="token operator">@</span>ln -s ../<span class="token variable">$</span><span class="token punctuation">(</span>ARLIB<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>ARLIB<span class="token punctuation">)</span><span class="token symbol"><span class="token variable">$</span>(SHLIB)</span><span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>OBJ<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>EXTRA_LINK_DEPENDS<span class="token punctuation">)</span><span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>CCFLAGS<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>SHFLAGS<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>SHLIBFLAGS<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>EXTRA_PATH<span class="token punctuation">)</span> -o ../<span class="token variable">$</span><span class="token punctuation">(</span>SHLIB<span class="token punctuation">)</span> \<span class="token variable">$</span><span class="token punctuation">(</span>OBJ<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>EXTRA_LIB<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>LIB<span class="token punctuation">)</span><span class="token operator">@</span>rm -f <span class="token variable">$</span><span class="token punctuation">(</span>SHLIB<span class="token punctuation">)</span><span class="token operator">@</span>ln -s ../<span class="token variable">$</span><span class="token punctuation">(</span>SHLIB<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>SHLIB<span class="token punctuation">)</span><span class="token comment"># Compilation rules</span><span class="token symbol">%.o</span><span class="token punctuation">:</span>%.cpp<span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>CCFLAGS<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>SHFLAGS<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>EXTRA_INC<span class="token punctuation">)</span> -c <span class="token variable">$&lt;</span><span class="token comment"># Individual dependencies</span><span class="token symbol">depend</span> <span class="token punctuation">:</span> fastdep.exe <span class="token variable">$</span><span class="token punctuation">(</span>SRC<span class="token punctuation">)</span><span class="token operator">@</span>./fastdep.exe <span class="token variable">$</span><span class="token punctuation">(</span>EXTRA_INC<span class="token punctuation">)</span> -- <span class="token variable">$^</span> &gt; .depend <span class="token operator">|</span><span class="token operator">|</span> exit 1<span class="token symbol">fastdep.exe</span><span class="token punctuation">:</span> ../DEPEND/fastdep.ccc -O -o <span class="token variable">$@</span> <span class="token variable">$&lt;</span><span class="token keyword">sinclude</span> .depend</code></pre><p>lammps example 自带的 in.flow.couette 例子，24 MPI tasks/node，1 GPUs/node，8 OpenMP threads/task：</p><pre class="language-shell" data-language="shell"><code class="language-shell">mpirun -np 24 lmp_peachrl -k on g 1 t 2 -sf kk -in in.flow.couette</code></pre><blockquote><h3 id="线程数、GPU数都应该怎么设置"><a href="#线程数、GPU数都应该怎么设置" class="headerlink" title="线程数、GPU数都应该怎么设置"></a>线程数、GPU数都应该怎么设置</h3><p>一般来说要求：  </p><ul><li><p>(number of MPI tasks) * (OpenMP threads per task) &lt;= (total number of physical cores per node)  </p></li><li><p>超线程：(number of MPI tasks) * (OpenMP threads per task) &lt;= (total number of virtual cores per node)  </p><p>超线程可能会报警：  </p><p><img src="https://image.wanyijizi.com/20211126/c0ffdea161264c12870201318912512c.png" alt="3a7784b6d1060de02afd0797ba4a5313.png" loading="lazy"></p></li></ul></blockquote><p>最终结果：</p><p><img src="https://image.wanyijizi.com/20211126/751115500a0643fca300a950f0e80a14.png" alt="7b717cfcbb23a0f95b1235af7fcfbd8b.png" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LAMMPS </tag>
            
            <tag> 超算 </tag>
            
            <tag> Slurm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反应力场如何提高运算效率（二）CUDA+lammps中GPU包的安装</title>
      <link href="2021/11/25/%E5%8F%8D%E5%BA%94%E5%8A%9B%E5%9C%BA%E5%A6%82%E4%BD%95%E6%8F%90%E9%AB%98%E8%BF%90%E7%AE%97%E6%95%88%E7%8E%87%EF%BC%88%E4%BA%8C%EF%BC%89CUDA+lammps%E4%B8%ADGPU%E5%8C%85%E7%9A%84%E5%AE%89%E8%A3%85/"/>
      <url>2021/11/25/%E5%8F%8D%E5%BA%94%E5%8A%9B%E5%9C%BA%E5%A6%82%E4%BD%95%E6%8F%90%E9%AB%98%E8%BF%90%E7%AE%97%E6%95%88%E7%8E%87%EF%BC%88%E4%BA%8C%EF%BC%89CUDA+lammps%E4%B8%ADGPU%E5%8C%85%E7%9A%84%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p>上次说到反应力场的计算比较慢，在 lammps 中 ReaxFF 想要加速只能通过 KOKKOS 和 OMP。这还需要预先安装好的并行编译器。我们这一篇文就先说 Ubuntu 20.04.3 LTS 系统上如何安装和使用 NIVIDIA 的 CUDA。</p><a id="more"></a><p>我们在查看Kokkos包的安装时注意到几个前提：</p><ol><li> Kokkos requires using a compiler that supports the c++14 standard. （这个容易达到）</li><li> To build with Kokkos support for NVIDIA GPUs, the NVIDIA CUDA toolkit software version 9.0 or later must be installed on your system. （这个桃子的小机器做不到，它的 GPU 是 AMD 的）</li><li> To build with Kokkos the HIPCC compiler from the AMD ROCm software version 3.5 or later is required. （这个很不幸桃子的小机器也做不到，Deepin 系统并没有直接受到支持，需要伪装成 Ubuntu 系统才可以安装，但是桃子研究了研究感觉风险过大得不偿失）</li></ol><p>所以，以下安装步骤是在实验室的小机器 Ubuntu 20.04.3 LTS 系统上进行的，GPU 是 NVIDIA 的。</p><h2 id="首先安装-NVIDIA-CUDA-toolkit"><a href="#首先安装-NVIDIA-CUDA-toolkit" class="headerlink" title="首先安装 NVIDIA CUDA toolkit"></a>首先安装 NVIDIA CUDA toolkit</h2><p>以下步骤参考一些网友的博客以及 NVIDIA 官方的安装说明。</p><h3 id="确认-GPU-是否支持-CUDA"><a href="#确认-GPU-是否支持-CUDA" class="headerlink" title="确认 GPU 是否支持 CUDA"></a>确认 GPU 是否支持 CUDA</h3><p><img src="https://image.wanyijizi.com/20211125/71cc06f2c979491ba208fbfab1e23882.png" alt="1ca7ac8b53d91399c93d736b53e7b07a.png" loading="lazy"></p><p>Quadro 系列用于专业可视化（听起来仿佛比不上 Tesla 系列用于技术与科学计算？总之），到 NVIDIA <a href="https://developer.nvidia.com/zh-cn/cuda-gpus">官网</a>查看我们的 GPU 是否满足要求，Quadro K620 确实在支持 CUDA 的列表中。</p><h3 id="查看系统是否满足要求"><a href="#查看系统是否满足要求" class="headerlink" title="查看系统是否满足要求"></a>查看系统是否满足要求</h3><p>Ubuntu 20.04.3 LTS 肯定是行的。</p><h3 id="确认系统是否安装-gcc"><a href="#确认系统是否安装-gcc" class="headerlink" title="确认系统是否安装 gcc"></a>确认系统是否安装 gcc</h3><p><img src="https://image.wanyijizi.com/20211125/2ebb46a4b395492a9d8d63116f060c49.png" alt="0d5ed96ae58de62ba402147d8e5482bf.png" loading="lazy"></p><h3 id="确认系统内核符合要求："><a href="#确认系统内核符合要求：" class="headerlink" title="确认系统内核符合要求："></a>确认系统内核符合要求：</h3><p><img src="https://image.wanyijizi.com/20211125/8dfde93a0d8a4872b7c61663fda65970.png" alt="419b680c87f54544be2c546494b69f8c.png" loading="lazy"></p><h3 id="选择安装方式"><a href="#选择安装方式" class="headerlink" title="选择安装方式"></a>选择安装方式</h3><p>现在可以开始 CUDA 了。CUDA 有多种安装方法，我们这里选择 runfile 方式进行安装（这里参考了<a href="https://www.cnblogs.com/booturbo/p/13960935.html">一位网友博客</a>里推荐用这个方法的）。</p><h3 id="停用-Nouveau"><a href="#停用-Nouveau" class="headerlink" title="停用 Nouveau"></a>停用 Nouveau</h3><p>查看 Nouveau 驱动，发现正在运行：</p><p><img src="https://image.wanyijizi.com/20211125/2ba42ef4d3f74bc5b8bcaae9c5b37187.png" alt="f91cadeeeeeecfe5b89328ca2a9f74a8.png" loading="lazy"></p><p>创建 /etc/modprobe.d/blacklist-nouveau.conf 文件并写上以下两行：</p><pre class="language-none"><code class="language-none">blacklist nouveauoptions nouveau modeset=0</code></pre><p>然后运行以下命令：</p><p><img src="https://image.wanyijizi.com/20211125/a96dceb117e84bf1b5bf7893e2f5a26b.png" alt="1e1407981f7f18268a622f311d3cd333.png" loading="lazy"></p><p>然后重启。</p><h3 id="下载-CUDA"><a href="#下载-CUDA" class="headerlink" title="下载 CUDA"></a>下载 CUDA</h3><pre class="language-shell" data-language="shell"><code class="language-shell">wget https://developer.download.nvidia.com/compute/cuda/11.5.1/local_installers/cuda_11.5.1_495.29.05_linux.run</code></pre><h3 id="安装-CUDA"><a href="#安装-CUDA" class="headerlink" title="安装 CUDA"></a>安装 CUDA</h3><pre class="language-shell" data-language="shell"><code class="language-shell">sudo sh cuda_11.5.1_495.29.05_linux.run</code></pre><p>这个命令要等好久才有反应（不过也可能是这个机器 28 个核被师兄占了 26 个计算的原因？），然后问是否接受上面的条款：</p><p><img src="https://image.wanyijizi.com/20211125/5aaf81a8132146ada3261370b5c1d040.png" alt="68038216d747e679ff5424a7c55c8a82.png" loading="lazy"></p><p>当然 accept，</p><p><img src="https://image.wanyijizi.com/20211125/9935eeca6b3e405eba6b449f709837d1.png" alt="3af2da26f55189ae0d96fed9854b3771.png" loading="lazy"></p><p>接下来 Install</p><p>如果没有报错就可以直接进行下一项了。</p><p>不过，如果你和我遇到一样的情况的话：</p><p><img src="https://image.wanyijizi.com/20211125/64b4701f4e82426996c57d7869a130eb.png" alt="53480f1a9772bdba014f66a077b2cc7f.png" loading="lazy"></p><p>报错说驱动装不上，可能的原因是停用 Nouveau 后没有重启。</p><p>如果还有其他可能，可以手动重装一下驱动，参考<a href="https://www.cnblogs.com/chua-n/p/13208398.html">网友博文1</a>和<a href="https://www.cnblogs.com/chua-n/p/13208414.html">博文2</a>。</p><h4 id="插播掉坑记录"><a href="#插播掉坑记录" class="headerlink" title="插播掉坑记录"></a>插播掉坑记录</h4><p>因为之前疏忽了没有重启，而且也没有意识到停用 Nouveau 之后重启的必要性，所以按照上面提到的博文操作了以下手动安装驱动的流程。</p><h5 id="下载对应-GPU-型号的驱动"><a href="#下载对应-GPU-型号的驱动" class="headerlink" title="下载对应 GPU 型号的驱动"></a>下载对应 GPU 型号的驱动</h5><p>网址：<a href="https://www.nvidia.cn/Download/index.aspx?lang=cn">https://www.nvidia.cn/Download/index.aspx?lang=cn</a></p><p>没有桌面的话，可以在命令行由 wget 命令下载。</p><h5 id="卸载旧驱动"><a href="#卸载旧驱动" class="headerlink" title="卸载旧驱动"></a>卸载旧驱动</h5><pre class="language-shell" data-language="shell"><code class="language-shell">sudo apt-get --purge remove nvidia-*</code></pre><h5 id="安装新驱动"><a href="#安装新驱动" class="headerlink" title="安装新驱动"></a>安装新驱动</h5><pre class="language-shell" data-language="shell"><code class="language-shell">sudo sh NVIDIA-Linux-x86_64-470.86.run</code></pre><p><img src="https://image.wanyijizi.com/20211125/4ebfae812ac544b3b1bcaa3e358eb170.png" alt="8be1806700461cc2d45b3d3c74a4eec7.png" loading="lazy"></p><p>由于不太懂，先按照别人已成功的案例安装了再说，所以选 Continue installation，</p><p><img src="https://image.wanyijizi.com/20211125/6ebeb958a41f48f98bfc310e6e57cab2.png" alt="409743dee8daaacf4397f773a26db045.png" loading="lazy"></p><p>我找到了之前安装出错的真正原因，停用 Nouveau 后需要重启。。。</p><p>重启电脑，验证是否已禁用 nouveau：</p><p><img src="https://image.wanyijizi.com/20211125/c08ff7eee89b4657a40288ec8d9e617c.png" alt="b5a9fe8b5043ffe0e2eda83a94fab20d.png" loading="lazy"></p><p>什么也没有，成功停掉了。然后重新安装新驱动：</p><p><img src="https://image.wanyijizi.com/20211125/de940b9ac7374e70acbf317cfbbcb909.png" alt="bbbdad065b6e63f9ab32251f9b433a70.png" loading="lazy"></p><p>这回很顺利，下面全选yes（要看清楚有的默认选项是no）：</p><p><img src="https://image.wanyijizi.com/20211125/f20e4b7c9a08465ca40fb72c0c485b0d.png" alt="69f3fc6d9dac6e6342b3fa25b4520471.png" loading="lazy"></p><p><img src="https://image.wanyijizi.com/20211125/cfe9bc28668f4690befd8fd455e69031.png" alt="b071b11ca1f97bdac472ecabaf97c56e.png" loading="lazy"></p><p><img src="https://image.wanyijizi.com/20211125/552b0262cb024927a1ae34920a99a6bb.png" alt="9f38e9d0470358915ccd43d74799b420.png" loading="lazy"></p><h5 id="查看是否安装成功"><a href="#查看是否安装成功" class="headerlink" title="查看是否安装成功"></a>查看是否安装成功</h5><p><img src="https://image.wanyijizi.com/20211125/326af8fb138146debd12db3137f247cf.png" alt="ad3a1cb16e5222e5094347f13cadbbfa.png" loading="lazy"></p><h4 id="终于安装成功"><a href="#终于安装成功" class="headerlink" title="终于安装成功"></a>终于安装成功</h4><p>彻底删除旧的 CUDA，如果有的话：</p><pre class="language-shell" data-language="shell"><code class="language-shell">sudo apt autoremove cudasudo apt --purge remove "*cublas*" "cuda*"</code></pre><p>安装新的 CUDA：</p><p><img src="https://image.wanyijizi.com/20211125/0d890bca58a84f1fa8319885ea4f018b.png" alt="f480e000288f63e960ad9729a6d9d111.png" loading="lazy"></p><p>搞定！</p><h3 id="添加-path"><a href="#添加-path" class="headerlink" title="添加 path"></a>添加 path</h3><p>按照上图的提示在 ~/.bashrc 添加路径：</p><pre class="language-shell" data-language="shell"><code class="language-shell">export PATH=$PATH:/usr/local/cuda-11.5/binexport LD_LIBRARY_PATH=/usr/local/cuda-11.5/lib64</code></pre><p>刷新一下：</p><pre class="language-shell" data-language="shell"><code class="language-shell">source ~/.bashrc</code></pre><h3 id="检查是否安装完成"><a href="#检查是否安装完成" class="headerlink" title="检查是否安装完成"></a>检查是否安装完成</h3><p><img src="https://image.wanyijizi.com/20211125/3e59183acede406eb175d53fa49887dd.png" alt="23676246ac530c1097289ed8e3431d1c.png" loading="lazy"></p><p>大功告成～～</p><h2 id="再在-lammps-中安装-GPU-包"><a href="#再在-lammps-中安装-GPU-包" class="headerlink" title="再在 lammps 中安装 GPU 包"></a>再在 lammps 中安装 GPU 包</h2><h3 id="lib-gpu-目录下首先编译-GPU-library"><a href="#lib-gpu-目录下首先编译-GPU-library" class="headerlink" title="lib/gpu 目录下首先编译 GPU library"></a>lib/gpu 目录下首先编译 GPU library</h3><p>修改文件 Makefile.linux：</p><pre class="language-makefile" data-language="makefile"><code class="language-makefile">CUDA_HOME <span class="token operator">=</span> /usr/local/cuda-11.5CUDA_ARCH <span class="token operator">=</span> -arch<span class="token operator">=</span>sm_50</code></pre><p>上面一行是 CUDA 的路径。下面的 sm_50 是由 Compute Capability 决定的。NVIDIA <a href="https://developer.nvidia.com/zh-cn/cuda-gpus">官网</a>上有一些类似下面这样的表格：</p><p><img src="https://image.wanyijizi.com/20211125/b71712c60ed54008a54650b25c10f934.png" alt="feaef7de1790276de460d0a3e428b17d.png" loading="lazy"></p><p>计算能力 7.5 就应该是sm_75。</p><p>其他项可以看情况改，比如 CUDA_PRECISION 决定了 GPU 计算的精度。</p><p>更改完执行：</p><pre class="language-shell" data-language="shell"><code class="language-shell">make -f Makefile.linux -j 24</code></pre><p>如果再次修改，则编译前还需执行 <code>make -f Makefile.linux clean</code>。</p><p>如果有必要，还需要修改文件 Makefile.lammps.standard（Makefile.linux 最上面 EXTRAMAKE 的值）：</p><pre class="language-makefile" data-language="makefile"><code class="language-makefile">CUDA_HOME<span class="token operator">=</span>/usr/local/cuda-11.5</code></pre><h3 id="src-目录安装-GPU-包"><a href="#src-目录安装-GPU-包" class="headerlink" title="src 目录安装 GPU 包"></a>src 目录安装 GPU 包</h3><pre class="language-shell" data-language="shell"><code class="language-shell">make yes-gpu</code></pre><p>如果安装后又重新编译了 GPU library，则这里需要先 <code>make no-gpu</code>然后再重新 <code>make yes-gpu</code>。</p><h3 id="重新编译-lammps"><a href="#重新编译-lammps" class="headerlink" title="重新编译 lammps"></a>重新编译 lammps</h3><pre class="language-shell" data-language="shell"><code class="language-shell">make clean-allmake peachrl -j 24</code></pre><h3 id="试一试"><a href="#试一试" class="headerlink" title="试一试"></a>试一试</h3><pre class="language-shell" data-language="shell"><code class="language-shell">mpirun -np 8 lmp_peachrl -in in.flow.couette</code></pre><p><img src="https://image.wanyijizi.com/20211125/8eca8d83f1c5402e82e0ae5a26dc6f83.png" alt="8eca8d83f1c5402e82e0ae5a26dc6f83.png" loading="lazy"></p><pre class="language-shell" data-language="shell"><code class="language-shell">mpirun -np 8 lmp_peachrl -sf gpu -pk gpu 1 -in in.flow.couette</code></pre><p><img src="https://image.wanyijizi.com/20211125/a677bbb0dc2e4c15a95640e49721d822.png" alt="a677bbb0dc2e4c15a95640e49721d822.png" loading="lazy"></p><pre class="language-shell" data-language="shell"><code class="language-shell">mpirun -np 8 lmp_peachrl -sf gpu -pk gpu 2 -in in.flow.couette</code></pre><p>这回 error 了。</p><p><img src="https://image.wanyijizi.com/20211125/0ce9a99e79174fbd84148b9d3d980b41.png" alt="0ce9a99e79174fbd84148b9d3d980b41.png" loading="lazy"></p><p>大概是我们的这台小机器只能支持 1 块 GPU？而且，这 1 块 GPU 的加速还看起来非常地不给力，完全比不上没有 GPU 加速的效率，这可能是 lammps example 自带的 in.flow.couette 例子太简单了，完全没有必要用 GPU 来自讨苦吃。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过 GPU 包的成功安装，确认了 CUDA 已经装好，我们离反应力场的加速又进一步了。</p>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LAMMPS </tag>
            
            <tag> 超算 </tag>
            
            <tag> Slurm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反应力场如何提高并行计算效率（一）</title>
      <link href="2021/11/24/%E5%8F%8D%E5%BA%94%E5%8A%9B%E5%9C%BA%E5%A6%82%E4%BD%95%E6%8F%90%E9%AB%98%E8%BF%90%E7%AE%97%E6%95%88%E7%8E%87%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>2021/11/24/%E5%8F%8D%E5%BA%94%E5%8A%9B%E5%9C%BA%E5%A6%82%E4%BD%95%E6%8F%90%E9%AB%98%E8%BF%90%E7%AE%97%E6%95%88%E7%8E%87%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>没想到桃子有一天会受困于计算效率……一直以为这是那些学化学、学量子计算的人才需要关心的事情，没想到我这么小小几千原子的体系居然也跑不动了╮（﹀_﹀）╭</p><a id="more"></a><h2 id="三种配置的模拟速度"><a href="#三种配置的模拟速度" class="headerlink" title="三种配置的模拟速度"></a>三种配置的模拟速度</h2><p>2000+ 个原子的模拟体系，时间步长 0.5 fs，以下是模拟 100 步的结果。</p><h3 id="桃子的小机器"><a href="#桃子的小机器" class="headerlink" title="桃子的小机器"></a>桃子的小机器</h3><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p><img src="https://image.wanyijizi.com/20211124/b9b32591a4b545b6133315c537a7a130.png" alt="b9b32591a4b545b6133315c537a7a130.png" loading="lazy"></p><h4 id="单核计算"><a href="#单核计算" class="headerlink" title="单核计算"></a>单核计算</h4><p>Preformance 一行显示的是最直观的速度，如下图，一天能模拟物理时间 0.127 ns，每秒钟模拟的 2.939 步。</p><p>MPI 表格里 Comm 一行显示的是多核并行计算核间通讯时间。</p><p><img src="https://image.wanyijizi.com/20211124/790da3b8e2f30b2263976addb00d267d.png" alt="790da3b8e2f30b2263976addb00d267d.png" loading="lazy"></p><h4 id="2核计算"><a href="#2核计算" class="headerlink" title="2核计算"></a>2核计算</h4><p><strong>加速比V<sub>8</sub>/V<sub>1</sub> = 1.68，加速效率V<sub>8</sub>/(pV<sub>1</sub>) = 83.75%</strong></p><p><img src="https://image.wanyijizi.com/20211124/acb8eec2baf0de4ad2b902fc641ad792.png" alt="acb8eec2baf0de4ad2b902fc641ad792.png" loading="lazy"></p><h4 id="4核计算"><a href="#4核计算" class="headerlink" title="4核计算"></a>4核计算</h4><p>通讯时间占比 26.43%，这才 4 核，略有点高。</p><p><strong>加速比V<sub>8</sub>/V<sub>1</sub> = 1.69，加速效率V<sub>8</sub>/(pV<sub>1</sub>) = 42.26%</strong></p><p><img src="https://image.wanyijizi.com/20211124/0342a3f7f3731eecb747487eba30ba64.png" alt="0342a3f7f3731eecb747487eba30ba64.png" loading="lazy"></p><h3 id="实验室的小机器（hpc5）"><a href="#实验室的小机器（hpc5）" class="headerlink" title="实验室的小机器（hpc5）"></a>实验室的小机器（hpc5）</h3><h4 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h4><p><img src="https://image.wanyijizi.com/20211124/dd32c97bc0c89ba106090624768a59db.png" alt="dd32c97bc0c89ba106090624768a59db.png" loading="lazy"></p><h4 id="单核计算-1"><a href="#单核计算-1" class="headerlink" title="单核计算"></a>单核计算</h4><p><img src="https://image.wanyijizi.com/20211124/c70a2f956e6647b68ec0d6d4adc85be2.png" alt="c70a2f956e6647b68ec0d6d4adc85be2.png" loading="lazy"></p><h4 id="8核计算"><a href="#8核计算" class="headerlink" title="8核计算"></a>8核计算</h4><p><strong>加速比V<sub>8</sub>/V<sub>1</sub> = 2.87，加速效率V<sub>8</sub>/(pV<sub>1</sub>) = 35.83%</strong></p><p><img src="https://image.wanyijizi.com/20211124/eee4a20eb5cd7e80baebaec317c22830.png" alt="eee4a20eb5cd7e80baebaec317c22830.png" loading="lazy"></p><h4 id="24核计算"><a href="#24核计算" class="headerlink" title="24核计算"></a>24核计算</h4><p><strong>加速比V<sub>24</sub>/V<sub>1</sub> = 4.20，加速效率V<sub>24</sub>/(pV<sub>1</sub>) = 17.5%</strong></p><p><img src="https://image.wanyijizi.com/20211124/6b6897539e7a8802b2d39e92b54463ea.png" alt="6b6897539e7a8802b2d39e92b54463ea.png" loading="lazy"></p><h3 id="中国科技云·超算云（BSCC-A系统）"><a href="#中国科技云·超算云（BSCC-A系统）" class="headerlink" title="中国科技云·超算云（BSCC-A系统）"></a>中国科技云·超算云（BSCC-A系统）</h3><h4 id="配置-2"><a href="#配置-2" class="headerlink" title="配置"></a>配置</h4><p>AMD EPYC 7452 32-Core Processor，64核，256G内存，节点间采用 ib 网互连。（从<a href="https://www.amd.com/zh-hans/products/cpu/amd-epyc-7452">AMD官网</a>上找到这款处理器的基准时钟频率是2.35GHz）</p><h4 id="单核计算-2"><a href="#单核计算-2" class="headerlink" title="单核计算"></a>单核计算</h4><p><img src="https://image.wanyijizi.com/20211124/907688eb223e414a77fb93df5b6b1892.png" alt="907688eb223e414a77fb93df5b6b1892.png" loading="lazy"></p><h4 id="32核计算"><a href="#32核计算" class="headerlink" title="32核计算"></a>32核计算</h4><p><strong>加速比V<sub>32</sub>/V<sub>1</sub> = 5.40，加速效率V<sub>32</sub>/(pV<sub>1</sub>) = 16.87%</strong></p><p><img src="https://image.wanyijizi.com/20211124/b5da55deafdefc14c80d150eef6e6135.png" alt="b5da55deafdefc14c80d150eef6e6135.png" loading="lazy"></p><h4 id="64核计算"><a href="#64核计算" class="headerlink" title="64核计算"></a>64核计算</h4><p>通讯时间占比 17.85%，64核，还是可以的。</p><p><strong>加速比V<sub>64</sub>/V<sub>1</sub> = 7.85，加速效率V<sub>64</sub>/(pV<sub>1</sub>) = 12.27%</strong></p><p><img src="https://image.wanyijizi.com/20211124/87d5fb6bfd284bf436390fe947e5e99e.png" alt="87d5fb6bfd284bf436390fe947e5e99e.png" loading="lazy"></p><h2 id="网络上关于“Reaxff模拟速度讨论”"><a href="#网络上关于“Reaxff模拟速度讨论”" class="headerlink" title="网络上关于“Reaxff模拟速度讨论”"></a>网络上关于“Reaxff模拟速度讨论”</h2><h4 id="来源网址：http-bbs-keinsci-com-thread-19592-1-1-html"><a href="#来源网址：http-bbs-keinsci-com-thread-19592-1-1-html" class="headerlink" title="来源网址：http://bbs.keinsci.com/thread-19592-1-1.html"></a>来源网址：<a href="http://bbs.keinsci.com/thread-19592-1-1.html">http://bbs.keinsci.com/thread-19592-1-1.html</a></h4><blockquote><ol><li> 单精度fftw库的18Sep20版本LAMMPS，用Reaxff跑10万原子体系。机器是40核128G内存，RTX2080一块（Reaxff用GPU需要Kokkos包，这里只是纯CPU跑）。时间步长0.25 fs，40 MPI*1 Openmp，平均每小时才跑3700步左右。跑Reaxff的HNS例子，才0.193 ns/day（例子中4核的benchmark是0.04 ns/day，也够慢的）。Reaxff跑每一步都要用Qeq方法计算电荷，比一般分子力场慢不少，但也不至于如此慢。。。</li><li> 另外GPU版LAMMPS在pcff力场下跑17000原子，速度是8.1 ns/day。</li><li> 两颗8173M+192G内存，10370个原子的反应动力学，0.1fs每步，没有使用Kokkos加速包，只有CPU，共跑200ps。最后是0.072ns/day，333.705hours/ns，8.324 timestep/s</li></ol></blockquote><h4 id="来源网址：https-github-com-Roy-Kid-lammpscn-issues-13"><a href="#来源网址：https-github-com-Roy-Kid-lammpscn-issues-13" class="headerlink" title="来源网址：https://github.com/Roy-Kid/lammpscn/issues/13"></a>来源网址：<a href="https://github.com/Roy-Kid/lammpscn/issues/13">https://github.com/Roy-Kid/lammpscn/issues/13</a></h4><blockquote><p>虽然ReaxFF从一定意义上来说属于经验力场，但是计算成本还是相当高，比如我一个4500个原子的model，使用武汉大学超算16核，计算速度大概时0.137ns/day。然后还不支持lammps_GPU加速，只支持KOKKOS和OMP加速。这个KOKKOS我尝试了一下，1066的显卡的计算速度大概等于8核的CPU，但是还是比不过16核的CPU，如果显卡的计算能力更强的话可能计算速度还可以更快。</p></blockquote><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ol><li> ReaxFF 并行计算是比较慢</li><li> lammps 中 ReaxFF 想要加速只能通过 KOKKOS 和 OMP</li></ol><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ol><li> 没有化学反应参与，没有键的断开与生成，暂时可以改用别的势函数</li><li> 学习一下怎么对反应力场的计算进行加速，毕竟总用得到的，比如高速粒子怎么把壁面打穿之类的</li></ol><p><strong>未完待续……</strong></p>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LAMMPS </tag>
            
            <tag> 超算 </tag>
            
            <tag> Slurm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>超算上安装lammps的步骤</title>
      <link href="2021/11/22/%E8%B6%85%E7%AE%97%E4%B8%8A%E5%AE%89%E8%A3%85lammps%E7%9A%84%E6%AD%A5%E9%AA%A4/"/>
      <url>2021/11/22/%E8%B6%85%E7%AE%97%E4%B8%8A%E5%AE%89%E8%A3%85lammps%E7%9A%84%E6%AD%A5%E9%AA%A4/</url>
      
        <content type="html"><![CDATA[<p>仅针对<strong>中国科技云·超算云：BSCC-A 超算系统</strong>，网址为 <a href="https://scc.blsc.cn/">https://scc.blsc.cn/</a></p><p>本来超算上有预装一些开源软件，比如 lammps，可以用 module 工具加载。最近需要一个比较新版本的 lammps，在超算里用 <code>module avail</code> 命令找了找，只找到下面这一个：</p><pre class="language-shell" data-language="shell"><code class="language-shell">source /public3/soft/modules/module.shmodule load lammps/intel17/lammps-31Aug2021-public3</code></pre><p>可是进到这个里面，发现需要的 reaxff 和 molecule 都没有装：</p><pre class="language-shell" data-language="shell"><code class="language-shell">cd /public3/soft/lammps/intel17/lammps-31Aug2021cd src/make pi # lammps 查看已安装的 package 的命令</code></pre><p><img src="https://image.wanyijizi.com/20211122/bc54475dcabeda5fb67b19789394ecf4.png" alt="bc54475dcabeda5fb67b19789394ecf4.png" loading="lazy"></p><p>只好自己装一个了。</p><a id="more"></a><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><pre class="language-shell" data-language="shell"><code class="language-shell">source /public3/soft/modules/module.shmodule load mpi/intel/20.0.1-new-public3tar -zxvf lammps-stable2021.tar.gzcd lammps-stable2021/cd src/make yes-basicmake mpi -j 4</code></pre><p>友情链接：如果是在自己的电脑 linux 系统安装 lammps，可以看<a href="https://wanyijizi.com/2020/04/06/%E5%9C%A8Deepin%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85LAMMPS%E7%9A%84%E8%AE%B0%E5%BD%95/">另一篇文</a>。</p><h2 id="作业脚本-sub-sh"><a href="#作业脚本-sub-sh" class="headerlink" title="作业脚本 sub.sh"></a>作业脚本 sub.sh</h2><pre class="language-shell" data-language="shell"><code class="language-shell">#!/bin/bash#SBATCH -p amd_256#SBATCH -N 1source /public3/soft/modules/module.shmodule load mpi/intel/20.0.1-new-public3export PATH=/public3/home/sc54074/peachrl/lammps-stable2021/src:$PATHsrun -n 64 lmp_mpi -in in.file</code></pre><h2 id="提交作业"><a href="#提交作业" class="headerlink" title="提交作业"></a>提交作业</h2><pre class="language-shell" data-language="shell"><code class="language-shell">sbatch sub.sh</code></pre><p>其中 sub.sh 是你为作业脚本取的名字。</p><h2 id="查看作业"><a href="#查看作业" class="headerlink" title="查看作业"></a>查看作业</h2><h3 id="查看当前帐号的作业运行状态"><a href="#查看当前帐号的作业运行状态" class="headerlink" title="查看当前帐号的作业运行状态"></a>查看当前帐号的作业运行状态</h3><pre class="language-shell" data-language="shell"><code class="language-shell">squeue</code></pre><p>示例：</p><p><img src="https://image.wanyijizi.com/20211122/51cb1a4d494511ce3163b91bfb55ba31.png" alt="51cb1a4d494511ce3163b91bfb55ba31.png" loading="lazy"></p><h3 id="查看更详细的作业信息（包括历史作业）"><a href="#查看更详细的作业信息（包括历史作业）" class="headerlink" title="查看更详细的作业信息（包括历史作业）"></a>查看更详细的作业信息（包括历史作业）</h3><pre class="language-shell" data-language="shell"><code class="language-shell">sacct -u sc12345 -S 2021-11-22 -E now --field=jobid,jobname,nnodes,start,end,elapsed,state</code></pre><p>表示查询帐号 sc12345 在2021年11月22日至今所有作业，包括完成或未完成的，需要显示的信息有作业号、作业名、节点数、开始时间、结束时间、持续时长、当前状态。如下图：</p><p><img src="https://image.wanyijizi.com/20211122/b23378c52682850c52e6034c8371fab2.png" alt="b23378c52682850c52e6034c8371fab2.png" loading="lazy"></p><h3 id="取消作业"><a href="#取消作业" class="headerlink" title="取消作业"></a>取消作业</h3><pre class="language-shell" data-language="shell"><code class="language-shell">scancel 3631557</code></pre><p>其中 3631557 指的作业号 JOBID。</p><h3 id="查看某帐号的储存情况"><a href="#查看某帐号的储存情况" class="headerlink" title="查看某帐号的储存情况"></a>查看某帐号的储存情况</h3><pre class="language-shell" data-language="shell"><code class="language-shell">lfs quota -uh sc12345 ~</code></pre><p>示例：</p><p><img src="https://image.wanyijizi.com/20211122/6bca7978504b6e646464d3a837c66311.png" alt="6bca7978504b6e646464d3a837c66311.png" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LAMMPS </tag>
            
            <tag> 超算 </tag>
            
            <tag> Slurm </tag>
            
        </tags>
      
    </entry>
    
    
    
    
    
    <entry>
      <title>在Python中调用Julia函数</title>
      <link href="2021/10/10/%E5%9C%A8Python%E4%B8%AD%E8%B0%83%E7%94%A8Julia%E5%87%BD%E6%95%B0/"/>
      <url>2021/10/10/%E5%9C%A8Python%E4%B8%AD%E8%B0%83%E7%94%A8Julia%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<div class="success"><blockquote><p>运行环境：Win11 or Deepin 20.2.3，Python 3.8.5，Julia 1.5.3</p></blockquote></div><p>没用过Julia语言的话..简介及安装步骤见<a href="https://wanyijizi.com/2020/07/21/Julia%E5%9C%A8win10%E7%8E%AF%E5%A2%83%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E8%A7%A3%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E7%9A%84%E4%BE%8B%E5%AD%90/">另一篇文</a>。</p><a id="more"></a><p>话说，博主桃超级开心在10月5日顺利装备上了Win11，虽然除了界面变得像果冻了一些，并没有感觉到很大差别🤣。</p><p>总之今天是第一篇建立在Win11环境上的博文啦~以后应该再不会有运行环境为Win10的文出现了😁</p><p>今日份的文起源是无聊(×)的我在找一个复杂又无聊的函数的极小值点的时候突发奇想要用Julia语言写，确实也写出来了：</p><pre class="language-Julia" data-language="Julia"><code class="language-Julia">using Optimusing Printfusing Plotsusing IntervalArithmetic, TaylorModelsa = 5b = 5n = 5function U(h)    u = zeros(Float64,n)    for i = -a:a        for j = -b:b            for k = 0:n-1                u[k+1] += 4 * 0.128736 * (3^12 * (2.773^2 * (i^2 + j^2 + i*j) + (h + k*2.26)^2)^(-6) - 3^6 * (2.773^2 * (i^2 + j^2 + i*j) + (h + k*2.26)^2)^(-3))            end        end    end    return sum(u)endres = optimize(U, 0.0, 12.5)Printf.@printf "极小值点 %.2f\n" Optim.minimizer(res)Printf.@printf "极小值 %.2f\n" Optim.minimum(res)############## 画图 ##############=h = range(0.0,stop=12.5,step=0.001)PES = Plots.plot(h,U.(h),xlims=(0,12.5),ylims=(-2,10),size=(1000,600),lw=5,lab="Potential-energy-curve at S-site",dpi=300,axis = font(20),legendfont=(20))y = 0Plots.hline!([0],ls=:dash,lw=3,lab="")Plots.scatter!([Optim.minimizer(res)], [U(Optim.minimizer(res))], lab="",ms=10)Plots.savefig(PES, "PES.png")=#</code></pre><p>就是上面这个U(h)，但是我其他处理数据的代码都是Python写的。现在想要调用U了，我还得在Python里面再输入一遍。。这怎么能行？重复劳动没前途，于是继续又开发了一下在Python中调用Julia函数的技能。</p><p>步骤很简单（所以我前面水了一堆废话）：</p><ol><li>命令行<code>pip3 install julia</code></li><li>Julia REPL，先输入<code>]</code>，进入pkg&gt;模式，输入<code>add PyCall</code></li><li>Python REPL&gt;&gt;&gt;<code>julia.install()</code></li></ol><p>然后Julia和Python就成功在一起啦！</p><p>在Python脚本调用test.jl文件中U(h)函数的方法：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> julia <span class="token keyword">import</span> MainMain<span class="token punctuation">.</span>include<span class="token punctuation">(</span><span class="token string">"test.jl"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>Main<span class="token punctuation">.</span>U<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>如果要在Deepin系统（或者其他Debian系统上，以及在Windows系统里用conda安装的Python）实现Python调用Julia的话，前面的操作是类似的，但可能最后会报错，说“Your Python interpreter is statically linked to libpython”。可以选择简单的，在Python前面加上两行，也就是：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> julia<span class="token punctuation">.</span>api <span class="token keyword">import</span> Juliajl <span class="token operator">=</span> Julia<span class="token punctuation">(</span>compiled_modules<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">from</span> julia <span class="token keyword">import</span> MainMain<span class="token punctuation">.</span>include<span class="token punctuation">(</span><span class="token string">"test.jl"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>Main<span class="token punctuation">.</span>U<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>这样会使程序变慢，更彻底的选择是自己重装Python，详细可以参考<a href="https://pyjulia.readthedocs.io/en/latest/troubleshooting.html">官方手册上的说明</a>。</p>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Python </tag>
            
            <tag> Windows </tag>
            
            <tag> Julia </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github+Webhook+Nginx实现网站自动化部署</title>
      <link href="2021/09/22/Github+Webhook+Nginx%E5%AE%9E%E7%8E%B0%E7%BD%91%E7%AB%99%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/"/>
      <url>2021/09/22/Github+Webhook+Nginx%E5%AE%9E%E7%8E%B0%E7%BD%91%E7%AB%99%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<p>桃子的小站已经从Github Pages服务转移到了腾讯的云服务器上。这样就有了两个新问题：一是，再像以往直接用<code>hexo d -g</code>，能够将生成的静态网页推送到github上，但并不能直接放到云服务器上；二，云服务器上的静态网页怎么能够通过域名访问到？本文就来解决这两个问题。</p><a id="more"></a><h2 id="【问题二】nginx部署静态网页"><a href="#【问题二】nginx部署静态网页" class="headerlink" title="【问题二】nginx部署静态网页"></a>【问题二】nginx部署静态网页</h2><p>先回答问题二。</p><div class="success"><blockquote><p><strong>Nginx (engine x)</strong> 是一款轻量级的 Web 服务器 、反向代理服务器及电子邮件（IMAP/POP3）代理服务器。</p></blockquote></div><p>简单安装：<code>sudo apt-get install nginx</code></p><p>查看版本（查看是否装好了）：<code>nginx -v</code></p><p>nginx的配置文件在目录/etc/nginx/nginx.conf，但是我们尽量不修改这个。</p><blockquote><ul><li>nginx.conf </li></ul><p>​    这个是 nginx 的主配置文件，里面包含了当前目录的所有配置文件，只不过有的是注释状态，需要的时候自行开启 (后面几个常用的) </p><ul><li>conf.d</li></ul><p>​    这是一个目录,里面可以写我们自己自定义的配置文件，文件结尾一<br>定是 .conf 才可以生效 (当然也可以通过修改 nginx.conf 来取消这个限制) </p><ul><li>sites-enabled</li></ul><p>​    这里面的配置文件其实就是 sites-available 里面的配置文件的软连接，但是由于 nginx.conf 默认包含的是这个文件夹，所以我们在<br>sites-available 里面建立了新的站点之后，还要建立个软连接到 sites-enabled 里面才行</p><ul><li>sites-available</li></ul><p>​    这里是我们的虚拟主机的目录，我们在在这里面可以创建多个虚拟主机</p></blockquote><p>我们可以在/etc/ngix/sites-available文件夹里建立一个新的配置文件web，并建立个软连接使新站点生效：</p><pre class="language-shell" data-language="shell"><code class="language-shell">ln -s /etc/ngix/sites-available/web /etc/nginx/sites-enabled/web</code></pre><p>nginx的配置和修改都放在这个web里，具体语法参考nginx.conf里面的<code>http</code>大括号里面的<code>server</code>字段：</p><pre class="language-nginx" data-language="nginx"><code class="language-nginx"><span class="token keyword">server</span> <span class="token punctuation">{</span>        <span class="token keyword">listen</span> <span class="token number">80</span><span class="token punctuation">;</span> <span class="token comment">#http</span><span class="token keyword">server_name</span> test<span class="token punctuation">.</span>com<span class="token punctuation">;</span>    <span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">{</span>                <span class="token keyword">index</span> <span class="token keyword">index</span><span class="token punctuation">.</span>html<span class="token punctuation">;</span>                <span class="token keyword">root</span> <span class="token operator">/</span>home<span class="token operator">/</span>lighthouse<span class="token operator">/</span>test<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>如果要支持https的话则还需要配置ssl证书，证书在哪里申请的就在哪里下载。比如我的证书都是在腾讯申请的：</p><p><img src="https://image.wanyijizi.com/20210922/image-20211119172656888.png" alt="image-20211119172656888" loading="lazy"></p><p>把证书下载并放在服务器上，这时web应该配置为：</p><pre class="language-nginx" data-language="nginx"><code class="language-nginx"><span class="token keyword">server</span> <span class="token punctuation">{</span><span class="token keyword">listen</span> <span class="token number">443</span> <span class="token keyword">ssl</span><span class="token punctuation">;</span>  <span class="token comment">#https</span><span class="token keyword">server_name</span> test<span class="token punctuation">.</span>com<span class="token punctuation">;</span> <span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">{</span><span class="token keyword">index</span> <span class="token keyword">index</span><span class="token punctuation">.</span>html<span class="token punctuation">;</span><span class="token keyword">root</span> <span class="token operator">/</span>home<span class="token operator">/</span>lighthouse<span class="token operator">/</span>test<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">ssl_certificate</span> <span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span>certs<span class="token operator">/</span><span class="token number">1</span>_test<span class="token punctuation">.</span>com_bundle<span class="token punctuation">.</span>crt<span class="token punctuation">;</span><span class="token keyword">ssl_certificate_key</span> <span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span>certs<span class="token operator">/</span><span class="token number">2</span>_test<span class="token punctuation">.</span>com<span class="token punctuation">.</span>key<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="【问题一】webhook自动同步github仓库的静态资源"><a href="#【问题一】webhook自动同步github仓库的静态资源" class="headerlink" title="【问题一】webhook自动同步github仓库的静态资源"></a>【问题一】webhook自动同步github仓库的静态资源</h2><h3 id="通过nodejs和nginx创建webhook服务后端"><a href="#通过nodejs和nginx创建webhook服务后端" class="headerlink" title="通过nodejs和nginx创建webhook服务后端"></a>通过nodejs和nginx创建webhook服务后端</h3><p>安装必需的组件：</p><pre class="language-shell" data-language="shell"><code class="language-shell">sudo apt install nodejsnode --versionsudo apt install npmnpm --versionnpm i -S github-webhook-handlernpm i -g pm2</code></pre><p>后端代码保存在webhook.js文件中：</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token keyword">var</span> createHandler <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'github-webhook-handler'</span><span class="token punctuation">)</span><span class="token keyword">var</span> handler <span class="token operator">=</span> <span class="token function">createHandler</span><span class="token punctuation">(</span><span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">'/webhook'</span><span class="token punctuation">,</span> secret<span class="token operator">:</span> <span class="token string">'（设个密码）'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">function</span> <span class="token function">run_cmd</span><span class="token punctuation">(</span><span class="token parameter">cmd<span class="token punctuation">,</span> args<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> spawn <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>spawn<span class="token punctuation">;</span>  <span class="token keyword">var</span> child <span class="token operator">=</span> <span class="token function">spawn</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> resp <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>     child<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">buffer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> resp <span class="token operator">+=</span> buffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  child<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">callback</span> <span class="token punctuation">(</span>resp<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token function">handler</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       res<span class="token punctuation">.</span>statusCode <span class="token operator">=</span> <span class="token number">404</span>       res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'no such location'</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">1234</span><span class="token punctuation">)</span>handler<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'Error:'</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>handler<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'push'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> name<span class="token operator">=</span>event<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>repository<span class="token punctuation">.</span>name<span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Received a push event for %s to %s'</span><span class="token punctuation">,</span>    event<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>repository<span class="token punctuation">.</span>name<span class="token punctuation">,</span>    event<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>ref<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>ref <span class="token operator">===</span> <span class="token string">'refs/heads/main'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">run_cmd</span><span class="token punctuation">(</span><span class="token string">'sh'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'./auto_build.sh'</span><span class="token punctuation">,</span>name<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span><span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>handler<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'issues'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Received an issue event for % action=%s: #%d %s'</span><span class="token punctuation">,</span>    event<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>repository<span class="token punctuation">.</span>name<span class="token punctuation">,</span>    event<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>action<span class="token punctuation">,</span>    event<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>issue<span class="token punctuation">.</span>number<span class="token punctuation">,</span>    event<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>issue<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>这段代码的意思是，监听服务器本地的1234端口，每当收到来自github推送来的数据，符合 <code>"ref": "refs/heads/main"</code> 的push事件，就运行auto_build.sh脚本。</p><p>这里auto_build.sh是git拉取仓库文件到对应文件夹的命令：</p><pre class="language-shell" data-language="shell"><code class="language-shell">#!/bin/bashWEB_PATH='/home/lighthouse/test'WEB_USER='lighthouse'WEB_USERGROUP='lighthouse'echo "Start deployment"cd $WEB_PATHecho "pulling source code..."git reset --hard origin/maingit clean -fgit pullgit checkout mainecho "changing permissions..."sudo chown -R $WEB_USER:$WEB_USERGROUP $WEB_PATHecho "Finished."</code></pre><p>在auto_build.sh起作用前要先建立/home/lighthouse/test文件夹，在这个test文件夹进行首次克隆<code>git clone git@github.com:peachrl/peachrl.github.io.git .</code>。</p><p>现在，各文件都准备好了，还需要让webhook.js文件在后台保持运行和监听端口：</p><pre class="language-shell" data-language="shell"><code class="language-shell">pm2 start webhook.js</code></pre><p>webhook.js监听的是来自 <a href="http://127.0.0.1:1234/webhook">http://127.0.0.1:1234/webhook</a> 的数据，还需要设置一下nginx，让nginx把从 <a href="http://test.com:1234/webhook">http://test.com:1234/webhook</a> 收到的数据反向代理到服务器本地的1234端口。更改web配置文件：</p><pre class="language-nginx" data-language="nginx"><code class="language-nginx"><span class="token keyword">server</span> <span class="token punctuation">{</span>        <span class="token keyword">listen</span> <span class="token number">80</span><span class="token punctuation">;</span><span class="token keyword">server_name</span> test<span class="token punctuation">.</span>com<span class="token punctuation">;</span><span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">{</span>                <span class="token keyword">index</span> <span class="token keyword">index</span><span class="token punctuation">.</span>html<span class="token punctuation">;</span>                <span class="token keyword">root</span> <span class="token operator">/</span>home<span class="token operator">/</span>lighthouse<span class="token operator">/</span>test<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">location</span> <span class="token operator">/</span>webhook <span class="token punctuation">{</span>                <span class="token keyword">proxy_pass</span> <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">:</span><span class="token number">1234</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="在github配置webhook"><a href="#在github配置webhook" class="headerlink" title="在github配置webhook"></a>在github配置webhook</h3><p><img src="https://image.wanyijizi.com/20210922/image-20211119180436277.png" alt="image-20211119180436277" loading="lazy"></p><p>其中 Payload URL 写 <a href="http://test.com:1234/webhook">http://test.com:1234/webhook</a> ，”test.com”最好写自己服务器的公网IP。</p><p>Secret是在webhook.js里 <code>var handler = createHandler({ path: '/webhook', secret: '（设个密码）' }) </code> 所设的密码。</p><p><img src="https://image.wanyijizi.com/20210922/image-20211119180914352.png" alt="image-20211119180914352" loading="lazy"></p><p>其他选项看图，看着办就行。</p><p>最后启动（重启）nginx：</p><pre class="language-shell" data-language="shell"><code class="language-shell">sudo nginx # 或者 sudo systemctl start nginx 启动sudo nginx -t #查看是否配置成功sudo nginx -s reload #重启nginx</code></pre><hr><p>本文部分内容来自：</p><p>[1] <a href="https://www.jianshu.com/p/fd25a9c008a0">https://www.jianshu.com/p/fd25a9c008a0</a> </p><p>[2] <a href="https://jimmysong.io/blog/github-webhook-website-auto-deploy/">https://jimmysong.io/blog/github-webhook-website-auto-deploy/</a></p>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Nginx </tag>
            
            <tag> Webhook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mendeley在Deepin系统的安装及解决无法输入中文的问题</title>
      <link href="2021/09/16/Mendeley%E5%9C%A8Deepin%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%97%A0%E6%B3%95%E8%BE%93%E5%85%A5%E4%B8%AD%E6%96%87%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>2021/09/16/Mendeley%E5%9C%A8Deepin%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%97%A0%E6%B3%95%E8%BE%93%E5%85%A5%E4%B8%AD%E6%96%87%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>Mendeley在Linux系统无法输入中文注释的问题一直没有在官方的安装包中得到解决，但有网友提供的完美解决方法，在此记录。</p><div class="success"><blockquote><p>系统：Deepin 20.2.3</p></blockquote></div><a id="more"></a><h2 id="Mendeley-Desktop-安装"><a href="#Mendeley-Desktop-安装" class="headerlink" title="Mendeley Desktop 安装"></a>Mendeley Desktop 安装</h2><p>安装包从<a href="https://www.mendeley.com/download-desktop-new/">官网</a>下载，我下载的是<code>Download for generic Linux</code>。（不过Deepin系统内核是Debian，所以也许另一个也行？）</p><p>按照官方的<a href="https://www.mendeley.com/guides/download-mendeley-desktop/linux/instructions">安装教程</a>，下载解压进入bin就可以直接运行了。</p><p>如果需要在启动器中见到Mendeley，可以进入bin，如图运行shell脚本：</p><p><img src="https://image.wanyijizi.com/20210916/%E6%88%AA%E5%9B%BE_deepin-terminal_20210916153543.png" alt="截图_deepin-terminal_20210916153543" loading="lazy"></p><p>这样就可以在启动器中看到Mendeley的存在了：</p><img src="https://image.wanyijizi.com/20210916/截图_选择区域_20210916153641.png" alt="截图_选择区域_20210916153641" style="zoom:67%;" loading="lazy"><h2 id="解决中文输入问题"><a href="#解决中文输入问题" class="headerlink" title="解决中文输入问题"></a>解决中文输入问题</h2><p>下载由 yinflying 大佬提供的 libfcitxplatforminputcontextplugin.so 文件（从<a href="https://github.com/yinflying/BlogSource/tree/master/lib-fcitx-plugin/debian.sid.20171223">github下载</a>or从<a href="https://www.aliyundrive.com/s/fjPTN5MSCYk">阿里云盘下载</a>），放到<code>/data/home/peachrl/mendeley/lib/mendeleydesktop/plugins/platforminputcontexts</code>目录下即可。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>[1]<a href="https://www.jianshu.com/p/1dac2892613b">https://www.jianshu.com/p/1dac2892613b</a></p><p>[2]<a href="https://github.com/yinflying/BlogSource/tree/master/lib-fcitx-plugin/debian.sid.20171223">https://github.com/yinflying/BlogSource/tree/master/lib-fcitx-plugin/debian.sid.20171223</a></p>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Mendeley </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Deepin系统连接打印机</title>
      <link href="2021/09/15/Deepin%E7%B3%BB%E7%BB%9F%E8%BF%9E%E6%8E%A5%E6%89%93%E5%8D%B0%E6%9C%BA/"/>
      <url>2021/09/15/Deepin%E7%B3%BB%E7%BB%9F%E8%BF%9E%E6%8E%A5%E6%89%93%E5%8D%B0%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<div class="success"><blockquote><p>系统：Deepin 20.2.3</p></blockquote></div><p>最近将实验室的电脑重装了系统，系统版本是Deepin 20.2.3，于是又需要重新安装各种软件以及连接打印机等。由于实验室的打印机位于实验室内部网络中，且更改了默认端口，因此无法直接搜索到，需要手动安装。本文记录了在Deepin系统连接实验室内网打印机的过程。</p><a id="more"></a><div class="success"><blockquote><p>（以下信息仅为示例，都是随便写的）</p><p>打印机网络地址：ab.lab.cn</p><p>端口：12345</p><p>型号：HP LaserJet MFP M30w</p></blockquote></div><ol><li><p>打开Deepin系统默认的打印管理器（在启动器（相当于Win中的开始菜单）中搜索即可找到），如下图所示，点击打印机设备后面的<code>+</code>开始配置；</p><p><img src="https://image.wanyijizi.com/20210915/image-20210916102311846.png" alt="image-20210916102311846" loading="lazy"></p></li><li><p>软件首先会进行自动查找，这个过程自动开始并很快完成，但显示的一些网络上的打印机都不是我们的，如图所示：</p><p><img src="https://image.wanyijizi.com/20210915/image-20210916102426299.png" alt="image-20210916102426299" loading="lazy"></p></li><li><p>点击进入<code>URI查找</code>，输入<code>socket://ab.lab.cn:12345</code>，如图所示，点击下一步；</p><p><img src="https://image.wanyijizi.com/20210915/image-20210916102508312.png" alt="image-20210916102508312" loading="lazy"></p></li><li><p>接下来选择驱动来源，直接进入左边第三项<code>搜索打印机驱动</code>，输入型号<code>HP LaserJet MFP M30w</code>，点击<code>搜索</code>，选择搜索到的驱动中HP LaserJet MFP M28-M31那个，如图所示，点击安装驱动；</p><p><img src="https://image.wanyijizi.com/20210915/image-20210916102533030.png" alt="image-20210916102533030" loading="lazy"></p></li><li><p>已经成功了，可以查看打印机</p><p><img src="https://image.wanyijizi.com/20210915/image-20210916102600614.png" alt="image-20210916102600614" loading="lazy"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VOSviewer的安装与使用——文本聚类分析与可视化</title>
      <link href="2021/08/21/VOSviewer%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
      <url>2021/08/21/VOSviewer%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<div class="success"><blockquote><p>VOSviewer is a software tool for constructing and visualizing bibliometric networks.</p></blockquote></div><p>这一篇文主要聊VOSviewer的安装与使用。当然，VOSviewer并不是唯一可以实现文本的聚类分析与可视化以梳理文献的软件，还有比如Histcite、CiteSpace等也可以，这就不在本文要讲的范围内了。</p><a id="more"></a><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><ol><li>VOSviewer需要在Java环境下运行，因此首先安装<a href="https://www.java.com/zh-CN/download/">Java</a></li></ol><p><img src="https://image.wanyijizi.com/20210821/image-20210821132245760.png" alt="image-20210821132245760" loading="lazy"></p><ol start="2"><li>下载<a href="https://www.vosviewer.com/download">VOSviewer</a>，各系统均有对应安装包，下载解压后如下图所示</li></ol><p><img src="https://image.wanyijizi.com/20210821/image-20210821133056987.png" alt="image-20210821133056987" loading="lazy"></p><p>双击VOSviewer即可运行程序。</p><h2 id="基于Web-of-Science数据的使用"><a href="#基于Web-of-Science数据的使用" class="headerlink" title="基于Web of Science数据的使用"></a>基于Web of Science数据的使用</h2><div class="info"><blockquote><p>需要在校园网内网或者从外部通过校园网访问Web of Science的条件下使用。</p></blockquote></div><ol><li>进入Web of Science网站，按需检索想要知道的信息（选择不同数据库可以检索到的信息会不同，比如有的库就无法检索<code>所有字段</code>，只能检索<code>主题</code>、<code>关键词</code>之类的）：</li></ol><p><img src="https://image.wanyijizi.com/20210821/image-20210821140554500.png" alt="image-20210821140554500" loading="lazy"></p><ol start="2"><li>导出制表符分隔文件（RIS、Excel（csv）等格式也可以，具体详情可查看VOSviewer的手册，下载的文件中那个pdf就是）</li></ol><p><img src="https://image.wanyijizi.com/20210821/image-20210821140804291.png" alt="image-20210821140804291" loading="lazy"></p><ol start="3"><li>记录内容也是按需选择，最后会导出一个叫savedrecs.txt的文件</li></ol><p><img src="https://image.wanyijizi.com/20210821/image-20210821140912864.png" alt="image-20210821140912864" loading="lazy"></p><ol start="4"><li>打开VOSviewer软件，点击左侧create，基于文献信息的分析内容，选based on bibliographic data：</li></ol><p><img src="https://image.wanyijizi.com/20210821/image-20210821142306327.png" alt="image-20210821142306327" loading="lazy"></p><p>VOSviewer支持的文件格式里就有Web of Science：</p><p><img src="https://image.wanyijizi.com/20210821/image-20210821142429971.png" alt="image-20210821142429971" loading="lazy"></p><p>选择导入刚刚的制表符分隔文件（如果从Web of Science下载了多个saverecs文件，可以都选上导入多个文件）：</p><p><img src="https://image.wanyijizi.com/20210821/image-20210821142446634.png" alt="image-20210821142446634" loading="lazy"></p><p>比如做一个关键词的分析，可以选择Co-occurrence：</p><p><img src="https://image.wanyijizi.com/20210821/image-20210821144129745.png" alt="image-20210821144129745" loading="lazy"></p><p>设定至少出现2次才认为是需要分析的关键词：</p><p><img src="https://image.wanyijizi.com/20210821/image-20210821144243909.png" alt="image-20210821144243909" loading="lazy"></p><p>显示其中与其他词汇关联最多的20个：</p><p><img src="https://image.wanyijizi.com/20210821/image-20210821144355745.png" alt="image-20210821144355745" loading="lazy"></p><p>可以再手动筛选以下想要分析的词汇：</p><p><img src="https://image.wanyijizi.com/20210821/image-20210821144645643.png" alt="image-20210821144645643" loading="lazy"></p><p>得到聚类图谱：</p><p><img src="https://image.wanyijizi.com/20210821/image-20210821144844506.png" alt="image-20210821144844506" loading="lazy"></p><p>可选的图谱有Network Visualization、Overlay Visualization、Density Visualization三种，Density Visualization又分为Item desity和Cluster density两种，三种图谱的各种参数可以在右侧设置。如上图的Network Visualization圆的大小代表关键词权重，两个圆之间的距离越短表示关键词关联性越强。圆的颜色代表了各自的聚类。</p><p>回到第4步，如果要基于论文title、abstract等文本信息的词共现分析，就选择based on text data，前面的设置大同小异，counting method指同一篇文献多次出现的词语是算一遍还是算多遍。</p><p><img src="https://image.wanyijizi.com/20210821/image-20210821150312936.png" alt="image-20210821150312936" loading="lazy"></p><p>其他设置也大同小异，最后得到：</p><p><img src="https://image.wanyijizi.com/20210821/image-20210821150750334.png" alt="image-20210821150750334" loading="lazy"></p><h2 id="基于Semantic-ScholarCrossref数据的使用"><a href="#基于Semantic-ScholarCrossref数据的使用" class="headerlink" title="基于Semantic ScholarCrossref数据的使用"></a>基于<del>Semantic Scholar</del>Crossref数据的使用</h2><h3 id="Semantic-Scholar的报错"><a href="#Semantic-Scholar的报错" class="headerlink" title="Semantic Scholar的报错"></a>Semantic Scholar的报错</h3><p>Semantic Scholar的数据需要通过API的调用导出JSON格式的文件。比如关键词near space hypersonic cruise vehicles的搜索，在Semantic Scholar网站有549条信息，将其中101-200条导出JSON文件，在浏览器地址栏输入：</p><pre class="language-none"><code class="language-none">https://api.semanticscholar.org/graph/v1/paper/search?query=near+space+hypersonic+cruise+vehicles&amp;offset=100&amp;limit=100&amp;fields=externalIds,title,abstract,authors</code></pre><p>理论上，保存下来即可得到JSON格式的文本文件。然而，放到VOSviewer里报错了：</p><p><img src="https://image.wanyijizi.com/20210821/image-20210821200028383.png" alt="image-20210821200028383" loading="lazy"></p><p>暂时没有搞清楚为什么，所以尝试另辟蹊径。除了JSON文件，VOSviewer也可以读取DOI，因此稍稍处理以下我们下载下来的JSON文件，提取出里面的DOI并导入：</p><p><img src="https://image.wanyijizi.com/20210821/image-20210821212027644.png" alt="image-20210821212027644" loading="lazy"></p><p>华丽地再一次报错了。</p><p>博主桃感觉自己找不出什么原因，网上也没有什么相关信息，想要解决大概得给开发者写邮件问问了。</p><h3 id="换Crossref"><a href="#换Crossref" class="headerlink" title="换Crossref"></a>换Crossref</h3><p>大同小异，需要用API，而且每次能够导出的条数是有限制的，不过，随便写个循环就可以解决了。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> urlopen<span class="token punctuation">,</span>Request<span class="token keyword">import</span> json<span class="token comment">#从url获得json文件</span><span class="token keyword">def</span> <span class="token function">getAndSaveJSON</span><span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#</span>    fullurl <span class="token operator">=</span> <span class="token string">"https://api.crossref.org/works?query=near+space+hypersonic+cruise+vehicles&amp;sort=relevance&amp;filter=from-pub-date:2012-01-01,type:journal-article&amp;rows=1000&amp;offset="</span><span class="token operator">+</span>offset    <span class="token comment">#</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36'</span><span class="token punctuation">}</span>    req<span class="token operator">=</span>Request<span class="token punctuation">(</span>fullurl<span class="token punctuation">,</span>headers<span class="token operator">=</span>header<span class="token punctuation">)</span>    rawtext<span class="token operator">=</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    jsonStr <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>rawtext<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>jsonStr<span class="token punctuation">,</span> <span class="token builtin">open</span><span class="token punctuation">(</span>offset<span class="token operator">+</span><span class="token string">'.json'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> offset<span class="token operator">+</span><span class="token string">'.json'</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#每次获取的信息条数有限，因此写个循环</span>    getAndSaveJSON<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>以下是在Crossref网站搜索near space hypersonic cruise vehicles得到的期刊名分布：</p><iframe allowfullscreen="true" src="https://app.vosviewer.com/?json=https://raw.githubusercontent.com/peachrl/peachrl.github.io/master/data/near_space_source.json&amp;simple_ui=true" width="100%" height="75%" style="border: 1px solid #ddd; max-width: 1200px; min-height: 500px"> </iframe><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上Web of Science和Semantic Scholar只是两个例子，基于什么网站什么数据库其实不重要，只要能够得到VOSviewer可读的文件格式，都可以导入进行分析，比如Mendeley之类的文献管理系统，都可以导出RIS格式。</p><p>ʅ（´◔౪◔）ʃ <strong>重点是，你从图中得到了什么呢？</strong></p>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> VOSviewer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用Atomsk给lammps建立data文件</title>
      <link href="2021/08/18/%E7%94%A8Atomsk%E7%BB%99lammps%E5%BB%BA%E7%AB%8Bdata%E6%96%87%E4%BB%B6/"/>
      <url>2021/08/18/%E7%94%A8Atomsk%E7%BB%99lammps%E5%BB%BA%E7%AB%8Bdata%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>前面有一篇文<a href="https://peachrl.github.io/2021/06/18/%E7%94%A8MaterialStudio%E5%92%8COvito%E7%BB%99lammps%E5%BB%BA%E7%AB%8Bdata%E6%96%87%E4%BB%B6/">用MaterialStudio和Ovito给lammps建立data文件</a>，但是博主桃非常穷，Material Studio软件只用得起盗版，因此这一篇文给出了另一种建模方法，用开源软件Atomsk给lammps建立data文件。</p><a id="more"></a><h3 id="Atomsk软件的安装"><a href="#Atomsk软件的安装" class="headerlink" title="Atomsk软件的安装"></a>Atomsk软件的安装</h3><p>系统：Deepin 20.2.2</p><ol><li>下载<a href="https://atomsk.univ-lille.fr/dl.php">安装包</a></li><li>解压并进入文件夹</li><li><code>sudo bash install.sh</code></li></ol><h3 id="Atomsk的使用"><a href="#Atomsk的使用" class="headerlink" title="Atomsk的使用"></a>Atomsk的使用</h3><p>Atomsk软件没有图形界面，所有操作在命令行进行。命令基本是<code>atomsk+输入文件/mode命令+options命令+输出文件名</code>的格式。例如生成粒子数5600共7层的石墨壁面：</p><pre class="language-shell" data-language="shell"><code class="language-shell">atomsk --create graphite 2.464 6.711 C -orthogonal-cell -duplicate 20 10 4 -cut above 0.75*BOX z big-graphite.lmp</code></pre><p>其中</p><ul><li><code>--create graphite 2.464 6.711 C</code>是我们使用的mode命令，表示以graphite晶体格式，a=2.464Å，b=6.711Å，原子种类为C原子，生成晶胞</li><li><code>-orthogonal-cell</code>是option命令，表示将晶胞修改为正交的</li><li><code>-duplicate 20 10 4</code>是option命令，表示将晶胞沿x、y、z方向复制20×10×4倍</li><li><code>-cut above 0.75*BOX z</code>是option命令，表示将前面生成的模型切除z的正方向最上面占比0.25的部分</li><li><code>big-graphite.lmp</code>最后输出文件名big-graphite，格式为.lmp（也就是lammps的data文件格式）</li></ul><p>在终端中显示：</p><p><img src="https://image.wanyijizi.com/20210818/image-20210819104759688.png" alt="image-20210819104759688" loading="lazy"></p><p>查看生成的文件：</p><p><img src="https://image.wanyijizi.com/20210818/image-20210819110036133.png" alt="image-20210819110036133" loading="lazy"></p><p>在ovito中查看：</p><p><img src="https://image.wanyijizi.com/20210818/image-20210819104923195.png" alt="image-20210819104923195" loading="lazy"></p><p>非常容易。</p>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> LAMMPS </tag>
            
            <tag> Atomsk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LAMMPS自带的Python工具试用记录</title>
      <link href="2021/08/13/LAMMPS%E8%87%AA%E5%B8%A6%E7%9A%84Python%E5%B7%A5%E5%85%B7%E8%AF%95%E7%94%A8%E8%AE%B0%E5%BD%95/"/>
      <url>2021/08/13/LAMMPS%E8%87%AA%E5%B8%A6%E7%9A%84Python%E5%B7%A5%E5%85%B7%E8%AF%95%E7%94%A8%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<div class="success"><blockquote><p>运行环境：deepin 20.2.2；python 3.7；lammps 30Jul2021</p></blockquote></div><p>lammps安装包自带的python工具也在/home/peachrl/lammps/tools/python目录内，有：</p><ul><li>log2txt.py    convert thermo info in a LAMMPS log file to columns of numbers</li><li>logplot.py    plot 2 columns of thermo info from a LAMMPS log file</li><li>dumpsort.py    sort the snapshots of atoms in a LAMMPS dump file by atom ID</li><li>dump2cfg.py    convert a native LAMMPS dump file to CFG format</li><li>dump2xyz.py    convert a native LAMMPS dump file to XYZ format</li><li>dump2pdb.py    convert a native LAMMPS dump file to PDB format</li><li>neb_combine.py    combine multiple NEB dump files into one time series</li><li>neb_final.py    combine multiple NEB final states into one sequence of states</li></ul><p>不论是直接取用还是学习python进行后处理，都是非常不错的材料。</p><a id="more"></a><h3 id="两种方式获得Pizza-py"><a href="#两种方式获得Pizza-py" class="headerlink" title="两种方式获得Pizza.py"></a>两种方式获得Pizza.py</h3><h4 id="方式一：下载Pizza-py的安装包"><a href="#方式一：下载Pizza-py的安装包" class="headerlink" title="方式一：下载Pizza.py的安装包"></a>方式一：<a href="https://cs.sandia.gov/~sjplimp/download.html">下载Pizza.py的安装包</a></h4><p><img src="https://image.wanyijizi.com/20210813/image-20210813170748222.png" alt="image-20210813170748222" loading="lazy"></p><p>解压并放到/home/peachrl/pizza目录下，其中的src文件夹在/home/peachrl/.bashrc中设置环境变量：</p><pre class="language-shell" data-language="shell"><code class="language-shell">export LAMMPS_PYTHON_TOOLS="/home/peachrl/pizza/src"</code></pre><h4 id="方式二：lammps安装包内的pizza文件夹"><a href="#方式二：lammps安装包内的pizza文件夹" class="headerlink" title="方式二：lammps安装包内的pizza文件夹"></a>方式二：lammps安装包内的pizza文件夹</h4><p>lammps安装包/home/peachrl/lammps/tools/python目录内有个pizza文件夹，包含lammps后处理所需的文件，直接在/home/peachrl/.bashrc中设置环境变量：</p><pre class="language-shell" data-language="shell"><code class="language-shell">export LAMMPS_PYTHON_TOOLS="/home/peachrl/lammps/tools/python/pizza"</code></pre><h3 id="log2txt-py"><a href="#log2txt-py" class="headerlink" title="log2txt.py"></a>log2txt.py</h3><p>将需要处理的log文件（比如下图的log.lammps）和log2txt.py放在同一文件夹（当然也可以不放同一文件夹，写清楚路径也行）：</p><p><img src="https://image.wanyijizi.com/20210813/image-20210813181306806.png" alt="image-20210813181306806" loading="lazy"></p><p>在终端运行：</p><pre class="language-shell" data-language="shell"><code class="language-shell">python log2txt.py log.lammps txt.lammps</code></pre><p>即可得到全部数据的提取：</p><p><img src="https://image.wanyijizi.com/20210813/image-20210813184856077.png" alt="image-20210813184856077" loading="lazy"></p><p>若在终端运行：</p><pre class="language-shell" data-language="shell"><code class="language-shell">python log2txt.py log.lammps txt.lammps Press</code></pre><p>则提取的是Press这一列下所有数据：</p><p><img src="https://image.wanyijizi.com/20210813/image-20210813185132227.png" alt="image-20210813185132227" loading="lazy"></p><h3 id="logplot-py"><a href="#logplot-py" class="headerlink" title="logplot.py"></a>logplot.py</h3><p>需要先安装GnuPlot：</p><pre class="language-shell" data-language="shell"><code class="language-shell">sudo apt-get install gnuplot</code></pre><p>将需要处理的log文件（前文的log.lammps）和logplot.py放在同一文件夹，在终端运行：</p><pre class="language-shell" data-language="shell"><code class="language-shell">python -i logplot.py log.lammps Time Press</code></pre><p>得到以Time为X轴，Press为Y轴的图像：</p><p><img src="https://image.wanyijizi.com/20210813/image-20210813190815856.png" alt="image-20210813190815856" loading="lazy"></p><p>此时终端会停留在python里：</p><p><img src="https://image.wanyijizi.com/20210813/image-20210813194317562.png" alt="image-20210813194317562" loading="lazy"></p><p>如果需要保存成png格式的图片，可以继续输入：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> g<span class="token punctuation">(</span><span class="token string">'set term png'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> g<span class="token punctuation">(</span><span class="token string">'set output "Time-Press.png"'</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> g<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span></code></pre><p>文件夹里就会出现已保存的文件。</p><p><img src="https://image.wanyijizi.com/20210813/image-20210813194535719.png" alt="image-20210813194535719" loading="lazy"></p><h3 id="dumpsort-py"><a href="#dumpsort-py" class="headerlink" title="dumpsort.py"></a>dumpsort.py</h3><p>通过dump命令输出如下图所示的文件：</p><p><img src="https://image.wanyijizi.com/20210813/image-20210813195451445.png" alt="image-20210813195451445" loading="lazy"></p><p>与dumpsort.py放于同一文件夹内，在终端运行：</p><pre class="language-shell" data-language="shell"><code class="language-shell">python dumpsort.py 265.txt 1 new265.txt</code></pre><p>得到：</p><p><img src="https://image.wanyijizi.com/20210813/image-20210813195708669.png" alt="image-20210813195708669" loading="lazy"></p><p>也就是按照命令中所输入的“1”（指<code>ITEM:ATOM</code>下面的第1列）进行从小到大排序。</p>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Python </tag>
            
            <tag> LAMMPS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android手机向Deepin系统投屏</title>
      <link href="2021/08/10/Android%E6%89%8B%E6%9C%BA%E5%90%91Deepin%E7%B3%BB%E7%BB%9F%E6%8A%95%E5%B1%8F/"/>
      <url>2021/08/10/Android%E6%89%8B%E6%9C%BA%E5%90%91Deepin%E7%B3%BB%E7%BB%9F%E6%8A%95%E5%B1%8F/</url>
      
        <content type="html"><![CDATA[<div class="success"><blockquote><p>运行环境：电脑系统 Deepin 20.2.2；手机系统 Hydrogen OS 11.0.10.10.IN21</p></blockquote></div><p>因为最近需要用科技云会开组会，手机屏幕看组会太小而Deepin系统上没有这个软件，所以本桃开发了手机向Linux系统投屏的新技能√</p><p>主要工具为scrcpy，“scrcpy是免费开源的投屏软件，支持将安卓手机屏幕投放在 Windows、macOS、GNU/Linux 上，并可直接借助鼠标在投屏窗口中进行交互和录制”。</p><a id="more"></a><h3 id="安装adb并开启服务"><a href="#安装adb并开启服务" class="headerlink" title="安装adb并开启服务"></a>安装adb并开启服务</h3><pre class="language-shell" data-language="shell"><code class="language-shell">sudo apt-get install adbadb start-server</code></pre><p>adb是用来调试Android设备的，开启一次之后会一直开启（包括重启电脑），除非手动关闭。</p><h3 id="安装scrcpy"><a href="#安装scrcpy" class="headerlink" title="安装scrcpy"></a>安装scrcpy</h3><p>我们直接尝试用<code>sudo apt-get install scrcpy</code>命令安装，但是失败了：</p><p><img src="https://image.wanyijizi.com/20210810/image-20210813204307731.png" alt="image-20210813204307731" loading="lazy"></p><p>于是按照提示使用snap进行安装。首先安装snap，这是一个很受欢迎的软件包管理和部署系统：</p><pre class="language-shell" data-language="shell"><code class="language-shell">sudo apt-get install snapd</code></pre><p>再安装scrcpy：</p><pre class="language-shell" data-language="shell"><code class="language-shell">sudo snap install scrcpy</code></pre><p>这里网上有人遇到报错说缺少core18库，因此还需要安装一下<code>sudo snap install core</code>，不过我没有遇到。</p><h3 id="手机开启开发者选项"><a href="#手机开启开发者选项" class="headerlink" title="手机开启开发者选项"></a>手机开启开发者选项</h3><p>这一步是为了adb能更方便调试以及允许模拟点击。</p><p>不同手机开启<code>开发者选项</code>的位置不一定相同。OnePlus 8手机的<code>开发者选项</code>要从<code>设置</code>进入，打开倒数第二项<code>关于手机</code>，快速多次点击<code>版本号</code>。</p><h3 id="两种方法手机连接电脑"><a href="#两种方法手机连接电脑" class="headerlink" title="两种方法手机连接电脑"></a>两种方法手机连接电脑</h3><h4 id="有线连接"><a href="#有线连接" class="headerlink" title="有线连接"></a>有线连接</h4><p>手机与电脑用数据线连接，开启USB调试。这时可以用<code>adb devices</code>查看到我们的手机设备：</p><p><img src="https://image.wanyijizi.com/20210810/image-20210813211816433.png" alt="image-20210813211816433" loading="lazy"></p><h4 id="无线连接"><a href="#无线连接" class="headerlink" title="无线连接"></a>无线连接</h4><p>虽说是无线连接，但实际上还是需要用一下数据线，否则是需要手机root才能实现的。</p><p>手机与电脑必须保持在同一局域网，用数据线连接，开启USB调试。</p><p>在手机里<code>设置</code>-<code>关于手机</code>-<code>状态信息</code>找到ip地址，或者在终端用命令<code>adb shell ip a</code>查看ip：</p><p><img src="https://image.wanyijizi.com/20210810/image-20210813212241661.png" alt="image-20210813212241661" loading="lazy"></p><p>在终端输入，让设备在5555端口监听TCP/IP连接（端口四位数都行）：</p><pre class="language-shell" data-language="shell"><code class="language-shell">adb tcpip 5555</code></pre><p>通过 IP 地址连接设备：</p><pre class="language-shell" data-language="shell"><code class="language-shell">adb connect &lt;手机ip&gt;:5555</code></pre><p>确认连接状态：</p><pre class="language-shell" data-language="shell"><code class="language-shell">adb devices</code></pre><p><img src="https://image.wanyijizi.com/20210810/image-20210813212913008.png" alt="image-20210813212913008" loading="lazy"></p><p>这时能看到List of devices attached有两条，上面一条是无线连接的，下面一条是有线连接的。这时可以拔掉数据线，无线连接会依然保持。</p><p>类似的用<code>adb disconnect &lt;手机ip&gt;:5555</code>命令可以断开连接。</p><h3 id="scrcpy开始投屏"><a href="#scrcpy开始投屏" class="headerlink" title="scrcpy开始投屏"></a>scrcpy开始投屏</h3><p>在<code>adb devices</code>显示有1个设备连接的情况下，在终端输入：</p><pre class="language-shell" data-language="shell"><code class="language-shell">scrcpy</code></pre><p>即可。</p><p>科技云会在Deepin上也可以顺利“打开”了：</p><p><img src="https://image.wanyijizi.com/20210810/image-20210813214109597.png" alt="image-20210813214109597" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LAMMPS最新版（30 Jul 2021）安装要点</title>
      <link href="2021/08/05/LAMMPS%E6%9C%80%E6%96%B0%E7%89%88%EF%BC%8830%20Jul%202021%EF%BC%89%E5%AE%89%E8%A3%85%E8%A6%81%E7%82%B9/"/>
      <url>2021/08/05/LAMMPS%E6%9C%80%E6%96%B0%E7%89%88%EF%BC%8830%20Jul%202021%EF%BC%89%E5%AE%89%E8%A3%85%E8%A6%81%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<p>当前LAMMPS最新的stable版本是<code>29 Oct 2020</code>，安装步骤同之前的博文所述<a href="https://peachrl.github.io/2020/04/06/%E5%9C%A8Deepin%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85LAMMPS%E7%9A%84Makefile.ubuntu/">这里</a>。</p><p>但是最新的unstable版（或者称为patch release）的packages有不少更改。</p><a id="more"></a><p>最新的unstable版<code>30 Jul 2021</code>通过git从以下命令获取安装包：</p><pre class="language-shell" data-language="shell"><code class="language-shell">git clone -b unstable https://github.com/lammps/lammps.git mylammps</code></pre><p>安装packages的命令依然是：</p><pre class="language-shell" data-language="shell"><code class="language-shell">make yes-PACKAGENAME</code></pre><p>但是之前所有前面带有<code>USER-</code>的package都被改名或者拆开重组，比如之前的<code>USER-REAXC</code>现在为<code>REAXFF</code>，之前的<code>USER-MISC</code>及其他一些相关的packages被拆分重组出<code>INTERLAYER</code>等不少新的packages，具体如何按需安装需要阅读<a href="https://www.lammps.org/doc/Manual.html">Manual</a>。</p><p>其他安装步骤同之前的博文所述<a href="https://peachrl.github.io/2020/04/06/%E5%9C%A8Deepin%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85LAMMPS%E7%9A%84Makefile.ubuntu/">这里</a>，已在Deepin 20.2.2系统上得到验证。</p><hr><h3 id="另："><a href="#另：" class="headerlink" title="另："></a>另：</h3><p><code>30 Jul 2021</code>相比于<code>29 Oct 2020</code>必然有很多有用的新特性，目前发现一个很有用的：</p><p><code>pair_style              hybrid lj/cut 12.5 reaxff NULL</code></p><p>这行代码在旧版本会报错，但是在新版本ReaxFF力场可用在<code>pair_style hybrid</code>命令中。</p>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> LAMMPS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python处理文本文件常用技巧</title>
      <link href="2021/08/01/python%E5%A4%84%E7%90%86%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
      <url>2021/08/01/python%E5%A4%84%E7%90%86%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<ol><li>提取文件夹中所有.txt文件路径并按文件名排序</li><li>截取.txt文件中的部分内容</li><li>导出.csv文件</li><li>读取.csv文件并画图</li></ol><a id="more"></a><p>LAMMPS具有非常强大完备的分子动力学模拟功能，相对的，其前后处理则较为薄弱。因此，我们在这里寻求用python进行后处理的方法。由命令</p><pre class="language-none"><code class="language-none">dump                    data allinAtom custom 10 Ar.${loop}.txt mol type x y z vx vy vz</code></pre><p>从LAMMPS中输出了如下图所示的一系列txt文件，如何提取其中的数据并绘制成图像呢？</p><p><img src="https://image.wanyijizi.com/20210801/image-20210806000550332.png" alt="image-20210806000550332" loading="lazy"></p><p>以下很多内容也是在网上百度学来，已经不清楚出处了。</p><h2 id="提取文件夹中所有-txt文件路径并按文件名排序"><a href="#提取文件夹中所有-txt文件路径并按文件名排序" class="headerlink" title="提取文件夹中所有.txt文件路径并按文件名排序"></a>提取文件夹中所有.txt文件路径并按文件名排序</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> re<span class="token builtin">filter</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">".txt"</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">sort_only_number</span><span class="token punctuation">(</span>a_list<span class="token punctuation">)</span><span class="token punctuation">:</span>    ans_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    list_dic <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> a_list<span class="token punctuation">:</span>        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>splitext<span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">in</span> <span class="token builtin">filter</span><span class="token punctuation">:</span>            item_num <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r'\D*'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span>            <span class="token keyword">if</span> item_num <span class="token operator">!=</span> <span class="token string">''</span><span class="token punctuation">:</span>                list_dic<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>item_num<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> item    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>list_dic<span class="token punctuation">)</span><span class="token punctuation">:</span>        ans_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>list_dic<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> ans_list<span class="token keyword">def</span> <span class="token function">all_path</span><span class="token punctuation">(</span>dirname<span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> maindir<span class="token punctuation">,</span> subdir<span class="token punctuation">,</span> file_name_list <span class="token keyword">in</span> os<span class="token punctuation">.</span>walk<span class="token punctuation">(</span>dirname<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> filename <span class="token keyword">in</span> sort_only_number<span class="token punctuation">(</span>file_name_list<span class="token punctuation">)</span><span class="token punctuation">:</span>            apath <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>maindir<span class="token punctuation">,</span> filename<span class="token punctuation">)</span>                         ext <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>splitext<span class="token punctuation">(</span>apath<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> ext <span class="token keyword">in</span> <span class="token builtin">filter</span><span class="token punctuation">:</span>                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>apath<span class="token punctuation">)</span>        <span class="token keyword">break</span>    <span class="token keyword">return</span> resultdata_path <span class="token operator">=</span> all_path<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span></code></pre><ul><li><p>第一行的<code>filter=[".txt"]</code>相当于设置一个文件后缀名过滤器，后面配合os.path.splitext()函数就能看到作用。</p></li><li><p>接下来自定义一个sort_only_number()函数，针对一个列表结构的一系列文件路径，按照文件名中的数字进行排序，并以列表结构输出。</p><ul><li>其中os.path.splitext()函数会对文件路径进行切割，分成（路径无后缀名，后缀名）这样的元组，os.path.splitext()[0]和[1]能够分别表示该元组的前后项。由此配合前面的设定可以筛选出txt格式的文件。</li><li>之后的re.sub()通过正则表达式提取文件路径中的数字（其实是删除了非数字的内容），再由sorted()函数进行排序。</li></ul></li><li><p>自定义的第二个函数all_path()是将指定的文件夹中的.txt文件全部找出并输出成一个列表。</p><ul><li>这里使用的os.walk()主要用来扫描某个指定目录下所包含的子目录和文件，它会以自顶向下的方式扫描出（现在的主目录，该目录下包含的子目录，该目录下包含的文件）三元组，如果这一for循环里面有break，则只会停留在最上一层的目录，否则会遍历当前文件夹中的所有子文件夹。</li><li>同样通过os.path.splitext()判断是否是txt格式。</li></ul></li></ul><h2 id="截取-txt文件中的部分内容"><a href="#截取-txt文件中的部分内容" class="headerlink" title="截取.txt文件中的部分内容"></a>截取.txt文件中的部分内容</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 匹配ITEM: TIMESTEP到ITEM: ATOMS id type x y z vx vy vz之间的内容</span><span class="token keyword">def</span> <span class="token function">match_and_delete</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> file_path<span class="token punctuation">)</span><span class="token punctuation">:</span>    start <span class="token operator">=</span> re<span class="token punctuation">.</span>escape<span class="token punctuation">(</span>start<span class="token punctuation">)</span>    end <span class="token operator">=</span> re<span class="token punctuation">.</span>escape<span class="token punctuation">(</span>end<span class="token punctuation">)</span>    pattern <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'%s(?:.|\s)*?%s'</span><span class="token operator">%</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span>end<span class="token punctuation">)</span><span class="token punctuation">)</span>    ori_file <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>file_path<span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    file_content <span class="token operator">=</span> ori_file<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    updated_file <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>re<span class="token punctuation">.</span>split<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span>file_content<span class="token punctuation">)</span><span class="token punctuation">)</span>    ori_file<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> updated_file</code></pre><ul><li>这里其实是在反向地操作，因为在数据的前后总是重复的有规律的一段，所以这里其实通过正则表达式匹配出这一些无关信息进行删除。match_and_delete()将已知开头结尾的一段文本全部从文件中删除，剩下部分拼接在一起。</li></ul><h2 id="导出-csv文件"><a href="#导出-csv文件" class="headerlink" title="导出.csv文件"></a>导出.csv文件</h2><p>原文件的每行数据是空格隔开，标准csv格式是英文逗号隔开，所以很简单的思路：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> line <span class="token keyword">in</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'tmp'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    final_line <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r' '</span><span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">,</span> updated_line<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>final_line<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'\n'</span><span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token operator">=</span>csv_file<span class="token punctuation">)</span></code></pre><ul><li>用re.sub()函数将空格替换为逗号，逐行导出。</li></ul><p>对于如下图所示的，更为规整的输出文件，每10行有一行数据，可以有另外一种思路。</p><p><img src="https://image.wanyijizi.com/20210801/image-20210806011152498.png" alt="image-20210806011152498" loading="lazy"></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">def</span> <span class="token function">logic</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token keyword">if</span> index <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">9</span><span class="token punctuation">:</span>         <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">return</span> <span class="token boolean">True</span>    df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_table<span class="token punctuation">(</span>file_path<span class="token punctuation">,</span> header<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> index_col<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">,</span> names<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">,</span> <span class="token string">'vx'</span><span class="token punctuation">,</span> <span class="token string">'vy'</span><span class="token punctuation">,</span> <span class="token string">'vz'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> skiprows<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> logic<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">'\s+'</span><span class="token punctuation">,</span> engine<span class="token operator">=</span><span class="token string">'python'</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span>csv_path<span class="token punctuation">,</span> header<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span></code></pre><ul><li>自定义logic()函数，每10行取一行，其余全部跳过，通过pandas.read_table()函数中的skiprows参数就可以实现。<ul><li>这里用到了lambda函数，可以做到快速实现某项功能，省去函数命名等步骤。它的语法是<code>lambda 参数列表（和普通函数一样，逗号隔开）:关于参数的表达式</code>，其中表达式只能是单行的。</li><li>pandas.read_table()函数读出的是个DataFrame类，导出直接用pandas.to_csv()函数即可。</li></ul></li></ul><h2 id="读取-csv文件并画图"><a href="#读取-csv文件并画图" class="headerlink" title="读取.csv文件并画图"></a>读取.csv文件并画图</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npmatrix <span class="token operator">=</span> np<span class="token punctuation">.</span>loadtxt<span class="token punctuation">(</span><span class="token builtin">open</span><span class="token punctuation">(</span>csv_path<span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> delimiter<span class="token operator">=</span><span class="token string">","</span><span class="token punctuation">,</span> skiprows<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>x_list <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token keyword">import</span> matplotlib <span class="token keyword">as</span> mpl<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> seaborn <span class="token keyword">as</span> snssns<span class="token punctuation">.</span>set_style<span class="token punctuation">(</span><span class="token string">'whitegrid'</span><span class="token punctuation">)</span>songTi <span class="token operator">=</span> mpl<span class="token punctuation">.</span>font_manager<span class="token punctuation">.</span>FontProperties<span class="token punctuation">(</span>fname<span class="token operator">=</span><span class="token string">'C:\Windows\Fonts\simsun.ttc'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>hist<span class="token punctuation">(</span>x_list<span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">1.0</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span>fontproperties<span class="token operator">=</span>songTi<span class="token punctuation">,</span>fontsize<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>yticks<span class="token punctuation">(</span>fontproperties<span class="token operator">=</span>songTi<span class="token punctuation">,</span>fontsize<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">,</span>fontproperties<span class="token operator">=</span>songTi<span class="token punctuation">,</span>fontsize<span class="token operator">=</span><span class="token number">14</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'出现频率（%）'</span><span class="token punctuation">,</span>fontproperties<span class="token operator">=</span>songTi<span class="token punctuation">,</span>fontsize<span class="token operator">=</span><span class="token number">14</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>savefig<span class="token punctuation">(</span><span class="token string">'x_频率.png'</span><span class="token punctuation">,</span> dpi<span class="token operator">=</span><span class="token number">600</span><span class="token punctuation">,</span> bbox_inches<span class="token operator">=</span><span class="token string">'tight'</span><span class="token punctuation">,</span> transparent <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li><p>非常常规，numpy或者pandas都有读取csv格式的方法，这里用的numpy.loadtxt()。读取出的数据是一个列表结构，对它们为所欲为就好了。</p></li><li><p>画图用的matplotlib，用matplotlib.font_manager.FontProperties()专门定义了字体，因为中文会乱码。使用seaborn在这里只是装饰了图表样式，其实关于绘图它还有很多功能。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用MaterialStudio和Ovito给lammps建立data文件</title>
      <link href="2021/06/18/%E7%94%A8MaterialStudio%E5%92%8COvito%E7%BB%99lammps%E5%BB%BA%E7%AB%8Bdata%E6%96%87%E4%BB%B6/"/>
      <url>2021/06/18/%E7%94%A8MaterialStudio%E5%92%8COvito%E7%BB%99lammps%E5%BB%BA%E7%AB%8Bdata%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>在LAMMPS上怎么给Pt(111)表面建模：</p><pre class="language-none"><code class="language-none">lattice fcc 3.9242 &amp; origin 0 0 0 &amp; orient x 1 -1 0 &amp; orient y 1 1 -2 &amp; orient z 1 1 1</code></pre><p>得要像这样先算好每个轴的方向。有没有其他更加直观的方法呢？</p><a id="more"></a><p>需要安装软件 Material Studio，Ovito。（本文在 Win10 系统上安装的 <a href="https://www.aliyundrive.com/s/H4Ho5i3f2GG">Material Studio 2019</a> 及 <a href="https://www.ovito.org/">Ovito 3.4.3</a>，其中Material Studio 2019 是在网上找的破解版，极度难用，经常卡死，非常不推荐，有钱多金的朋友们可以入手正版，提倡支持正版，本文仅供学习和观摩，还有其他平民的建模方法，敬请期待其他博文）</p><p>在 Material Studio 上建立Pt的(111)表面模型，首先去网上下一个Pt晶体的cif模型（比如下面这个从<a href="http://www.crystallography.net/cod/search.html">网站</a>下载）：</p><p><img src="https://image.wanyijizi.com/20210618/image-20210806224807302.png" alt="image-20210806224807302" loading="lazy"></p><p>导入 Material Studio 中：</p><p><img src="https://image.wanyijizi.com/20210618/image-20210806225213902.png" alt="image-20210806225213902" loading="lazy"></p><p>切开(111)表面，并拓展和加真空层，得到超大晶胞：</p><p><img src="https://image.wanyijizi.com/20210618/image-20210806225438020.png" alt="image-20210806225438020" loading="lazy"></p><p>导出成cif格式，再导入Ovito：</p><p><img src="https://image.wanyijizi.com/20210618/image-20210806230149609.png" alt="image-20210806230149609" loading="lazy"></p><p>File→Export File，可以直接导出lammps的data格式。</p>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> LAMMPS </tag>
            
            <tag> Material Studio </tag>
            
            <tag> Ovito </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在lammps中计算压强</title>
      <link href="2021/04/08/%E5%9C%A8lammps%E4%B8%AD%E8%AE%A1%E7%AE%97%E5%8E%8B%E5%BC%BA/"/>
      <url>2021/04/08/%E5%9C%A8lammps%E4%B8%AD%E8%AE%A1%E7%AE%97%E5%8E%8B%E5%BC%BA/</url>
      
        <content type="html"><![CDATA[<p>在lammps的thermo输出中常常出现press项，输出的是整个系统的压强。如果要求lammps输出系统压强的分量或者部分体系受到的压强，则需要用到compute命令进行计算。</p><a id="more"></a><h2 id="系统压强"><a href="#系统压强" class="headerlink" title="系统压强"></a>系统压强</h2><p>系统压强可以用<code>compute ID all pressure ...</code>命令进行计算，输出结果为一个6维的向量，以此为对称张量压强在<code>xx yy zz xy xz yz</code>方向的分量。通过索引<code>1-6</code>能够对各分量进行访问，表示为<code>c_ID[索引]</code>，单位均为pressure单位。</p><h2 id="部分压强"><a href="#部分压强" class="headerlink" title="部分压强"></a>部分压强</h2><p>系统内部分压强需要采用<code>compute ID group-ID stress/atom ...</code>命令先计算group里各个原子所受的应力，同样分为<code>xx yy zz xy xz yz</code>6个方向的分量，单位为pressure单位。再通过<code>compute ID group-ID reduce ...</code>命令将group里所有原子的应力在一起进行计算，来求得group部分所受到的压强。</p><p>thermo输出的press量其实可以通过上述方法求得，这是<a href="https://lammps.sandia.gov/doc/compute_stress_atom.html">手册</a>上已有说明的：</p><pre class="language-none"><code class="language-none">compute        peratom all stress/atom NULLcompute        p all reduce sum c_peratom[1] c_peratom[2] c_peratom[3]variable       press equal -(c_p[1]+c_p[2]+c_p[3])/(3*vol)</code></pre><p>这里得到的变量值v_press就和thermo输出的press相同。</p><p>需要注意的是这里的vol表示整个系统的体积。lammps里也没有能够直接求得部分体积的命令，相应地需要用<code>compute ID group-ID voronoi/atom ...</code>命令先求各个原子所占的等效体积，再由<code>compute ID group-ID reduce sum ...</code>相加求解。其中voronoi命令的使用需要VORONOI package的支持。</p><h3 id="安装VORONOI-package的方法"><a href="#安装VORONOI-package的方法" class="headerlink" title="安装VORONOI package的方法"></a>安装VORONOI package的方法</h3><ol><li>首先从<a href="http://math.lbl.gov/voro++/download/">voro++官网</a>下载voro++软件。解压进入安装包，依次输入：</li></ol><pre class="language-shell" data-language="shell"><code class="language-shell">makesudo make installln -s voro++-0.4.6/src includelink #创造链接</code></pre><p>命令进行安装。</p><ol start="2"><li>接着进入到lammps文件夹中lib/voronoi目录，更改Makefile.lammps：</li></ol><pre class="language-none"><code class="language-none">voronoi_SYSINC = -I/usr/local/include/voro++voronoi_SYSLIB = -lvoro++voronoi_SYSPATH = -L/usr/local/lib</code></pre><ol start="3"><li>进入lammps文件夹中src目录：</li></ol><pre class="language-none"><code class="language-none">make yes-voronoisudo make ubuntu -j 4 #视个人情况编译</code></pre><p>得到lmp_ubuntu，成功√</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><pre class="language-none"><code class="language-none">computestressG g stress/atom NULLcomputepressG g reduce sum c_stressG[1] c_stressG[2] c_stressG[3]computevolC g voronoi/atomcomputevolG g reduce sum c_volC[1] variablepressSur equal -(c_pressG[1]+c_pressG[2]+c_pressG[3])/(3*c_volG)</code></pre>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> LAMMPS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LAMMPS中的条件与循环</title>
      <link href="2021/03/13/LAMMPS%E4%B8%AD%E7%9A%84%E6%9D%A1%E4%BB%B6%E4%B8%8E%E5%BE%AA%E7%8E%AF/"/>
      <url>2021/03/13/LAMMPS%E4%B8%AD%E7%9A%84%E6%9D%A1%E4%BB%B6%E4%B8%8E%E5%BE%AA%E7%8E%AF/</url>
      
        <content type="html"><![CDATA[<p>Lammps可以通过jump和label命令进行循环，以及if命令设定条件。</p><a id="more"></a><p>jump命令：<code>jump file label</code>，表示前往读取file文件中对应label往后的语句。jump命令既可以让lammps连续地读取多个文件中的语句，也可以重复读取自身的一段甚至全部语句。如果要读取自身，file处可简写为SELF。</p><h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><pre class="language-none"><code class="language-none">#in.loop#---------------------初始化模拟------------------------units               realatom_style          chargeboundary            p p plattice             custom 1.0 a1 2.456 0.0 0.0 a2 0.0 4.254 0.0 a3 0.0 0.0 6.708 &amp;                    basis 0.0 0.0 0.25 &amp;                    basis 0.5 0.16666666667 0.25 &amp;                      basis 0.5 0.5 0.25 &amp;                    basis 0.0 0.66666666667 0.25 &amp;                    basis 0.0 0.33333333333 0.75 &amp;                    basis 0.5 0.5 0.75 &amp;                      basis 0.5 0.83333333333 0.75 &amp;                    basis 0.0 0.0 0.75region              graphite block 0 20 0 10 1.5 2.5 units latticeregion              box block 0 24.56 0 21.27 0 23.54 units boxregion              insert sphere 12 10 23 1 units boxcreate_box          2 boxcreate_atoms        1 region graphitegroup               graphite region graphitegroup               insert dynamic all region insert every 1group               O type 2mass                1 12.0107mass                2 15.9994#---------------------势函数设置------------------------pair_style          reax/c NULLpair_coeff          * * ffield.reax.2010 C Oneighbor            2.0 binneigh_modify        every 1 delay 0 one 10000000 page 100000000#-----------------------运行----------------------------velocity            graphite create 500 21474 dist gaussianfix                 1 all qeq/reax 1 0.0 10.0 1e-6 reax/cfix                 2 graphite nvt temp 500.0 500.0 10.0fix                 3 insert addforce 0.1 0.1 -10fix                 4 O nvethermo_style        custom step time pe ke etotal temp press atoms volthermo              10dump                graph all xyz 10 CAr.0.xyztimestep            1run                 500undump              graph#--------------------循环入射一个粒子label               loopvariable            i loop 400create_atoms        2 single 12 10 23 units boxunfix               4group               O type 2fix                 4 O nvedump                graph all xyz 10 CAr.${i}.xyzrun                 500undump              graph#--------------------增加跳出循环的条件if                  "$(step) &gt; 8000" then &amp;                    "jump SELF break" &amp;else                "next i" &amp;                    "jump SELF loop"#--------------------跳出label               breakunfix               4unfix               3unfix               2unfix               1#-----------------------退出------------------------quit</code></pre><p>以下是在win10里安装预编译的LAMMPS executables串行4线程计算的，在命令行输入<code>lmp_serial -pk omp 4 -sf omp -in in.loop</code>，将得到的.xyz文件在OVITO里导出成视频如下。</p><iframe src="https://player.bilibili.com/player.html?aid=587063281&amp;bvid=BV1Jz4y117hE&amp;cid=309316146&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="width: 512px; height: 512px; max-width: 100%"> </iframe><p>红色小球表示的C原子,蓝色小球表示的O原子。刚开始盒子中部有2层C原子，没有O原子；随着每一轮循环，O原子不断被加到模拟盒子中，直到运行了8000步提前停止模拟。</p>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> LAMMPS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux的ipv6地址没有中括号！</title>
      <link href="2021/03/11/Linux%E7%9A%84ipv6%E5%9C%B0%E5%9D%80%E6%B2%A1%E6%9C%89%E4%B8%AD%E6%8B%AC%E5%8F%B7%EF%BC%81/"/>
      <url>2021/03/11/Linux%E7%9A%84ipv6%E5%9C%B0%E5%9D%80%E6%B2%A1%E6%9C%89%E4%B8%AD%E6%8B%AC%E5%8F%B7%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<p>实验室最近改了ipv6的地址，结果我在Win10里设置的hosts能连上实验室的ipv6地址，而Deepin V20系统连不上。困惑了两天终于想起来，上一次我也遇到过这个问题，其实是Linux的ipv6地址写法和Windows不一样。。在此记录，希望下次不会再忘记了。</p><a id="more"></a><p>Windows系统里ipv6地址写作：</p><pre class="language-none"><code class="language-none">[1010:200:3:ee22:0:bbbb:ffff:4000]  lab.com #随便打的地址，非真</code></pre><p>Linux系统里不需要写中括号！！</p><pre class="language-none"><code class="language-none">1010:200:3:ee22:0:bbbb:ffff:4000  lab.com #随便打的地址，非真</code></pre><p>马上就连上了~</p>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ABLabWordCloud文字云小程序第1版使用说明</title>
      <link href="2021/01/20/ABLabWordCloud%E6%96%87%E5%AD%97%E4%BA%91%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%AC%AC1%E7%89%88%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/"/>
      <url>2021/01/20/ABLabWordCloud%E6%96%87%E5%AD%97%E4%BA%91%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%AC%AC1%E7%89%88%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<p>该程序是继上一程序之后再一次尝试用Python代码生成GUI界面。</p><a id="more"></a><p>程序代码见：<a href="https://github.com/peachRL/ABLabWordCloud_GUI">ABLabWordCloud文字云小程序v2021.01.20(第1版)</a></p><p><a href="https://github.com/peachRL/ABLabWordCloud_GUI"><img src="https://img.shields.io/badge/ABLabWordCloud-v2021.01.20-brightgreen.svg?style=flat-square" alt="standard-readme compliant" loading="lazy"></a></p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>ABLabWordCloud小程序为ABLab实验室2020年终报告合集提供了文字云图。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>该项目使用Python编写，有图形化界面但无exe版本。请在windows系统中运行ABLabWordCloud_GUI.py使用。</p><h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p><strong>首先进入requirements文件夹，将requirements.txt中的包都装上。</strong></p><pre class="language-shell" data-language="shell"><code class="language-shell">pip install -r requirements.txt</code></pre><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>按照程序的条目依次输入，然后点“开始”即可。“开始”分为<strong>普通版</strong>和<strong>专业版</strong>，区别在于专业版去除了一些生活词，两者的输出文件分别为“ABLab_WordCloud_conventional”和“ABLab_WordCloud_professional”。</p><h3 id="界面和ico"><a href="#界面和ico" class="headerlink" title="界面和ico"></a>界面和ico</h3><p>界面由PySimpleGUI生成，没有ico。</p><img src="https://image.wanyijizi.com/20210120/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210125165352.png" alt="界面" style="zoom:50%;" loading="lazy"><h2 id="维护者"><a href="#维护者" class="headerlink" title="维护者"></a>维护者</h2><p><a href="https://github.com/peachrl">@peachRL</a></p><h2 id="使用许可"><a href="#使用许可" class="headerlink" title="使用许可"></a>使用许可</h2><p><a href="LICENSE">MIT</a> © peachRL</p>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> GUI </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ABLabPickME抽奖小程序第0版使用说明</title>
      <link href="2021/01/16/ABLabPickME%E6%8A%BD%E5%A5%96%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%AC%AC0%E7%89%88%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/"/>
      <url>2021/01/16/ABLabPickME%E6%8A%BD%E5%A5%96%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%AC%AC0%E7%89%88%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<p>之所以称为第0版，是因为里面还有很多很多bug，只是时间有限的潦草之作。可能我写代码也比较少，有点写到哪儿算哪儿的感觉，没有在写之前理清逻辑，因此这个程序不按照说明操作会出问题。主要还是想借这个程序尝试一下Python代码打包成.exe程序以及生成GUI界面，顺便根据实验室年会需求实现抽奖的功能。所以就先这样叭（，有什么问题明年年会再改🤣）</p><a id="more"></a><p>程序代码见：<a href="https://github.com/peachRL/ABLabPickME">ABLabPickME抽奖小程序v2021.01.16(第0版)</a></p><p><a href="https://github.com/peachRL/ABLabPickME"><img src="https://img.shields.io/badge/ABLabPickME-v2021.01.16-brightgreen.svg?style=flat-square" alt="standard-readme compliant" loading="lazy"></a></p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>ABLabPickME小程序基于ABLab实验室年会随机报告的需求，对实验室成员进行随机抽奖。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>该项目使用Python编写，使用Pyinstaller打包成exe，在<strong>gist</strong>文件夹中。仅在windows系统使用。</p><p>本小程序不需要安装啦！直接双击ABLabPickME_GUI.exe使用。</p><h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><h3 id="储存"><a href="#储存" class="headerlink" title="储存"></a>储存</h3><p>ABLabPickME的数据储存在./data文件夹中。若从上次储存的结果开始，则不需要输入文件；若选择重新开始，需输入一个命名为namelist.txt的文件，示例在./data文件夹中有。</p><p>ABLabPickME使用自动储存，可用于每次抽取一人排除一人；使用不自动储存，则每次都会从同一名单抽取。</p><p>默认选项为“从上次储存开始”、“自动保存结果”。</p><h3 id="抽取范围"><a href="#抽取范围" class="headerlink" title="抽取范围"></a>抽取范围</h3><p>包括老师组以及各年级组。默认选项为2015-2020年级组。重新选择范围的话请重新开始。</p><h3 id="界面和ico"><a href="#界面和ico" class="headerlink" title="界面和ico"></a>界面和ico</h3><p>界面由PySimpleGUI生成，ico为随手打的。</p><img src="https://image.wanyijizi.com/20210116/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20210116211651.png" alt="界面" style="zoom:50%;" loading="lazy"><img src="https://image.wanyijizi.com/20210116/ABLab.png" alt="ico" style="zoom:25%;" loading="lazy"><h2 id="维护者"><a href="#维护者" class="headerlink" title="维护者"></a>维护者</h2><p><a href="https://github.com/peachrl">@peachRL</a></p><h2 id="使用许可"><a href="#使用许可" class="headerlink" title="使用许可"></a>使用许可</h2><p><a href="LICENSE">MIT</a> © peachRL</p>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> GUI </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用shell脚本做计算</title>
      <link href="2020/10/10/%E7%94%A8shell%E8%84%9A%E6%9C%AC%E5%81%9A%E8%AE%A1%E7%AE%97/"/>
      <url>2020/10/10/%E7%94%A8shell%E8%84%9A%E6%9C%AC%E5%81%9A%E8%AE%A1%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<p>因为一个困扰我好几天的问题最终发现只是单位换算错了，于是我“一怒之下”把它写成了脚本。</p><a id="more"></a><pre class="language-shell" data-language="shell"><code class="language-shell">#!/bin/bash#If we know the transitional energy, we know the transitional velocity.#The kineti energy for an atom is mv^2/2.#1kJ/mol = 1.0364e-2 eV.#1m = 10^10\AA; 1s = 10^12ps.#By peachrltransitional_energy_in_eV=$1transitional_energy="Transitional energy "eV=" eV corresponds to velocity "ms=" m/s, which equals to "echo -e "${transitional_energy}${transitional_energy_in_eV}${eV}\c"v=`bc &lt;&lt;- EOF    scale = 5    ans = sqrt(${transitional_energy_in_eV} * 2 * 1000 * 1000 / 1.0364 / 0.01 / 39.948)    print ansEOF`echo -e "${v}${ms}\c"AAps=" \AA/ps."bc &lt;&lt;- EOF    scale = 5    ans = ${v} * 10^10 / 10^12    print ansEOFecho "${AAps}"</code></pre><p>运行结果：</p><pre class="language-shell" data-language="shell"><code class="language-shell">peachrl@peachrlPC:~$ ./tranEng2vel_eV2ms.sh 14.1Transitional energy 14.1 eV corresponds to velocity 8253.02824 m/s, which equals to 82.53028 \AA/ps.</code></pre><p>顺便强烈推荐一下《Linux命令行大全》这本书，初学读起来很舒服，节奏合理，易于食用，干货满满。以上脚本是看了2天书后的学习成果。</p>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Julia在win10环境的安装和解微分方程的例子</title>
      <link href="2020/07/21/Julia%E5%9C%A8win10%E7%8E%AF%E5%A2%83%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E8%A7%A3%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E7%9A%84%E4%BE%8B%E5%AD%90/"/>
      <url>2020/07/21/Julia%E5%9C%A8win10%E7%8E%AF%E5%A2%83%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E8%A7%A3%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E7%9A%84%E4%BE%8B%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<h2 id="Julia的安装"><a href="#Julia的安装" class="headerlink" title="Julia的安装"></a>Julia的安装</h2><div class="success"><blockquote><p>Julia 语言扮演了这样一个角色：它是一门灵活的动态语言，适合用于科学计算和数值计算，并且性能可与传统的静态类型语言媲美。</p></blockquote></div><a id="more"></a><h3 id="Julia官网下载安装包"><a href="#Julia官网下载安装包" class="headerlink" title="Julia官网下载安装包"></a>Julia官网下载安装包</h3><ol><li><p><a href="https://julialang.org/downloads/">https://julialang.org/downloads/</a></p></li><li><p>将安装路径加入path</p></li></ol><h3 id="在vscode中安装Julia插件"><a href="#在vscode中安装Julia插件" class="headerlink" title="在vscode中安装Julia插件"></a>在vscode中安装Julia插件</h3><ol><li><p><a href="https://code.visualstudio.com/download">https://code.visualstudio.com/download</a></p></li><li><p>如果插件没有自动找到Julia的位置而报错，到设置里Julia: Executable Path输入安装路径，要详细到\\bin\\julia.exe。（\用\\）</p></li></ol><h2 id="安装扩展包"><a href="#安装扩展包" class="headerlink" title="安装扩展包"></a>安装扩展包</h2><h3 id="安装General-注册表"><a href="#安装General-注册表" class="headerlink" title="安装General 注册表"></a>安装General 注册表</h3><ol><li>安装了注册表才能安装General 注册表中记录的扩展包</li><li>打开julia.exe（或者在vscode中按F1,输入Julia: start REPL），按]，出现<code>(@v1.4) pkg&gt;</code></li><li>输入<code>registry add https://mirrors.bfsu.edu.cn/git/julia-general.git</code>（这是使用的BFSU北外镜像站安装，比从原始地址(Github)安装和更新要快一些）</li><li>安装完成<img src="https://image.wanyijizi.com/20200721/image-20200720235009760.png" alt="image-20200720235009760" loading="lazy"></li><li>General 的更新会走对应的镜像，而其他数据的下载则通过官方服务器(Pkg server：<a href="https://pkg.julialang.org/">https://pkg.julialang.org</a>)</li></ol><h3 id="安装DifferentialEquations扩展包"><a href="#安装DifferentialEquations扩展包" class="headerlink" title="安装DifferentialEquations扩展包"></a>安装DifferentialEquations扩展包</h3><ol><li>DifferentialEquations.jl是个解微分方程的扩展包：<a href="https://diffeq.sciml.ai/dev/">https://diffeq.sciml.ai/dev/</a></li><li>输入<code>add DifferentialEquations</code></li><li>安装<img src="https://image.wanyijizi.com/20200721/image-20200721102807619.png" alt="image-20200721102807619" loading="lazy"></li><li>安装完成<img src="https://image.wanyijizi.com/20200721/image-20200721102933940.png" alt="image-20200721102933940" loading="lazy"></li></ol><h3 id="安装DiffEqFlux扩展包"><a href="#安装DiffEqFlux扩展包" class="headerlink" title="安装DiffEqFlux扩展包"></a>安装DiffEqFlux扩展包</h3><ol><li>DiffEqFlux.jl也是个解微分方程的扩展包：<a href="https://diffeqflux.sciml.ai/dev/">https://diffeqflux.sciml.ai/dev/</a></li><li>输入<code>add DuffEqFlux</code></li><li>安装<img src="https://image.wanyijizi.com/20200721/image-20200720235749070.png" alt="image-20200720235749070" loading="lazy"></li><li>很长..很久之后…</li><li>安装完成<img src="https://image.wanyijizi.com/20200721/image-20200721100926196.png" alt="image-20200721100926196" loading="lazy"></li></ol><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>如果跑代码的时候还报错说缺啥就补啥，总之扩展包都是在pkg模式下用<code>add …</code>，如果不小心断网又重装，可能导致没完全装好，用<code>build …</code></p><h2 id="Julia的使用"><a href="#Julia的使用" class="headerlink" title="Julia的使用"></a>Julia的使用</h2><h3 id="Julia解Lotka-Volterra方程组"><a href="#Julia解Lotka-Volterra方程组" class="headerlink" title="Julia解Lotka-Volterra方程组"></a>Julia解Lotka-Volterra方程组</h3><p>$$<br>\frac{d x}{d t}=\alpha x-\beta x y<br>$$</p><p>$$<br>\frac{d y}{d t}=-\delta y+\gamma x y<br>$$</p><p>文件Lotka-Volterra.jl：</p><pre class="language-julia" data-language="julia"><code class="language-julia"><span class="token keyword">using</span> DifferentialEquations<span class="token punctuation">,</span> Flux<span class="token punctuation">,</span> Optim<span class="token punctuation">,</span> DiffEqFlux<span class="token punctuation">,</span> DiffEqSensitivity<span class="token keyword">function</span> lotka_volterra<span class="token operator">!</span><span class="token punctuation">(</span>du<span class="token punctuation">,</span> u<span class="token punctuation">,</span> p<span class="token punctuation">,</span> t<span class="token punctuation">)</span>  x<span class="token punctuation">,</span> y <span class="token operator">=</span> u  α<span class="token punctuation">,</span> β<span class="token punctuation">,</span> δ<span class="token punctuation">,</span> γ <span class="token operator">=</span> p  du<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> dx <span class="token operator">=</span> α<span class="token operator">*</span>x <span class="token operator">-</span> β<span class="token operator">*</span>x<span class="token operator">*</span>y  du<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> dy <span class="token operator">=</span> <span class="token operator">-</span>δ<span class="token operator">*</span>y <span class="token operator">+</span> γ<span class="token operator">*</span>x<span class="token operator">*</span>y<span class="token keyword">end</span><span class="token comment"># Initial condition</span>u0 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">]</span><span class="token comment"># Simulation interval and intermediary points</span>tspan <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">10.0</span><span class="token punctuation">)</span>tsteps <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">:</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">10.0</span><span class="token comment"># LV equation parameter. p = [α, β, δ, γ]</span>p <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1.5</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">3.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">]</span><span class="token comment"># Setup the ODE problem, then solve</span>prob_ode <span class="token operator">=</span> ODEProblem<span class="token punctuation">(</span>lotka_volterra<span class="token operator">!</span><span class="token punctuation">,</span> u0<span class="token punctuation">,</span> tspan<span class="token punctuation">,</span> p<span class="token punctuation">)</span>sol_ode <span class="token operator">=</span> solve<span class="token punctuation">(</span>prob_ode<span class="token punctuation">,</span> Tsit5<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># Plot the solution</span><span class="token keyword">using</span> Plotsplot<span class="token punctuation">(</span>sol_ode<span class="token punctuation">)</span>savefig<span class="token punctuation">(</span><span class="token string">"LV_ode.svg"</span><span class="token punctuation">)</span></code></pre><p>可以在vscode或者cmd中输入<code>julia Lotka-Volterra</code>，或者在julia REPL中输入julia&gt; <code>include("Lotka-Volterra.jl")</code>。</p><p><img src="https://image.wanyijizi.com/20200721/LV_ode.svg" alt="LV_ode" loading="lazy"></p><h3 id="Julia解-Lorenz方程组"><a href="#Julia解-Lorenz方程组" class="headerlink" title="Julia解 Lorenz方程组"></a>Julia解 Lorenz方程组</h3><p>$$<br>\frac{d x}{d t}=\sigma(y-x)<br>$$</p><p>$$<br>\frac{d y}{d t}=x(\rho-z)-y<br>$$</p><p>$$<br>\frac{d z}{d t}=x y-\beta z<br>$$</p><p>文件Lorenz2.jl：</p><pre class="language-julia" data-language="julia"><code class="language-julia"><span class="token keyword">using</span> DifferentialEquations<span class="token punctuation">,</span> Plots<span class="token keyword">function</span> parameterized_lorenz<span class="token operator">!</span><span class="token punctuation">(</span>du<span class="token punctuation">,</span>u<span class="token punctuation">,</span>p<span class="token punctuation">,</span>t<span class="token punctuation">)</span>    x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z <span class="token operator">=</span> u    σ<span class="token punctuation">,</span>ρ<span class="token punctuation">,</span>β <span class="token operator">=</span> p    du<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> dx <span class="token operator">=</span> σ<span class="token operator">*</span><span class="token punctuation">(</span>y<span class="token operator">-</span>x<span class="token punctuation">)</span>    du<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> dy <span class="token operator">=</span> x<span class="token operator">*</span><span class="token punctuation">(</span>ρ<span class="token operator">-</span>z<span class="token punctuation">)</span> <span class="token operator">-</span> y    du<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> dz <span class="token operator">=</span> x<span class="token operator">*</span>y <span class="token operator">-</span> β<span class="token operator">*</span>z<span class="token keyword">end</span>u0 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">]</span>tspan <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">100.0</span><span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10.0</span><span class="token punctuation">,</span><span class="token number">28.0</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">]</span>prob <span class="token operator">=</span> ODEProblem<span class="token punctuation">(</span>parameterized_lorenz<span class="token operator">!</span><span class="token punctuation">,</span>u0<span class="token punctuation">,</span>tspan<span class="token punctuation">,</span>p<span class="token punctuation">)</span>sol <span class="token operator">=</span> solve<span class="token punctuation">(</span>prob<span class="token punctuation">)</span>plot<span class="token punctuation">(</span>sol<span class="token punctuation">,</span>vars<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>savefig<span class="token punctuation">(</span><span class="token string">"L2_ode.svg"</span><span class="token punctuation">)</span></code></pre><p>可以在vscode或者cmd中输入<code>julia Lorenz2</code>，或者在julia REPL中输入julia&gt; <code>include("Lorenz2.jl")</code>。</p><p>运行环境为笔记本电脑，win10专业版，64位，CPU: Intel(R) Core(TM) i7-6700HQ CPU @ 2.60GHz，8核，RAM 8G，Julia Version 1.4.2，运行时长大约110s左右。</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[Running]</span> julia <span class="token string">"e:\Julia\Lorenz2.jl"</span><span class="token namespace">[Done]</span> exited with code=0 in 114<span class="token punctuation">.</span>155 seconds</code></pre><p><img src="https://image.wanyijizi.com/20200721/L2_ode.svg" alt="L2_ode" loading="lazy"></p><h3 id="Julia解二阶常微分方程"><a href="#Julia解二阶常微分方程" class="headerlink" title="Julia解二阶常微分方程"></a>Julia解二阶常微分方程</h3><p>$$<br>\ddot{\theta}+\frac{g}{L} \sin (\theta)=0<br>$$</p><pre class="language-julia" data-language="julia"><code class="language-julia"><span class="token comment"># Simple Pendulum Problem</span><span class="token keyword">using</span> OrdinaryDiffEq<span class="token punctuation">,</span> Plots<span class="token comment">#Constants</span><span class="token keyword">const</span> g <span class="token operator">=</span> <span class="token number">9.81</span>L <span class="token operator">=</span> <span class="token number">1.0</span><span class="token comment">#Initial Conditions</span>u₀ <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token constant">π</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span>tspan <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">6.3</span><span class="token punctuation">)</span><span class="token comment">#Define the problem</span><span class="token keyword">function</span> simplependulum<span class="token punctuation">(</span>du<span class="token punctuation">,</span>u<span class="token punctuation">,</span>p<span class="token punctuation">,</span>t<span class="token punctuation">)</span>    θ <span class="token operator">=</span> u<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    dθ <span class="token operator">=</span> u<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>    du<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> dθ    du<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span>g<span class="token operator">/</span>L<span class="token punctuation">)</span><span class="token operator">*</span>sin<span class="token punctuation">(</span>θ<span class="token punctuation">)</span><span class="token keyword">end</span><span class="token comment">#Pass to solvers</span>prob <span class="token operator">=</span> ODEProblem<span class="token punctuation">(</span>simplependulum<span class="token punctuation">,</span> u₀<span class="token punctuation">,</span> tspan<span class="token punctuation">)</span>sol <span class="token operator">=</span> solve<span class="token punctuation">(</span>prob<span class="token punctuation">,</span>Tsit5<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#Plot</span>plot<span class="token punctuation">(</span>sol<span class="token punctuation">,</span>linewidth<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>title <span class="token operator">=</span><span class="token string">"Simple Pendulum Problem"</span><span class="token punctuation">,</span> xaxis <span class="token operator">=</span> <span class="token string">"Time"</span><span class="token punctuation">,</span> yaxis <span class="token operator">=</span> <span class="token string">"Height"</span><span class="token punctuation">,</span> label <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"\\theta"</span> <span class="token string">"d\\theta"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>savefig<span class="token punctuation">(</span><span class="token string">"2nd-Order.svg"</span><span class="token punctuation">)</span>p <span class="token operator">=</span> plot<span class="token punctuation">(</span>sol<span class="token punctuation">,</span>vars <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> xlims <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span> title <span class="token operator">=</span> <span class="token string">"Phase Space Plot"</span><span class="token punctuation">,</span> xaxis <span class="token operator">=</span> <span class="token string">"Velocity"</span><span class="token punctuation">,</span> yaxis <span class="token operator">=</span> <span class="token string">"Position"</span><span class="token punctuation">,</span> leg<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token keyword">function</span> phase_plot<span class="token punctuation">(</span>prob<span class="token punctuation">,</span> u0<span class="token punctuation">,</span> p<span class="token punctuation">,</span> tspan<span class="token operator">=</span><span class="token number">2</span><span class="token constant">pi</span><span class="token punctuation">)</span>    _prob <span class="token operator">=</span> ODEProblem<span class="token punctuation">(</span>prob<span class="token punctuation">.</span>f<span class="token punctuation">,</span>u0<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span>tspan<span class="token punctuation">)</span><span class="token punctuation">)</span>    sol <span class="token operator">=</span> solve<span class="token punctuation">(</span>_prob<span class="token punctuation">,</span>Vern9<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># Use Vern9 solver for higher accuracy</span>    plot<span class="token operator">!</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>sol<span class="token punctuation">,</span>vars <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> xlims <span class="token operator">=</span> nothing<span class="token punctuation">,</span> ylims <span class="token operator">=</span> nothing<span class="token punctuation">)</span><span class="token keyword">end</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token operator">-</span><span class="token number">4</span><span class="token constant">pi</span><span class="token punctuation">:</span><span class="token constant">pi</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token constant">π</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token operator">-</span><span class="token number">4</span><span class="token constant">pi</span><span class="token punctuation">:</span><span class="token constant">pi</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token constant">π</span>        phase_plot<span class="token punctuation">(</span>prob<span class="token punctuation">,</span> <span class="token punctuation">[</span>j<span class="token punctuation">,</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>    <span class="token keyword">end</span><span class="token keyword">end</span>plot<span class="token punctuation">(</span>p<span class="token punctuation">,</span>xlims <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span>savefig<span class="token punctuation">(</span><span class="token string">"2nd-Order2.svg"</span><span class="token punctuation">)</span></code></pre><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[Running]</span> julia <span class="token string">"e:\Julia\2nd-Order.jl"</span><span class="token namespace">[Done]</span> exited with code=0 in 84<span class="token punctuation">.</span>122 seconds</code></pre><p><img src="https://image.wanyijizi.com/20200721/2nd-Order.svg" alt="2nd-Order" loading="lazy"></p><p><img src="https://image.wanyijizi.com/20200721/2nd-Order2.svg" alt="2nd-Order2" loading="lazy"></p><h3 id="Julia解Henon-Heiles方程组"><a href="#Julia解Henon-Heiles方程组" class="headerlink" title="Julia解Hénon_Heiles方程组"></a>Julia解Hénon_Heiles方程组</h3><p>$$<br>\frac{d^{2} x}{d t^{2}}=-\frac{\partial V}{\partial x}<br>$$</p><p>$$<br>\frac{d^{2} y}{d t^{2}}=-\frac{\partial V}{\partial y}<br>$$</p><p>其中<br>$$<br>V(x, y)=\frac{1}{2}\left(x^{2}+y^{2}+2 x^{2} y-\frac{2}{3} y^{3}\right)<br>$$</p><pre class="language-julia" data-language="julia"><code class="language-julia"><span class="token keyword">using</span> OrdinaryDiffEq<span class="token punctuation">,</span> Plots<span class="token comment">#Setup</span>initial <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0.</span><span class="token punctuation">,</span><span class="token number">0.1</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span>tspan <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100.</span><span class="token punctuation">)</span><span class="token comment">#Remember, V is the potential of the system and T is the Total Kinetic Energy, thus E will</span><span class="token comment">#the total energy of the system.</span>V<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">//</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span>x<span class="token operator">^</span><span class="token number">2</span> <span class="token operator">+</span> y<span class="token operator">^</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span>x<span class="token operator">^</span><span class="token number">2</span><span class="token operator">*</span>y <span class="token operator">-</span> <span class="token number">2</span><span class="token operator">//</span><span class="token number">3</span> <span class="token operator">*</span> y<span class="token operator">^</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">#Define the function</span><span class="token keyword">function</span> Hénon_Heiles<span class="token punctuation">(</span>du<span class="token punctuation">,</span>u<span class="token punctuation">,</span>p<span class="token punctuation">,</span>t<span class="token punctuation">)</span>    x  <span class="token operator">=</span> u<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    y  <span class="token operator">=</span> u<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>    dx <span class="token operator">=</span> u<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>    dy <span class="token operator">=</span> u<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>    du<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> dx    du<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> dy    du<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>x <span class="token operator">-</span> <span class="token number">2</span>x<span class="token operator">*</span>y    du<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> y<span class="token operator">^</span><span class="token number">2</span> <span class="token operator">-</span> y <span class="token operator">-</span>x<span class="token operator">^</span><span class="token number">2</span><span class="token keyword">end</span><span class="token comment">#Pass to solvers</span>prob <span class="token operator">=</span> ODEProblem<span class="token punctuation">(</span>Hénon_Heiles<span class="token punctuation">,</span> initial<span class="token punctuation">,</span> tspan<span class="token punctuation">)</span>sol <span class="token operator">=</span> solve<span class="token punctuation">(</span>prob<span class="token punctuation">,</span> Vern9<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> abs_tol<span class="token operator">=</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">16</span><span class="token punctuation">,</span> rel_tol<span class="token operator">=</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># Plot the orbit</span>plot<span class="token punctuation">(</span>sol<span class="token punctuation">,</span> vars<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> title <span class="token operator">=</span> <span class="token string">"The orbit of the Hénon-Heiles system"</span><span class="token punctuation">,</span> xaxis <span class="token operator">=</span> <span class="token string">"x"</span><span class="token punctuation">,</span> yaxis <span class="token operator">=</span> <span class="token string">"y"</span><span class="token punctuation">,</span> leg<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">)</span>savefig<span class="token punctuation">(</span><span class="token string">"HH_ode.svg"</span><span class="token punctuation">)</span></code></pre><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token namespace">[Running]</span> julia <span class="token string">"e:\Julia\Hénon-Heiles.jl"</span><span class="token namespace">[Done]</span> exited with code=0 in 68<span class="token punctuation">.</span>487 seconds</code></pre><p><img src="https://image.wanyijizi.com/20200721/HH_ode.svg" alt="HH_ode" loading="lazy"></p><p>以上例子出自：</p><ul><li><a href="https://diffeq.sciml.ai/dev/">https://diffeq.sciml.ai/dev/</a></li><li><a href="https://diffeqflux.sciml.ai/dev/">https://diffeqflux.sciml.ai/dev/</a></li><li><a href="https://tutorials.sciml.ai/html/models/01-classical_physics.html">https://tutorials.sciml.ai/html/models/01-classical_physics.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> Julia </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LAMMPS中安装和使用KIM（Knowledgebase of Interatomic Models）</title>
      <link href="2020/06/28/LAMMPS%E4%B8%AD%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8KIM%EF%BC%88Knowledgebase%20of%20Interatomic%20Models%EF%BC%89/"/>
      <url>2020/06/28/LAMMPS%E4%B8%AD%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8KIM%EF%BC%88Knowledgebase%20of%20Interatomic%20Models%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<div class="success"><blockquote><p>OpenKIM is an interatomic potential repository and an online framework for making molecular simulations reliable, reproducible, and portable. </p></blockquote></div><a id="more"></a><p>以上说明来自网址：<a href="https://openkim.org/">OpenKIM</a></p><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>已安装LAMMPS</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="查看安装方法"><a href="#查看安装方法" class="headerlink" title="查看安装方法"></a>查看安装方法</h3><p>在LAMMPS的文件夹/home/peachrl/LAMMPS/lammps-3Mar20/lib/kim中，阅读README，得知将通过cmake进行安装。</p><h3 id="安装cmake"><a href="#安装cmake" class="headerlink" title="安装cmake"></a>安装cmake</h3><ol><li><p>在<a href="https://cmake.org/download/">CMake</a>下载安装包。</p><p><img src="https://image.wanyijizi.com/20200628/1593324256673.png" alt="1593324256673" loading="lazy"></p></li><li><p>将安装包解压，进入cmake-3.18.0-rc2文件夹。</p></li><li><p>终端输入<code>./bootstrap</code></p><ul><li>若出现<code>Could NOT find OpenSSL</code>问题，根据提示安装OpenSSL ：<code>apt-get install libssl-dev</code></li></ul></li><li><p><code>make -j4</code></p></li><li><p><code>sudo make -j4 install</code></p></li><li><p>查看安装情况<code>cmake --version</code></p></li></ol><p><img src="https://image.wanyijizi.com/20200628/image-20200628154236953.png" alt="image-20200628154236953" loading="lazy"></p><h3 id="安装kim-api"><a href="#安装kim-api" class="headerlink" title="安装kim-api"></a>安装kim-api</h3><ol><li><p>进入LAMMPS中/home/peachrl/LAMMPS/lammps-3Mar20/lib/kim文件夹。</p></li><li><p>下载<a href="https://s3.openkim.org/kim-api/kim-api-2.1.3.txz">kim-api-2.1.3</a>。（有不同版本，具体见<a href="https://openkim.org/doc/usage/obtaining-models/">Obtaining KIM Models</a>）</p></li><li><p>解压到当前文件夹。</p></li><li><p><code>$ cd kim-api-2.1.3</code></p></li><li><p><code>$ mkdir build &amp;&amp; cd build</code></p></li><li><p><code>$ cmake ..  -DCMAKE_INSTALL_PREFIX=${PWD}/../../installed-kim-api-2.1.3</code></p><ul><li>若出现<code>No CMAKE_Fortran_COMPILER could be found.</code>，安装gfortran：<code>$ sudo apt install gfortran</code></li></ul></li><li><p><code>$ make -j4</code></p></li><li><p><code>$ make -j4 install</code></p></li><li><p>现在可以删除压缩包和安装包了</p><pre class="language-none"><code class="language-none">$ cd ../../$ rm -rf kim-api-2.1.3$ rm -rf kim-api-2.1.3.txz</code></pre><h3 id="build-LAMMPS-with-the-KIM-package-installed"><a href="#build-LAMMPS-with-the-KIM-package-installed" class="headerlink" title="build LAMMPS with the KIM package installed"></a>build LAMMPS with the KIM package installed</h3></li></ol><ul><li>进入/home/peachrl/LAMMPS/lammps-3Mar20/src文件夹，重新make ubuntu（之前make过的）：<pre class="language-none"><code class="language-none">$ make yes-kim$ sudo make ubuntu -j4</code></pre></li><li>移动和改个名：<pre class="language-none"><code class="language-none">$ mv lmp_ubuntu /home/peachrl/LAMMPS/bin/lmp4RMSPm.kim</code></pre><h3 id="添加path"><a href="#添加path" class="headerlink" title="添加path"></a>添加path</h3></li></ul><p><code>export PATH=/home/peachrl/LAMMPS/lammps-3Mar20/lib/kim/installed-kim-api-2.1.3/bin:$PATH</code></p><p><img src="https://image.wanyijizi.com/20200628/1593327313369.png" alt="1593327313369" loading="lazy"></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>==<strong>测试算例</strong>：LAMMPS自带的算例/home/peachrl/LAMMPS/lammps-3Mar20/examples/reax/CHO，将其改为使用OpenKIM。==</p><h3 id="安装所需的KIM-Model"><a href="#安装所需的KIM-Model" class="headerlink" title="安装所需的KIM Model"></a>安装所需的KIM Model</h3><p>在OpenKIM网站上找到需要的势：<a href="https://openkim.org/id/Sim_LAMMPS_ReaxFF_ChenowethVanDuinGoddard_2008_CHO__SM_584143153761_001">Sim_LAMMPS_ReaxFF_ChenowethVanDuinGoddard_2008_CHO__SM_584143153761_001</a></p><pre class="language-none"><code class="language-none">$ source kim-api-activate $ kim-api-collections-management install user Sim_LAMMPS_ReaxFF_ChenowethVanDuinGoddard_2008_CHO__SM_584143153761_001</code></pre><p><img src="https://image.wanyijizi.com/20200628/1593328174261.png" alt="1593328174261" loading="lazy"></p><h3 id="改写in文件"><a href="#改写in文件" class="headerlink" title="改写in文件"></a>改写in文件</h3><pre class="language-none"><code class="language-none"># KIM potential for CHO system# .....kim_init  Sim_LAMMPS_ReaxFF_ChenowethVanDuinGoddard_2008_CHO__SM_584143153761_001  realread_datadata.CHOkim_interactions H C Oneighbor2 binneigh_modifyevery 10 delay 0 check nofix1 all nvefix             3 all temp/berendsen 500.0 500.0 100.0timestep0.25#dump1 all atom 30 dump.reax.chorun3000</code></pre><p><img src="https://image.wanyijizi.com/20200628/1593328480356.png" alt="1593328480356" loading="lazy"></p><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p><img src="https://image.wanyijizi.com/20200628/1593328870265.png" alt="1593328870265" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> LAMMPS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>晶体表示方法</title>
      <link href="2020/06/18/%E6%99%B6%E4%BD%93%E8%A1%A8%E7%A4%BA%E6%96%B9%E6%B3%95/"/>
      <url>2020/06/18/%E6%99%B6%E4%BD%93%E8%A1%A8%E7%A4%BA%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>由结构基元（原子、离子、分子等）进行三维长程有序排列而构成的一切固体物质都是<strong>晶体</strong>。晶体与非晶体之间的主要差别在于它们是否有三维长程点阵结构。</p><a id="more"></a><p>晶体可以有<strong>单形</strong>和<strong>聚形</strong>两种理想外形。单形是由形状、大小、面指数相同的晶面构成的晶体外形，如六面体（氯化钠） 、正八面体（明矶）等（见图1 - 1 a和b) 。晶体共有47种单形。聚形是由两种或两种以上的晶面构成的晶体外形，如方柱多面体（水合硫酸镁，见图1 - 1 c) 。</p><center><img src="https://image.wanyijizi.com/20200618/image-20200612205129646.png" alt="image-20200612205129646" style="zoom:80%;" loading="lazy"></center><p>平行六面体是空间三维物体周期性重复的基本单元，或称<strong>单胞</strong>；决定该单胞的基本参数是平行六面体的三个边长a 、b、c和三边间的夹角α、β、γ。</p><center><img src="https://image.wanyijizi.com/20200618/image-20200618153857142.png" alt="image-20200618153857142" style="zoom: 67%;" loading="lazy"></center><h3 id="米勒指数-Miller-index"><a href="#米勒指数-Miller-index" class="headerlink" title="米勒指数(Miller index)"></a>米勒指数(Miller index)</h3><p>晶体中的<strong>晶面</strong>表示含有多于三个质点的平面。假如一个晶面与X，Y，Z轴相交的长度r, s, t; 分别取其倒数1/r, 1/s, 1/t，并对这三个分数进行通分；通分后三个分数的分子就是这个晶面的晶面指数h k l，也称米勒指数。（当晶面和晶轴平行时，该数值为0；当晶面与某一晶轴的负方向相交，则相应的指数上加一个 $ \bar{} $ ）</p><div align="center"><img src="https://image.wanyijizi.com/20200618/1_3.gif" alt="八面体" style="zoom:100%;" loading="lazy"></div><center><img src="https://image.wanyijizi.com/20200618/1_4.gif" alt="立方体1" style="zoom:100%;" loading="lazy"></center><center><img src="https://image.wanyijizi.com/20200618/Miller_Indices_Cubes.svg" alt="立方体2" style="zoom: 67%;" loading="lazy"></center><p>若考虑到晶体所具有的对称性，有许多不平行的晶面上也具有相同的质点分布。这些晶面是彼此等同的，我们把它们称作一个<strong>晶面族</strong>，记做{h k l}。例如在立方晶系中，{1 0 0}包含 $ (100) $ 、 $ (010) $ 、 $ (001) $ 、 $ (\bar100) $ 、 $ (0\bar10) $ 、 $ (00\bar1) $ 共六种晶面。</p><p><strong>晶向</strong>是指在晶体中任何一条穿过许多质点的直线方向。晶体中不同的晶向，常常具有不同的线密度等不同属性。为区分晶体这些晶向，结晶学上人们引入晶向指数，用[m n w]表示晶向上某质点原子坐标的最简整数比。</p><p>考虑晶体对称性，也有若干个晶向常常是等同的。它们构成一个<strong>晶向族</strong>，用&lt;m n w&gt;来表示这一系列的晶向。例如：对于立方晶系，&lt;100&gt;包含六个晶向： $ [100] $ 、 $ [010] $ 、 $ [\bar100] $  、$ [0\bar10] $ 、 $ [001] $ 、 $ [00\bar1] $ ；在立方晶系中，由于晶胞参数(a, b, c)的特殊关系， 某一晶面(h k l)与指数相同的晶向[h k l]恰好垂直。</p><blockquote><ul><li>中括号[]表示的是晶体中的<strong>晶向</strong></li><li>尖括号&lt;&gt;表示的是<strong>晶向族</strong></li><li>圆括号（）表示的是晶面的<strong>密勒指数（晶面指数；Miller指数）</strong></li><li>花括号｛｝表示的是<strong>晶面族</strong></li></ul></blockquote><h2 id="晶体的基本对称性"><a href="#晶体的基本对称性" class="headerlink" title="晶体的基本对称性"></a>晶体的基本对称性</h2><p>人们定义使各原子的位置发生变换，变换后晶体的结构状态与变换前正好相同的操作称为<strong>对称操作</strong>。晶体基本的对称操作有点操作和平移操作。</p><p>在一般的对称操作过程中，空间有许多点在动，且操作前后状态一样。但点操作要求操作中至少有一个点不动。在对称操作过程中保持空间至少有一个不动点的操作称为<strong>点对称操作</strong>。具体的点对称操作有恒等操作、平面反映操作、旋转操作、反演操作和旋转反演操作，其中平面反映和旋转反演操作属于复合操作。旋转轴只能是1次、2次、3次、4次和6次的；平面反映操作也称为镜面操作 $ m $ ，它等同于一个2次旋转反演操作 $ \bar2 $ 。反演操作为 $ \bar1 $ ，其他的旋转反演操作可为 $ \bar3 $ 、 $ \bar4 $ 、 $ \bar6 $ 。相对应的对称操作元素分别为镜面、旋转轴、反演中心、旋转反演轴等，恒等操作没有对称操作元素。在三维空间内若能通过旋转把一个位置转换到另一位置，则这两个位置彼此<strong>同宇</strong>。</p><center><img src="https://image.wanyijizi.com/20200618/image-20200615184637629.png" alt="5种点对称操作" style="zoom:67%;" loading="lazy"></center><center><img src="https://image.wanyijizi.com/20200618/image-20200615184945254.png" alt="点对称操作的表示方法" style="zoom:67%;" loading="lazy"></center><p>在三维空间内若能通过旋转把一个位置转换到另一位置，则这两个位置彼此同宇。否则这两个位置是不同宇的，不同宇的两个位置间一定经历了奇数个反演操作。这里可以借助左、右手的关系理解同宇的概念。旋转操作作用于左手时，不论怎样的旋转都不能把左手转成右手；而带有一次反演的操作则可以把左手转变成右手，如平面反映就可以把左手转变成右手。左手和右手呈镜面对称，是不同宇的。</p><p>已知在晶体学中只允许有5种旋转对称操作， 其转角为 $ \frac{2\pi}{n} $ ，且有n=1,2,3,4,6；相应的熊夫利斯符号为 $ C_1(E) $ 、 $ C_2 $ 、 $ C_3 $ 、 $ C_4 $ 和 $ C_6 $ 。其他的晶体旋转不能适当地填满空间。由于n值的限制，可能的旋转反演对称操作也只能有了 $ \bar1 $ （反演）、 $ \bar2 $ （m,平面反映）、 $ \bar3 $ 、 $ \bar4 $ 和 $ \bar6 $ ；相应的熊夫利斯符号为 $ i $ 、 $ \sigma $ 、 $ S_6 $ 、 $ S_4 $ 和 $ C_{3h} $ 。</p><blockquote><p>分子对称性可分成5种对称元素。</p><ul><li><strong>旋转轴：</strong>分子绕轴旋转 $ \frac{360^\circ}{n} $ 度角后与原分子重合，此轴也称为n重旋转轴，简写为$C_n$。例如水分子是 $ C_2 $ 而氨是 $ C_3 $ 。一个分子可以拥有多个旋转轴；有最大n值的称为主轴，为直角坐标系的z轴，较小的则称为副轴。n≥3的轴称高次轴。</li><li><strong>对称面：</strong>一个平面反映分子后和原分子一样时，此平面称为对称面。对称面也称为镜面，**记为$σ$**。水分子有两个对称面：一个是分子本身的平面，另一个是垂直于分子中心的平面。包含主轴，与分子平面垂直的对称面称为垂直镜面，记为 $ σ_v $ ；而垂直于主轴的对称面则称为水平镜面，记为 $ σ_h $ 。等分两个相邻副轴夹角的镜面称等分镜面，记作 $ σ_d $ 。一个对称面可以笛卡尔坐标系识别，例如(xz)或(yz)。</li><li><strong>对称中心：</strong>从分子中任一原子到分子中心连直线，若延长至中心另一侧相等距离处有一个相同原子，且对所有原子都成立，则该中心称为对称中心，<strong>用 $ i $ 表示</strong>。对称中心可以有原子，也可以是假想的空间位置。例如四氟化氙（ $ XeF_4 $ ）的对称中心位于Xe原子，而苯（ $ C_6H_6 $ ）的对称中心则位于环的中心。</li><li><strong>旋转反映轴：</strong>分子绕轴旋转 $ \frac{360^{\circ}}{n} $ 度，再相对垂直于轴的平面进行反映后分子进入等价图形，记为 $ S_n $ 。该操作是旋转与反映的复合操作，例子有四面体型的含有三个 $ S_4 $ 轴的四氟化硅，以及有一个 $ S_6 $ 轴的乙烷的交叉式构象。</li><li><strong>恒等元素：</strong>简写为E，取自德语的Einheit，意思为“一”。恒等操作即分子旋转360°不变化的操作，存在于每个分子中。这个元素似乎不重要，但此条件对群论机制和分子分类却是必要的。</li></ul></blockquote><h2 id="7种晶系"><a href="#7种晶系" class="headerlink" title="7种晶系"></a>7种晶系</h2><p>根据实际晶体主要的点对称特征可以把所有晶体划分成7种晶系。</p><p>表中表示对称性的符号是国际符号，括号内符号则是相应的熊夫利斯符号。特别要注意的是，边、角关系中不等号＂≠＂的意思是指对称条件不要求这里是等号，并不是说不允许相等。</p><p>晶体所具有的<strong>点对称性决定了晶体所属的晶系</strong>，而不是其单胞的边角关系。</p><center><img src="https://image.wanyijizi.com/20200618/image-20200612224059718.png" alt="image-20200612224059718" style="zoom: 50%;" loading="lazy"></center><center><img src="https://image.wanyijizi.com/20200618/image-20200615185311460.png" alt="image-20200615185311460" style="zoom:67%;" loading="lazy"></center><center><img src="https://image.wanyijizi.com/20200618/image-20200615185345776.png" alt="image-20200615185345776" style="zoom:67%;" loading="lazy"></center><center><img src="https://image.wanyijizi.com/20200618/image-20200615185541998.png" alt="image-20200615185541998" style="zoom:67%;" loading="lazy"></center><center><img src="https://image.wanyijizi.com/20200618/image-20200615185622819.png" alt="image-20200615185622819" style="zoom:67%;" loading="lazy"></center><img src="https://image.wanyijizi.com/20200618/image-20200615185652962.png" alt="image-20200615185652962" style="zoom:67%;" loading="lazy"><img src="https://image.wanyijizi.com/20200618/image-20200615185716838.png" alt="image-20200615185716838" style="zoom:67%;" loading="lazy"><img src="https://image.wanyijizi.com/20200618/image-20200615185859371.png" alt="image-20200615185859371" style="zoom:67%;" loading="lazy"><h2 id="14种布拉菲点阵"><a href="#14种布拉菲点阵" class="headerlink" title="14种布拉菲点阵"></a>14种布拉菲点阵</h2><p>在空间中由几何点即阵点排列成的无限阵列，其中每一点与其他所有的这种点有完全相同的环境，这种阵列称为<strong>点阵(Lattice)**。所有晶体都具有平移不变性，或称</strong>平移对称性<strong>。借助点的平移可产生这种点阵。晶体被定义为原子的三维长程有序排列，即周期性排列。所谓周期性就是平移对称性。平移对称性可理解为点平移后其环境不变。三维空间内单位平移矢量构成的平行六面体即为点阵的单胞。若单胞只含有一个阵点则称为</strong>初基单胞**。</p><p><strong>7 种晶系是从点对称性的角度出发对所有晶体做粗略划分。若从晶体的平移对称特性出发，则所有晶体可能具有14 种不同的点阵</strong>，或称为14 种以法国晶体学家<em>A.Bravais</em>命名的布拉菲点阵。</p><p>设有某一点阵，若用其初基单胞即可反映出该点阵的平移对称性，又可反映出相应晶系所具有的点对称特征对初基单胞边角关系的限制，则这种点阵称为<strong>初基点阵</strong>。初基点阵所展示的平移矢董为初基平移矢量。参照前文表1-1所示各晶系单胞边角关系，可以得出7种初基布拉菲点阵，每种晶系对应一个初基点阵。应注意的是，三方晶系取六角坐标系时与六方晶系的平移对称性相同，因此它们对应的点阵是等价的；这些初基点阵用P作为标记。P也代表它们的初基单胞或称P单胞。对三方晶系还存在一种菱形单胞的初基点阵，用R作为标记(R表示菱面体， Rhombohedron)。另外，还有其他7种布拉菲点阵。这7种点阵是在原初基点阵内加人一些新的阵点，通过点阵有心化而获得。阵点不能随意加人，加人新阵点后，首先要看新的阵点排列是否还构成点阵，即这一点阵是否可以形成无限阵列并且所有阵点都有完全相同的环境；同时所得到的点阵还应确实是一个新的点阵。这类新点阵的单胞变成了多个阵点的<strong>复式单胞</strong>，属于非初基单胞。这种单胞形式也能够体现出相应晶系所具有的点对称特征对其单胞边角关系的限制。</p><p>在讨论上述7种初基点阵以外的其他布拉菲点阵时，使用这种复式单胞很方便，所以常被人们采纳，被称为<strong>惯用单胞</strong>。在这种点阵划分方法中，一方面，凡属于同一晶系的空间点阵都选用相同的参考轴，所以全部惯用的复式单胞都可以表现出与相应的初基点阵单胞相同的点对称特征和相应的平移对称性； 另一方面，由复式单胞构成的新点阵中仍可找出只有一个阵点的初基单胞，并且可以通过该初基单胞的点阵矢董平移将整个空间点阵再现出来。但是这种单胞本身不能以简洁清晰的方式反映出晶系主要的点对称特征对其单胞边角关系的限制。点对称性对于晶体结构分析十分重要，需要从单胞上直接反映出来，以使入们很容易想像出晶体的结构特征，所以研究晶体结构时对有心点阵通常不选用其初基单胞，而选用复式单胞。但有心点阵的初基平移矢量仍取其初基单胞的平移矢量。下表给出了描述晶体平移对称性的14种布拉菲点阵，其中初基P和R点阵的单胞只有一个阵点，体心I点阵的单胞有两个阵点，面心F点阵的单胞有四个阵点，底心C或B点阵的单胞有两个阵点。</p><center><img src="https://image.wanyijizi.com/20200618/image-20200615182903171.png" alt="image-20200615182903171" style="zoom: 80%;" loading="lazy"></center><center><img src="https://image.wanyijizi.com/20200618/image-20200615184356769.png" alt="image-20200615184356769" style="zoom: 50%;" loading="lazy"></center><center><img src="https://image.wanyijizi.com/20200618/image-20200618232118138.png" alt="image-20200618232118138" style="zoom: 50%;" loading="lazy"></center><p>点阵所表达的晶体平移对称性包括晶体内每一个原子的平移对称性，也包括各原子间每一个空隙位置的平移对称性。因此，点阵是实际晶体所具备的平移对称性的高度抽象和概括，点阵内阵点与阵点之间的关系等同于实际晶体内所具有相应平移对称性几何点之间的关系。切忌把阵点只是简单地理解成真实晶体中原子的位置。实际上，有很多种晶体单胞在其所对应的点阵单胞的阵点位置上并没有原子。</p><blockquote><ul><li><p>a–anorthic, m–monoclinic, o–orthorhombic, h–hexagonal(rhombohedral &amp; hexagonal), t–tetragonal ,c–cubic.</p><center><img src="https://image.wanyijizi.com/20200618/image-20200618190406654.png" alt="image-20200618190406654" style="zoom:67%;" loading="lazy"></center></li><li><p>简单P(Primitive)，底心S或C或B或A(Base-centered)，体心I(Body-centered)，面心F(Face-centered)</p><center><img src="https://image.wanyijizi.com/20200618/image-20200618190047060.png" alt="image-20200618190047060" style="zoom:80%;" loading="lazy"></center><ul><li><p><strong>fcc</strong>：face-centered cubic structure 面心立方结构</p></li><li><p><strong>hcp</strong>：hexagonal close-packed structure 密排六方结构</p></li><li><p><strong>bcc</strong>：body-centered cubic structure 体心立方结构</p><center><img src="https://image.wanyijizi.com/20200618/HCP&amp;FCC.jpg" alt="HCP&amp;FCC" style="zoom:67%;" loading="lazy"></center></li></ul></li></ul></blockquote><h2 id="晶体学点群"><a href="#晶体学点群" class="headerlink" title="晶体学点群"></a>晶体学点群</h2><p>经典晶体学认为，点对称操作的组合可以描述所有规则几何外形单晶体所具备的点对称性。但许多金属单晶体虽然不一定具备规则的几何外形，但它们相应的点对称性却仍然存在。因此近代晶体学出现之后，人们认识到晶体的点对称性实质上反映了晶体内部结构的点对称性，只有在特定的单晶生长条件下晶体的点对称性才反映在几何外形上。</p><p>点对称操作的集合符合群的条件。群内对称操作的个数为群的阶，用h表示。对称操作组合在一起操作时， 空间几乎所有点都在变动，但至少有一个点（如原点）在全部对称操作过程中始终保持不变。它也是所有对称元素的一个公共点。所以把点对称操作的集合所构成的群称为点群。通常，阶数越高的点群其对称性越高。<strong>点群</strong>以高度的数学抽象方式表述了实际晶体的点对称性。</p><p>1830 年以后，人们才发现晶体共有32 种晶类，每一种晶类对应着一种点群。</p><p>可以用不同的方法推导32种点群：(1)从7种晶系的主要点对称特征出发外延推演，可以推导出32种点群。这种推导方法的优点在于点群与晶系的对应关系十分明确。(2)旋转群推导法，即先推导11种纯旋转晶体学点群，然后与反演操作组合可得11种中心对称的晶体学点群，再推导出另外10种非中心对称的点群，共得32种点群。这种方法的优点在于可以很快完成推导。(3)循环群推导法，是先确定5 种循环群 $ 1(C_1) $ , $ 2(C_2) $ , $ 3(C_3) $ , $ 4(C_4) $ 和 $ 6(C_6) $ ，再在每种循环群上加进各种新对称操作，或用 $ \bar{n} $ 取代 $ n $ 轴，这样也可以推导出32种点群。其优点在于通过推导可以更为透彻地了解各种点群的对称操作。</p><blockquote><p>熊夫利斯符号表示点群：</p><ul><li> $ C_n $ （循环群）表示该群有一根n次旋转轴。 $ C_{nh} $ 是 $ C_n $ 加上一个与旋转轴垂直的镜面（反映）对称元素。 $ C_{nv} $ 则是 $ C_n $ 加上一个与旋转轴平行的镜面对称元素。</li><li> $ S_{2n} $ （源自德语Spiegel，意思是镜面）表示一根只含有2n次旋转反映轴（简称映轴）。</li><li> $ D_n $ （二面体群）表示这个群只有一根n次旋转轴和n根垂直于这根主轴的二重轴。 $ D_{nh} $ 是加上一个与n次旋转轴垂直的镜面。 $ D_{nd} $ 则是 $ D_n $ 是加上n个与n次旋转轴平行的镜面。</li><li>字母 $ T $ （四面体）表示这个群有四面体的对称性。 $ T_d $ 则包括了旋转反映操作， $ T $ 群本身则不包含旋转反映操作， $ T_h $ 则是 $ T $ 群加上与旋转轴垂直的镜面。</li><li>字母 $ O $ （八面体）表示该群具有八面体或者立方体的对称性，可能包括（ $ O_h $ ）或不包括（ $ O $ ）旋转反映操作。</li></ul></blockquote><center><img src="https://image.wanyijizi.com/20200618/image-20200615192915842.png" alt="image-20200615192915842" loading="lazy"></center><center><img src="https://image.wanyijizi.com/20200618/image-20200615192928474.png" alt="image-20200615192928474" loading="lazy"></center><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p><a href="https://ocw.nagoya-u.jp/files/109/lecnote_04.pdf">晶体的结构及表示方法</a></p><p><a href="https://struchem.nankai.edu.cn/zyk/chap7/32pg/32pg.htm">晶体的宏观对称性—32种晶体学点群</a></p><h2 id="本文内容载自"><a href="#本文内容载自" class="headerlink" title="本文内容载自:"></a>本文内容载自:</h2><p>[1]毛卫民 - &lt;材料的晶体结构原理&gt;</p><p>[2]周公度 - &lt;结构化学基础&gt;</p><p>[3]<a href="http://chemistry.bd.psu.edu/jircitano/6symmetry.pdf">http://chemistry.bd.psu.edu/jircitano/6symmetry.pdf</a></p><p>[4]<a href="https://zh.wikipedia.org/wiki/%E5%88%86%E5%AD%90%E5%AF%B9%E7%A7%B0%E6%80%A7">https://zh.wikipedia.org/wiki/%E5%88%86%E5%AD%90%E5%AF%B9%E7%A7%B0%E6%80%A7</a></p><p>[5]<a href="https://zh.wikipedia.org/zh-hans/%E6%99%B6%E4%BD%93%E5%AD%A6%E7%82%B9%E7%BE%A4#cite_note-3">https://zh.wikipedia.org/zh-hans/%E6%99%B6%E4%BD%93%E5%AD%A6%E7%82%B9%E7%BE%A4#cite_note-3</a></p><p>[6]<a href="https://en.wikipedia.org/wiki/Crystal_structure">https://en.wikipedia.org/wiki/Crystal_structure</a></p><p>[7]<a href="https://ja.wikipedia.org/wiki/%E7%B5%90%E6%99%B6%E6%A7%8B%E9%80%A0">https://ja.wikipedia.org/wiki/%E7%B5%90%E6%99%B6%E6%A7%8B%E9%80%A0</a></p>]]></content>
      
      
      <categories>
          
          <category> 理论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Materials </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Win10系统中在vscode配置mpi开发环境</title>
      <link href="2020/06/03/Win10%E7%B3%BB%E7%BB%9F%E4%B8%AD%E5%9C%A8vscode%E9%85%8D%E7%BD%AEmpi%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
      <url>2020/06/03/Win10%E7%B3%BB%E7%BB%9F%E4%B8%AD%E5%9C%A8vscode%E9%85%8D%E7%BD%AEmpi%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>已安装vscode</p><a id="more"></a><h2 id="安装msmpi"><a href="#安装msmpi" class="headerlink" title="安装msmpi"></a>安装msmpi</h2><h3 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h3><p><a href="https://www.microsoft.com/en-us/download/details.aspx?id=100593">https://www.microsoft.com/en-us/download/details.aspx?id=100593</a></p><p><img src="https://image.wanyijizi.com/20200603/image-20200603145823402.png" alt="image-20200603145823402.png" loading="lazy"></p><p>两种安装包二选一即可。</p><h3 id="安装提示"><a href="#安装提示" class="headerlink" title="安装提示"></a>安装提示</h3><ol><li>打开cmd，输入</li></ol><pre class="language-shell" data-language="shell"><code class="language-shell">set MSMPI</code></pre><ol start="2"><li>显示如下图，则说明安装成功。后面所有相关目录均为安装后set MSMPI显示的相关目录，会根据安装时选择的文件夹而不同。</li></ol><p><img src="https://image.wanyijizi.com/20200603/image-20200603150143671.png" alt="image-20200603150143671" loading="lazy"></p><h2 id="配置vscode"><a href="#配置vscode" class="headerlink" title="配置vscode"></a>配置vscode</h2><h3 id="在-vscode文件夹中添加includePath"><a href="#在-vscode文件夹中添加includePath" class="headerlink" title="在.vscode文件夹中添加includePath"></a>在.vscode文件夹中添加includePath</h3><pre class="language-json" data-language="json"><code class="language-json"><span class="token string">"D:/Microsoft SDKs/MPI/Include"</span></code></pre><p><img src="https://image.wanyijizi.com/20200603/image-20200603150700159.png" alt="image-20200603150700159" loading="lazy"></p><h2 id="测试C-代码"><a href="#测试C-代码" class="headerlink" title="测试C++代码"></a>测试C++代码</h2><h3 id="C-代码："><a href="#C-代码：" class="headerlink" title="C++代码："></a>C++代码：</h3><pre class="language-c++" data-language="c++"><code class="language-c++">#include &lt;stdint.h&gt;#include &lt;mpi.h&gt;#include &lt;iostream&gt;int main(int argc,char* argv[]){    int myid, numprocs;    int  namelen;    char processor_name[MPI_MAX_PROCESSOR_NAME];    MPI_Init(&amp;argc,&amp;argv);    MPI_Comm_rank(MPI_COMM_WORLD,&amp;myid);    MPI_Comm_size(MPI_COMM_WORLD,&amp;numprocs);    MPI_Get_processor_name(processor_name,&amp;namelen);    std::cout &lt;&lt; "Hello World! Process "&lt;&lt; myid &lt;&lt;" of "&lt;&lt; numprocs &lt;&lt;" on "&lt;&lt; processor_name &lt;&lt; std::endl;    MPI_Finalize();    return 0;}</code></pre><h3 id="在终端中编译运行，结果如下图："><a href="#在终端中编译运行，结果如下图：" class="headerlink" title="在终端中编译运行，结果如下图："></a>在终端中编译运行，结果如下图：</h3><p><img src="https://image.wanyijizi.com/20200603/image-20200603172554787.png" alt="image-20200603172554787" loading="lazy"></p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="在终端中编译运行的命令："><a href="#在终端中编译运行的命令：" class="headerlink" title="在终端中编译运行的命令："></a>在终端中编译运行的命令：</h3><ol><li>编译<br>C语言：</li></ol><pre class="language-powershell" data-language="powershell"><code class="language-powershell">gcc 源文件文件名 <span class="token operator">-</span>o 可执行文件文件名 <span class="token operator">-</span>fopenmp <span class="token operator">-</span>l msmpi <span class="token operator">-</span>L <span class="token string">"D:\Microsoft SDKs\MPI\Lib\x64"</span> <span class="token operator">-</span>I <span class="token string">"D:\Microsoft SDKs\MPI\Include"</span></code></pre><p>C++：</p><pre class="language-powdershell" data-language="powdershell"><code class="language-powdershell">g++ 源文件文件名 -o 可执行文件文件名 -fopenmp -l msmpi -L "D:\Microsoft SDKs\MPI\Lib\x64" -I \"D:\Microsoft SDKs\MPI\Include" </code></pre><ol start="2"><li>再执行：</li></ol><pre class="language-shell" data-language="shell"><code class="language-shell">mpiexec -n 进程数 可执行文件文件名</code></pre><h3 id="可配置Code-Runner扩展（对于C-C-）："><a href="#可配置Code-Runner扩展（对于C-C-）：" class="headerlink" title="可配置Code Runner扩展（对于C/C++）："></a>可配置Code Runner扩展（对于C/C++）：</h3><ol><li>打开扩展设置：</li></ol><p><img src="https://image.wanyijizi.com/20200603/image-20200603151703517.png" alt="image-20200603151703517" loading="lazy"></p><ol start="2"><li>找到Executor Map，在settings.json中编辑：</li></ol><p><img src="https://image.wanyijizi.com/20200603/image-20200603151828983.png" alt="image-20200603151828983" loading="lazy"></p><ol start="3"><li>在“code-runner.executorMap”中添加：</li></ol><p><img src="https://image.wanyijizi.com/20200603/image-20200603151948873.png" alt="image-20200603151948873" loading="lazy"></p><pre class="language-json" data-language="json"><code class="language-json"><span class="token property">"c"</span><span class="token operator">:</span> <span class="token string">"cd $dir &amp;&amp; gcc $fileName -o $fileNameWithoutExt -fopenmp -l msmpi -L \"D:\\Microsoft SDKs\\MPI\\Lib\\x64\" -I \"D:\\Microsoft SDKs\\MPI\\Include\" &amp;&amp; mpiexec -n 4 $fileNameWithoutExt"</span><span class="token punctuation">,</span><span class="token property">"cpp"</span><span class="token operator">:</span> <span class="token string">"cd $dir &amp;&amp; g++ $fileName -o $fileNameWithoutExt -fopenmp -l msmpi -L \"D:\\Microsoft SDKs\\MPI\\Lib\\x64\" -I \"D:\\Microsoft SDKs\\MPI\\Include\" &amp;&amp; mpiexec -n 4 $fileNameWithoutExt"</span><span class="token punctuation">,</span></code></pre><p>上面最后的<code>mpiexec -n 4 $fileNameWithoutExt</code>中4是进程数，可自行设置。</p>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> VSCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用reaxff势给石墨建模</title>
      <link href="2020/05/01/%E7%94%A8reaxff%E5%8A%BF%E7%BB%99%E7%9F%B3%E5%A2%A8%E5%BB%BA%E6%A8%A1/"/>
      <url>2020/05/01/%E7%94%A8reaxff%E5%8A%BF%E7%BB%99%E7%9F%B3%E5%A2%A8%E5%BB%BA%E6%A8%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p> LAMMPS + USER-REAXC  + MOLECULE packages</p><a id="more"></a><h3 id="安装msi2lmp"><a href="#安装msi2lmp" class="headerlink" title="安装msi2lmp"></a>安装msi2lmp</h3><p><img src="https://image.wanyijizi.com/20200501/1588299887184.png" alt="1588299887184" loading="lazy"></p><p>安装完成在src出现msi2lmp.exe，用于将从Materials Studio等软件生成的模型中得到lammps需要的data文件。</p><h2 id="data文件"><a href="#data文件" class="headerlink" title="data文件"></a>data文件</h2><h3 id="在Materials-Studio中建模"><a href="#在Materials-Studio中建模" class="headerlink" title="在Materials Studio中建模"></a>在Materials Studio中建模</h3><img src="https://image.wanyijizi.com/20200501/1588300254517.png" alt="1588300254517" style="zoom: 67%;" loading="lazy"><img src="https://image.wanyijizi.com/20200501/1588300275226.png" alt="1588300275226" style="zoom:80%;" loading="lazy"><h4 id="在Modules→Forcite→Calculation中设置势函数："><a href="#在Modules→Forcite→Calculation中设置势函数：" class="headerlink" title="在Modules→Forcite→Calculation中设置势函数："></a>在Modules→Forcite→Calculation中设置势函数：</h4><p><img src="https://image.wanyijizi.com/20200501/1588300406711.png" alt="1588300406711" loading="lazy"></p><p>不需要Run，直接关闭窗口。</p><h4 id="导出成car格式："><a href="#导出成car格式：" class="headerlink" title="导出成car格式："></a>导出成car格式：</h4><p>会生成car和mdf两个文件。</p><p><img src="https://image.wanyijizi.com/20200501/1588300531058.png" alt="1588300531058" loading="lazy"></p><h3 id="用msi2lmp转换："><a href="#用msi2lmp转换：" class="headerlink" title="用msi2lmp转换："></a>用msi2lmp转换：</h3><pre class="language-shell" data-language="shell"><code class="language-shell">./msi2lmp.exe graphite -p o -frc cvff -i -n &gt; data.graphite</code></pre><p>生成data.graphite和graphite.data两个文件，其中graphite.data就是需要的文件。</p><pre class="language-none"><code class="language-none">LAMMPS data file. msi2lmp v3.9.9 / 05 Nov 2018 / CGCMM for graphite    100 atoms    150 bonds    300 angles    600 dihedrals    100 impropers   1 atom types   1 bond types   1 angle types   1 dihedral types   1 improper types    -6.150000000     6.150000000 xlo xhi    -5.326056233     5.326056233 ylo yhi    -3.400000000     3.400000000 zlo zhi    -6.150000000     0.000000000     0.000000000 xy xz yzMasses   1   12.0107 # xxAtoms # full      1      1   1  0.000000     0.000000000     0.000000000     1.700000000   0   0   0 # xx      2      1   1  0.000000     0.000000000    -0.000000000    -1.700000000   0   0   1 # xx......</code></pre><h2 id="势文件"><a href="#势文件" class="headerlink" title="势文件"></a>势文件</h2><p>examples→reax→FC→ffield.reax.FC</p><h2 id="input脚本"><a href="#input脚本" class="headerlink" title="input脚本"></a>input脚本</h2><pre class="language-none"><code class="language-none">boundary     p p punits        real #用reaxff势需要选real单位atom_style   full #看生成的data文件里写了要用full，这需要安装MOLECULE packageread_data graphite.data#mass*   12.0107pair_stylereax/c NULL #要用reaxff势，需要安装USER-REAXCpair_coeff* * ffield.reax.FC Cneighbor     2. bin #截断半径，与单位有关，详细见附录neigh_modifyevery 10 delay 0 check no #截断半径的刷新频率#Langevin random seedvariable     dt equal 2e-3variable     r  equal 57085variable     T  equal 300variable     dT equal "v_dt * 100"# initializevelocity     all create $T 28459 rot yes dist gaussian mom yesfix          1 all langevin $T $T ${dT} 73504 zero yesfix2 all nvefix             3 all qeq/reax 1 0.0 10.0 1e-6 reax/c #用reaxff必须要有电荷守恒条件timestep0.25#dump    1 all movie 10 reaxff.mp4 type typedump   2 all xyz 10 dump.reaxff.xyzrun                 1000</code></pre><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><iframe src="//player.bilibili.com/player.html?aid=455404859&amp;bvid=BV1a5411x7ZG&amp;cid=185652449&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="width: 512px; height: 512px; max-width: 100%"> </iframe><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="截断半径"><a href="#截断半径" class="headerlink" title="截断半径"></a>截断半径</h3><blockquote><p>0.3 bin for units = lj, skin = 0.3 sigma</p><p>2.0 bin for units = real or metal, skin = 2.0 Angstroms</p><p>0.001 bin for units = si, skin = 0.001 meters = 1.0 mm</p><p>0.1 bin for units = cgs, skin = 0.1 cm = 1.0 mm</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> LAMMPS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用airebo/morse势给石墨烯建模</title>
      <link href="2020/04/29/%E7%94%A8AIREBO%E5%8A%BF%E7%BB%99%E7%9F%B3%E5%A2%A8%E7%83%AF%E5%BB%BA%E6%A8%A1/"/>
      <url>2020/04/29/%E7%94%A8AIREBO%E5%8A%BF%E7%BB%99%E7%9F%B3%E5%A2%A8%E7%83%AF%E5%BB%BA%E6%A8%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><p>LAMMPS+MANYBODY package</p><a id="more"></a><h2 id="data文件"><a href="#data文件" class="headerlink" title="data文件"></a>data文件</h2><p>来自examples→USER→phonon→4-Graphene→data.pos</p><pre class="language-none"><code class="language-none"># Graphene cell with dimension 10 x 10 x 1 and a = 2.522       200  atoms         1  atom types 0.    25.22000000000000  xlo xhi 0.    21.84116068344354  ylo yhi-10.   10.00000000000000  zlo zhi   12.61000000000000     0.00000000000000     0.00000000000000 xy xz yzAtoms1 1     0.00000000000000     0.00000000000000     0.000000000000002 1     1.26100000000000     0.72803868944812     0.000000000000003 1     2.52200000000000     0.00000000000000     0.000000000000004 1     3.78300000000000     0.72803868944812     0.000000000000005 1     5.04400000000000     0.00000000000000     0.000000000000006 1     6.30500000000000     0.72803868944812     0.000000000000007 1     7.56600000000000     0.00000000000000     0.00000000000000......</code></pre><h2 id="势文件"><a href="#势文件" class="headerlink" title="势文件"></a>势文件</h2><p>来自examples→airebo→CH.airebo-m</p><p>注：airebo/morse势是AIREBO的变形，将其中LJ势部分改用Morse势。</p><pre class="language-none"><code class="language-none"># DATE: 2016-03-15 CONTRIBUTOR: T.C. O'Connor CITATION: O'Connor, Andzelm, Robbins,  J. Chem. Phys. 142, 024903 (2015)# AIREBO-M of T.C. O'Connor, J.W. Andzelm, M.O. Robbins (2015)# Citation: J. Chem. Phys. 142, 024903 (2015); http://dx.doi.org/10.1063/1.4905549 # Based on AIREBO of S.J. Stuart, A.B. Tutein, J.A. Harrison (2000) # Citation: J. Chem. Phys. 112, 6472 (2000); http://dx.doi.org/10.1063/1.481208 1.7      rcmin_CC 1.3      rcmin_CH 1.1      rcmin_HH 2.0      rcmax_CC 1.8      rcmax_CH 1.7      rcmax_HH 2.0      rcmaxp_CC 1.6      rcmaxp_CH 1.7      rcmaxp_HH 0.1      smin 2.0      Nmin 3.0      Nmax 3.2      NCmin 3.7      NCmax 0.3134602960832605     Q_CC 0.3407757282257080     Q_CH 0.370     Q_HH 4.746539060659529    alpha_CC 4.102549828548784    alpha_CH ......</code></pre><h2 id="input脚本"><a href="#input脚本" class="headerlink" title="input脚本"></a>input脚本</h2><pre class="language-none"><code class="language-none">boundary     p p p #周期边界units        metal #单位，具体见备注atom_style   atomic #原子类型为默认值read_data data.pos #读取data文件mass*   12.0107 #C原子质量pair_style          airebo/morse 3.0 1 1 #势函数类型，3.0是截断半径；0/1表示打开或关闭Morse项；0/1表示打开或关闭扭转项，AIREBO势的各项见备注pair_coeff          * * CH.airebo-m C #用到的势文件中的Cvelocity            all create 300.0 761341 #针对所有原子，300温度，随机赋予速度fix                 1 all nve #每一步更新组内原子的位置和速度。V是体积，E是能量，二者保持恒定。timestep            0.0005 #步长dump   2 all xyz 10 dump.airebom.xyz #输出记录化学体系结构的.xyz文件run                 1000 #运行1000步</code></pre><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><iframe src="https://player.bilibili.com/player.html?aid=752940447&amp;bvid=BV16k4y1r7eh&amp;cid=185315710&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="width: 512px; height: 512px; max-width: 100%"> </iframe><h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><h3 id="units单位："><a href="#units单位：" class="headerlink" title="units单位："></a>units单位：</h3><blockquote><p>For style <em>metal</em>, these are the units:</p><ul><li>mass = grams/mole</li><li>distance = Angstroms</li><li>time = picoseconds</li><li>energy = eV</li><li>velocity = Angstroms/picosecond</li><li>force = eV/Angstrom</li><li>torque = eV</li><li>temperature = Kelvin</li><li>pressure = bars</li><li>dynamic viscosity = Poise</li><li>charge = multiple of electron charge (1.0 is a proton)</li><li>dipole = charge*Angstroms</li><li>electric field = volts/Angstrom</li><li>density = gram/cm^dim</li></ul></blockquote><h3 id="AIREBO势的三个项："><a href="#AIREBO势的三个项：" class="headerlink" title="AIREBO势的三个项："></a>AIREBO势的三个项：</h3><p>$$<br>\begin{split}E &amp; = \frac{1}{2} \sum_i \sum_{j \neq i}<br>\left[ E^{\text{REBO}}<em>{ij} + E^{\text{LJ}}</em>{ij} +<br> \sum_{k \neq i,j} \sum_{l \neq i,j,k} E^{\text{TORSION}}_{kijl} \right] \\end{split}<br>$$</p>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LAMMPS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虚拟机中设置共享文件夹</title>
      <link href="2020/04/28/%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%AD%E8%AE%BE%E7%BD%AE%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6%E5%A4%B9/"/>
      <url>2020/04/28/%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%AD%E8%AE%BE%E7%BD%AE%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6%E5%A4%B9/</url>
      
        <content type="html"><![CDATA[<p><strong>前提：在vmware中设置共享文件夹，会共享在 /mnt/hgfs里。本文针对找不到 /mnt/hgfs的情况。</strong></p><a id="more"></a><ul><li>物理机系统：win10</li><li>虚拟机系统：deepin 15</li><li>VMware：15，已安装VMware Tools</li></ul><h2 id="在vmware设置共享文件夹"><a href="#在vmware设置共享文件夹" class="headerlink" title="在vmware设置共享文件夹"></a>在vmware设置共享文件夹</h2><p><img src="https://image.wanyijizi.com/20200428/image-20200429172919311.png" alt="image-20200429172919311" loading="lazy"></p><h2 id="检查共享是否设置好"><a href="#检查共享是否设置好" class="headerlink" title="检查共享是否设置好"></a>检查共享是否设置好</h2><pre class="language-shell" data-language="shell"><code class="language-shell">sudo vmware-hgfsclient</code></pre><p><img src="https://image.wanyijizi.com/20200428/image-20200429174421649.png" alt="image-20200429174421649" loading="lazy"></p><p>能出现共享的文件夹名称说明之前都设置好了。</p><h2 id="安装一些必要的软件包"><a href="#安装一些必要的软件包" class="headerlink" title="安装一些必要的软件包"></a>安装一些必要的软件包</h2><pre class="language-shell" data-language="shell"><code class="language-shell">sudo apt-get install open-vm-tools</code></pre><p><img src="https://image.wanyijizi.com/20200428/image-20200429174722532.png" alt="image-20200429174722532" loading="lazy"></p><p>下面两个二选一，因为可能会遇到找不到软件包的情况。</p><pre class="language-shell" data-language="shell"><code class="language-shell">sudo apt-get install open-vm-dkmssudo apt-get install open-vm-tools-dkms</code></pre><p><img src="https://image.wanyijizi.com/20200428/image-20200429174912343.png" alt="image-20200429174912343" loading="lazy"></p><h2 id="设置挂载目录"><a href="#设置挂载目录" class="headerlink" title="设置挂载目录"></a>设置挂载目录</h2><p>可能有自动生成了可能没有，本文的前提是没有，于是设置一个。自动生成的叫/hgfs，换成别的名字也行</p><pre class="language-shell" data-language="shell"><code class="language-shell">sudo mkdir /mnt/hgfs</code></pre><p><img src="https://image.wanyijizi.com/20200428/image-20200429175436148.png" alt="image-20200429175436148" loading="lazy"></p><h2 id="挂载操作"><a href="#挂载操作" class="headerlink" title="挂载操作"></a>挂载操作</h2><p>会根据之前安装的软件包名称的不同而不同。</p><p>安装open-vm-dkms，则</p><pre class="language-shell" data-language="shell"><code class="language-shell">sudo mount -t vmhgfs .host:/ /mnt/hgfs</code></pre><p>安装open-vm-tools-dkms，则</p><pre class="language-shell" data-language="shell"><code class="language-shell">vmhgfs-fuse .host:/ /mnt/hgfs</code></pre><p>此时共享文件夹已经能在/hgfs里看到了。</p><p><img src="https://image.wanyijizi.com/20200428/image-20200429180017616.png" alt="image-20200429180017616" loading="lazy"></p><h2 id="有可能会遇到共享文件夹普通权限打不开"><a href="#有可能会遇到共享文件夹普通权限打不开" class="headerlink" title="有可能会遇到共享文件夹普通权限打不开"></a>有可能会遇到共享文件夹普通权限打不开</h2><p>建议重启虚拟机，重新进行挂载操作，改用命令（仅针对安装open-vm-tools-dkms，另一种没遇到不知道）：</p><pre class="language-shell" data-language="shell"><code class="language-shell">sudo vmhgfs-fuse .host:/ /mnt/hgfs -o subtype=vmhgfs-fuse,allow_other</code></pre><p>或者也可以选择root进去查看。</p><h2 id="每次重启需要重新挂载，到底怎么开机自动挂载，还不知道呢"><a href="#每次重启需要重新挂载，到底怎么开机自动挂载，还不知道呢" class="headerlink" title="每次重启需要重新挂载，到底怎么开机自动挂载，还不知道呢"></a>每次重启需要重新挂载，到底怎么开机自动挂载，还不知道呢</h2>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LAMMPS中ReaxFF势有关的安装和运行</title>
      <link href="2020/04/20/LAMMPS%E4%B8%ADReaxFF%E5%8A%BF%E6%9C%89%E5%85%B3%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E8%BF%90%E8%A1%8C/"/>
      <url>2020/04/20/LAMMPS%E4%B8%ADReaxFF%E5%8A%BF%E6%9C%89%E5%85%B3%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E8%BF%90%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<ul><li>进入/src，安装package：</li></ul><pre class="language-shell" data-language="shell"><code class="language-shell">make yes-USER-REAXC</code></pre><a id="more"></a><p>可以make package-status命令查看安装情况：</p><pre class="language-shell" data-language="shell"><code class="language-shell">peachrl@peachrl-PC:~/LAMMPS/lammps-3Mar20/src$ make package-status...Installed YES: package USER-REAXC...</code></pre><p>看到YES说明安装成功。</p><p><code>注意：我在网上查找教程的时候很多都是说要先make lib-reax之类的，但是在lammps官网上显示USER-REAXC不需要lib：</code></p><p><img src="https://image.wanyijizi.com/20200420/1587392033417.png" alt="lib-no！" loading="lazy"></p><p><code>大概是lammps改版了？总之我的lammps是“3Mar20”版本的。</code></p><ul><li><p>之后，还是在/src目录，重新make ubuntu（</p><p><a href="https://peachrl.github.io/2020/04/06/zai-deepin-xi-tong-an-zhuang-lammps-de-makefile.ubuntu/">之前make过的</a>）：</p><pre class="language-shell" data-language="shell"><code class="language-shell">sudo make ubuntu -j4</code></pre></li><li><p>移动和改个名：</p><pre class="language-shell" data-language="shell"><code class="language-shell">mv lmp_ubuntu /home/peachrl/LAMMPS/bin/lmp4.reaxc</code></pre></li><li><p>尝试运行一下example里reax文件里FeOH3那个例子：</p><pre class="language-shell" data-language="shell"><code class="language-shell">peachrl@peachrl-PC:~/LAMMPS/bin/reax/FeOH3$ mpirun -np 2 lmp4.reaxc &lt; in.FeOH3LAMMPS (3 Mar 2020)Reading data file ...  orthogonal box = (0 0 0) to (25 25 25)  1 by 1 by 2 MPI processor grid  reading atoms ...  105 atoms  read_data CPU = 0.0673389 secsReading potential file ffield.reax.Fe_O_C_H with DATE: 2011-02-18Neighbor list info ...  update every 10 steps, delay 0 steps, check no  max neighbors/atom: 2000, page size: 100000  master list distance cutoff = 12  ghost atom cutoff = 12  binsize = 6, bins = 5 5 5  2 neighbor lists, perpetual/occasional/extra = 2 0 0  (1) pair reax/c, perpetual      attributes: half, newton off, ghost      pair build: half/bin/newtoff/ghost      stencil: half/ghost/bin/3d/newtoff      bin: standard  (2) fix qeq/reax, perpetual, copy from (1)      attributes: half, newton off, ghost      pair build: copy      stencil: none      bin: noneSetting up Verlet run ...  Unit style    : real  Current step  : 0  Time step     : 0.25Per MPI rank memory allocation (min/avg/max) = 14.98 | 15.48 | 15.98 MbytesStep Temp E_pair E_mol TotEng Press        0            0   -9715.3326            0   -9715.3326   -139.61126     3000    533.69756   -9637.8194            0   -9472.3709    146.07633 Loop time of 10.2791 on 2 procs for 3000 steps with 105 atomsPerformance: 6.304 ns/day, 3.807 hours/ns, 291.855 timesteps/s92.8% CPU use with 2 MPI tasks x no OpenMP threadsMPI task timing breakdown:Section |  min time  |  avg time  |  max time  |%varavg| %total---------------------------------------------------------------Pair    | 8.8067     | 8.8202     | 8.8337     |   0.5 | 85.81Neigh   | 0.22447    | 0.23657    | 0.24867    |   2.5 |  2.30Comm    | 0.16772    | 0.18188    | 0.19605    |   3.3 |  1.77Output  | 3.4258e-05 | 4.9204e-05 | 6.4151e-05 |   0.0 |  0.00Modify  | 1.0178     | 1.0302     | 1.0426     |   1.2 | 10.02Other   |            | 0.01022    |            |       |  0.10Nlocal:    52.5 ave 64 max 41 minHistogram: 1 0 0 0 0 0 0 0 0 1Nghost:    511.5 ave 559 max 464 minHistogram: 1 0 0 0 0 0 0 0 0 1Neighs:    1976.5 ave 2428 max 1525 minHistogram: 1 0 0 0 0 0 0 0 0 1Total # of neighbors = 3953Ave neighs/atom = 37.6476Neighbor list builds = 300Dangerous builds not checkedPlease see the log.cite file for references relevant to this simulationTotal wall time: 0:00:10</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> LAMMPS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LAMMPS的input脚本学习笔记</title>
      <link href="2020/04/09/LAMMPS%E7%9A%84input%E8%84%9A%E6%9C%AC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>2020/04/09/LAMMPS%E7%9A%84input%E8%84%9A%E6%9C%AC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><a id="more"></a><ol><li><strong>LAMMPS按照顺序逐条执行命令，而不是全部读完文件后再执行</strong></li></ol><hr><ol start="2"><li><p><strong>命令末尾出现&amp;表示换行</strong></p><p>在写命令中途可以使用：</p></li></ol><pre class="language-none"><code class="language-none">dump2 all image 100 image.*.jpg type type &amp;zoom 1.6 adiam 1.5</code></pre><p>​    和</p><pre class="language-none"><code class="language-none">dump2 all image 100 image.*.jpg type type zoom 1.6 adiam 1.5</code></pre><p>​    两段代码是一个意思，不过第二种写法要写在一行。</p><hr><p>​    &amp;在字符串内部使用，也表示换行：</p><pre class="language-none"><code class="language-none">variable a string "red green blue &amp;                purple orange cyan"</code></pre><p>​    如果用的三个引号，那么不需要&amp;就可以换行：</p><pre class="language-none"><code class="language-none">print """System volume = $vSystem temperature = $t"""</code></pre><hr><ol start="3"><li><strong>#表示注释，不过在引号里的#不算</strong></li></ol><hr><ol start="4"><li><p><strong>$：用varialbe 定义的变量，在下面引用变量的值时就要使用${}</strong></p><p>${变量名}，如果变量名是单个字母，大括号可以省略。例如：</p><pre class="language-none"><code class="language-none">variable X equal (xlo+xhi)/2+sqrt(v_area)region 1 block $X 2 INF INF EDGE EDGEvariable X delete</code></pre><p>   $(表达式)，表达式视为临时变量，一般是个公式。例：</p></li></ol><pre class="language-none"><code class="language-none">region 1 block $((xlo+xhi)/2+sqrt(v_area)) 2 INF INF EDGE EDGE</code></pre><p>​    又例：</p><pre class="language-none"><code class="language-none">print "Final energy per atom: $(pe/atoms:%10.3f) eV/atom"</code></pre><p>   ==注意：$不能嵌套。==</p><hr><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>相关命令：&nbsp;<a href="https://lammps.sandia.gov/doc/units.html">units</a>、<a href="https://lammps.sandia.gov/doc/dimension.html">dimension</a>、<a href="https://lammps.sandia.gov/doc/newton.html">newton</a>、<a href="https://lammps.sandia.gov/doc/processors.html">processors</a>、<a href="https://lammps.sandia.gov/doc/boundary.html">boundary</a>&nbsp;<a href="https://lammps.sandia.gov/doc/atom_style.html">atom_style</a>、<a href="https://lammps.sandia.gov/doc/atom_modify.html">atom_modify</a></p><p><a href="https://lammps.sandia.gov/doc/pair_style.html">pair_style</a>、<a href="https://lammps.sandia.gov/doc/bond_style.html">bond_style</a>、<a href="https://lammps.sandia.gov/doc/angle_style.html">angle_style</a>、<a href="https://lammps.sandia.gov/doc/dihedral_style.html">dihedral_style</a>、<a href="https://lammps.sandia.gov/doc/improper_style.html">improper_style</a></p><p>都是粒子或粒子间相互作用有关的信息</p><hr><h2 id="系统定义"><a href="#系统定义" class="headerlink" title="系统定义"></a>系统定义</h2><p>相关命令：<a href="https://lammps.sandia.gov/doc/read_data.html">read_data</a>、<a href="https://lammps.sandia.gov/doc/read_restart.html">read_restart</a>&nbsp;</p><p><a href="https://lammps.sandia.gov/doc/lattice.html">lattice</a>,&nbsp;<a href="https://lammps.sandia.gov/doc/region.html">region</a>、<a href="https://lammps.sandia.gov/doc/create_box.html">create_box</a>、<a href="https://lammps.sandia.gov/doc/create_atoms.html">create_atoms</a>、<a href="https://lammps.sandia.gov/doc/read_dump.html">read_dump</a></p><p><a href="https://lammps.sandia.gov/doc/replicate.html">replicate</a></p><p>关于模拟的区域</p><hr><h2 id="模拟设置"><a href="#模拟设置" class="headerlink" title="模拟设置"></a>模拟设置</h2><p>力场系数（也可以写在read-in文件里）：<a href="https://lammps.sandia.gov/doc/pair_coeff.html">pair_coeff</a>、<a href="https://lammps.sandia.gov/doc/bond_coeff.html">bond_coeff</a>、<a href="https://lammps.sandia.gov/doc/angle_coeff.html">angle_coeff</a>、<a href="https://lammps.sandia.gov/doc/dihedral_coeff.html">dihedral_coeff</a>、<a href="https://lammps.sandia.gov/doc/improper_coeff.html">improper_coeff</a>、<a href="https://lammps.sandia.gov/doc/kspace_style.html">kspace_style</a>、<a href="https://lammps.sandia.gov/doc/dielectric.html">dielectric</a>、<a href="https://lammps.sandia.gov/doc/special_bonds.html">special_bonds</a></p><p>模拟参数：<a href="https://lammps.sandia.gov/doc/neighbor.html">neighbor</a>、<a href="https://lammps.sandia.gov/doc/neigh_modify.html">neigh_modify</a>、<a href="https://lammps.sandia.gov/doc/group.html">group</a>、<a href="https://lammps.sandia.gov/doc/timestep.html">timestep</a>、<a href="https://lammps.sandia.gov/doc/reset_timestep.html">reset_timestep</a>、<a href="https://lammps.sandia.gov/doc/run_style.html">run_style</a>、<a href="https://lammps.sandia.gov/doc/min_style.html">min_style</a>、<a href="https://lammps.sandia.gov/doc/min_modify.html">min_modify</a></p><p>计算指令：<a href="https://lammps.sandia.gov/doc/compute.html">compute</a>、<a href="https://lammps.sandia.gov/doc/compute_modify.html">compute_modify</a>、<a href="https://lammps.sandia.gov/doc/variable.html">variable</a></p><p>输出指令：&nbsp;<a href="https://lammps.sandia.gov/doc/thermo.html">thermo</a>、<a href="https://lammps.sandia.gov/doc/dump.html">dump</a>、<a href="https://lammps.sandia.gov/doc/restart.html">restart</a></p><hr><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>&nbsp;<a href="https://lammps.sandia.gov/doc/run.html">run</a>、<a href="https://lammps.sandia.gov/doc/minimize.html">minimize</a>、<a href="https://lammps.sandia.gov/doc/temper.html">temper</a></p>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LAMMPS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LAMMPS中dump image command和dump movie command</title>
      <link href="2020/04/07/LAMMPS%E4%B8%ADdump%20image%20command%E5%92%8Cdump%20movie%20command/"/>
      <url>2020/04/07/LAMMPS%E4%B8%ADdump%20image%20command%E5%92%8Cdump%20movie%20command/</url>
      
        <content type="html"><![CDATA[<pre class="language-none"><code class="language-none">dump ID group-ID style N file color diameter keyword value ...</code></pre><a id="more"></a><ul><li>ID：为这条dump指令起个名字</li><li>group-ID：哪几组粒子将被导出</li><li>style：image or movie</li><li>N：每隔多少timesteps导出一张图</li><li>file：导出的文件名</li><li>color：由什么来区分粒子的颜色<ul><li>比如说type：<ul><li>type 1 = red</li><li>type 2 = green</li><li>type 3 = blue</li><li>type 4 = yellow</li><li>type 5 = aqua</li><li>type 6 = cyan</li><li>更多颜色就要由<a href="https://lammps.sandia.gov/doc/dump_modify.html">dump_modify acolor</a> command来实现了</li></ul></li><li>再比如说vx：粒子在x方向的速度分量大小区间</li></ul></li><li>diameter：由什么来区分粒子的大小，比如type。默认所有type的粒子直径1.0，更多设置由<a href="https://lammps.sandia.gov/doc/dump_modify.html">dump_modify adiam</a> command来实现</li><li>keyword：其他设置，有atom、adiam、bond、line、tri、body、fix、size、view、center、up、zoom、persp、box、axes、subbox、shiny、ssao</li></ul><h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><pre class="language-none"><code class="language-none">dump2 all image 500 image.*.jpg type type &amp;zoom 1.6 adiam 1.2dump_modify2 pad 5dump3 all movie 1 movie.avi type type &amp;zoom 1.6 adiam 1.2dump_modify3 pad 5</code></pre><ul><li><p>dump第2条指令：</p><ul><li>all输出全部粒子</li><li>image导出图像格式</li><li>每隔500时间步长</li><li>导出的文件名为image.*.jpg</li><li>color=type由粒子的type区分颜色</li><li>diameter=type由粒子的type决定粒子直径</li><li>&amp;换行</li><li>zoom缩放模拟框的大小</li><li>adiam重置直径数据</li></ul></li><li><p>dump_modify第2条指令：</p><ul><li>pad文件名中的*是个5位数</li></ul></li></ul><div align="center"><img src="https://image.wanyijizi.com/20200407/image.00000.jpg" alt="image.00000" style="zoom:80%;" loading="lazy"><div align="center"><img src="https://image.wanyijizi.com/20200407/image.10000.jpg" alt="image.10000" style="zoom:80%;" loading="lazy"><div align="center"><iframe src="https://player.bilibili.com/player.html?aid=370317864&amp;bvid=BV1XZ4y1x79o&amp;cid=181211939&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="width: 512px; height: 512px; max-width: 100%"> </iframe></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LAMMPS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Deepin系统安装LAMMPS的记录</title>
      <link href="2020/04/06/%E5%9C%A8Deepin%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85LAMMPS%E7%9A%84%E8%AE%B0%E5%BD%95/"/>
      <url>2020/04/06/%E5%9C%A8Deepin%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85LAMMPS%E7%9A%84%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<div class="success"><blockquote><p>本记录最后一次修整在2021年9月24日，系统为<code>Deepin 20.2.3</code>，安装lammps的版本为<code>20 Sep 2021</code>，只适用类似Ubuntu的系统。</p></blockquote></div><a id="more"></a><h2 id="安装之前"><a href="#安装之前" class="headerlink" title="安装之前"></a><span id="PreInstall">安装之前</span></h2><ol><li><p>sudo apt-get install gcc</p></li><li><p>sudo apt-get install g++</p></li><li><p>sudo apt-get install gfortran</p></li><li><p>可能还有mpi-default-bin, mpi-default-dev,libfftw3-dev, libjpeg-dev and libpng12-dev这些，总之make的时候差什么补什么。具体可以参考/src/MAKE/MACHINES/Makefile.ubuntu里的注释：</p></li></ol><pre class="language-none"><code class="language-none"># you have to install the packages g++, mpi-default-bin, mpi-default-dev,# libfftw3-dev, libjpeg-dev and libpng12-dev to compile LAMMPS with this</code></pre><div class="success"><blockquote><p><strong>注1：</strong>如果安装过程提示 fatal error: png.h: No such file or directory，则先<code>sudo apt-get install libpng-dev</code>  </p><p><strong>注2：</strong>如果安装过程提示 makeinfo is missing on your system，可以先<code>sudo apt-get install texinfo</code></p></blockquote></div><h2 id="准备安装包"><a href="#准备安装包" class="headerlink" title="准备安装包"></a>准备安装包</h2><p>查看/src/MAKE/MACHINES/Makefile.ubuntu里的注释，有：</p><pre class="language-none"><code class="language-none"># ubuntu = Ubuntu Linux box, g++, openmpi, FFTW3</code></pre><p>因此准备安装包：fftw3、lammps、openmpi（openmpi和mpich2功能相似）</p><div class="success"><blockquote><p><strong>注3：</strong>2021年9月24日安装最新的lammps时发现，如果<strong><a href="#PreInstall">安装之前</a></strong>中提到的项目都安装了，openmpi和fftw3应该不用手动安装，但如果报错的话就还是自己手动安装吧。</p><p><strong>注4：</strong>通过官网教程上给出的命令从github下载lammps源码出错：</p><pre class="language-shell" data-language="shell"><code class="language-shell">$ git clone -b unstable https://github.com/lammps/lammps.git mylammpsfatal: unable to access 'https://github.com/lammps/lammps.git/': gnutls_handshake() failed: The TLS connection was non-properly terminated.</code></pre><p>网上都说是代理的问题，但是我新装的系统根本没有设置什么代理。尝试了下面的取消代理命令：</p><pre class="language-shell" data-language="shell"><code class="language-shell">git config --global --unset http.proxygit config --global --unset https.proxy</code></pre><p>果然没有效果。后来将https改为http就能成功下载了：</p><pre class="language-shell" data-language="shell"><code class="language-shell">git clone -b unstable http://github.com/lammps/lammps.git mylammps</code></pre><p>具体原因不知。</p></blockquote></div><h2 id="安装的时候注意路径"><a href="#安装的时候注意路径" class="headerlink" title="安装的时候注意路径"></a>安装的时候注意路径</h2><h3 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h3><p>以下都是用的lammps的默认路径，为了make的时候方便。可以查看\lammps\src\MAKE\OPTIONS 路径下Makefile.fftw 文件和Makefile.g++_openmpi_link文件里的路径。</p><ol><li>（如果直接安装lammps报错就手动安装一下）fftw：（-j4 指调用4核编译）<pre class="language-shell" data-language="shell"><code class="language-shell">sudo ./configure --prefix=/usr/local --enable-floatsudo make -j4sudo make install</code></pre></li><li>（如果直接安装lammps报错就手动安装一下）openmpi：<pre class="language-shell" data-language="shell"><code class="language-shell">sudo ./configure --prefix=/usr/localsudo make -j4sudo make install</code></pre></li><li>将/src/MAKE/MACHINES/Makefile.ubuntu复制到/src/MAKE/目录下。在/src目录下：<pre class="language-shell" data-language="shell"><code class="language-shell">sudo make ubuntu -j4</code></pre><h3 id="如果不成功，有时候是library没有立即生效，用"><a href="#如果不成功，有时候是library没有立即生效，用" class="headerlink" title="如果不成功，有时候是library没有立即生效，用"></a>如果不成功，有时候是library没有立即生效，用</h3></li></ol><pre class="language-shell" data-language="shell"><code class="language-shell">ldconfig</code></pre><p>进行更新。</p><h3 id="检查安装路径可以用语句："><a href="#检查安装路径可以用语句：" class="headerlink" title="检查安装路径可以用语句："></a>检查安装路径可以用语句：</h3><pre class="language-shell" data-language="shell"><code class="language-shell">whereis openmpi</code></pre><h2 id="为了简化操作，设置环境变量"><a href="#为了简化操作，设置环境变量" class="headerlink" title="为了简化操作，设置环境变量"></a>为了简化操作，设置环境变量</h2><h3 id="在主目录的隐藏文件-bashrc里编辑："><a href="#在主目录的隐藏文件-bashrc里编辑：" class="headerlink" title="在主目录的隐藏文件.bashrc里编辑："></a>在主目录的隐藏文件.bashrc里编辑：</h3><pre class="language-none"><code class="language-none">export PATH="$PATH:/home/peachrl/LAMMPS/bin"export PATH=/usr/local/bin:$PATH</code></pre><p>两种写法好像都行。然后，</p><pre class="language-shell" data-language="shell"><code class="language-shell">source ~/.bashrc</code></pre><p>让它生效。</p><h3 id="看是否成功用语句："><a href="#看是否成功用语句：" class="headerlink" title="看是否成功用语句："></a>看是否成功用语句：</h3><pre class="language-shell" data-language="shell"><code class="language-shell">which lmp_ubuntu</code></pre><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>运行前移动和改名了：</p><pre class="language-shell" data-language="shell"><code class="language-shell">mv /src/lmp_ubuntu /home/peachrl/LAMMPS/bin/lmp4</code></pre><p>运行：（3 指调用3核）</p><pre class="language-shell" data-language="shell"><code class="language-shell">cd /home/peachrl/LAMMPS/lammps-3Mar20/examples/flowmpirun -np 3 lmp4 &lt; in.flow.couette</code></pre><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="Makefile-ubuntu"><a href="#Makefile-ubuntu" class="headerlink" title="Makefile.ubuntu"></a>Makefile.ubuntu</h3><pre class="language-none"><code class="language-none"># ubuntu = Ubuntu Linux box, g++, openmpi, FFTW3# you have to install the packages g++, mpi-default-bin, mpi-default-dev,# libfftw3-dev, libjpeg-dev and libpng12-dev to compile LAMMPS with this# makefileSHELL = /bin/sh# ---------------------------------------------------------------------# compiler/linker settings# specify flags and libraries needed for your compilerCC =mpic++CCFLAGS =-g -O3 # -WunusedSHFLAGS =-fPICDEPFLAGS =-MLINK =mpic++LINKFLAGS =-g -O3LIB = SIZE =sizeARCHIVE =arARFLAGS =-rcSHLIBFLAGS =-shared# ---------------------------------------------------------------------# LAMMPS-specific settings, all OPTIONAL# specify settings for LAMMPS features you will use# if you change any -D setting, do full re-compile after "make clean"# LAMMPS ifdef settings# see possible settings in Section 2.2 (step 4) of manualLMP_INC =-DLAMMPS_GZIP -DLAMMPS_JPEG -DLAMMPS_PNG -DLAMMPS_FFMPEG# MPI library# see discussion in Section 2.2 (step 5) of manual# MPI wrapper compiler/linker can provide this info# can point to dummy MPI library in src/STUBS as in Makefile.serial# use -D MPICH and OMPI settings in INC to avoid C++ lib conflicts# INC = path for mpi.h, MPI compiler settings# PATH = path for MPI library# LIB = name of MPI libraryMPI_INC =MPI_PATH = MPI_LIB =# FFT library# see discussion in Section 2.2 (step 6) of manaul# can be left blank to use provided KISS FFT library# INC = -DFFT setting, e.g. -DFFT_FFTW, FFT compiler settings# PATH = path for FFT library# LIB = name of FFT libraryFFT_INC =    -DFFT_FFTW3FFT_PATH = FFT_LIB = -lfftw3# JPEG and/or PNG library# see discussion in Section 2.2 (step 7) of manual# only needed if -DLAMMPS_JPEG or -DLAMMPS_PNG listed with LMP_INC# INC = path(s) for jpeglib.h and/or png.h# PATH = path(s) for JPEG library and/or PNG library# LIB = name(s) of JPEG library and/or PNG libraryJPG_INC =       JPG_PATH = JPG_LIB = -ljpeg -lpng# ---------------------------------------------------------------------# build rules and dependencies# do not edit this sectionincludeMakefile.package.settingsincludeMakefile.packageEXTRA_INC = $(LMP_INC) $(PKG_INC) $(MPI_INC) $(FFT_INC) $(JPG_INC) $(PKG_SYSINC)EXTRA_PATH = $(PKG_PATH) $(MPI_PATH) $(FFT_PATH) $(JPG_PATH) $(PKG_SYSPATH)EXTRA_LIB = $(PKG_LIB) $(MPI_LIB) $(FFT_LIB) $(JPG_LIB) $(PKG_SYSLIB)EXTRA_CPP_DEPENDS = $(PKG_CPP_DEPENDS)EXTRA_LINK_DEPENDS = $(PKG_LINK_DEPENDS)# Path to src filesvpath %.cpp ..vpath %.h ..# Link target$(EXE):$(OBJ) $(EXTRA_LINK_DEPENDS)$(LINK) $(LINKFLAGS) $(EXTRA_PATH) $(OBJ) $(EXTRA_LIB) $(LIB) -o $(EXE)$(SIZE) $(EXE)# Library targetslib:$(OBJ) $(EXTRA_LINK_DEPENDS)$(ARCHIVE) $(ARFLAGS) $(EXE) $(OBJ)shlib:$(OBJ) $(EXTRA_LINK_DEPENDS)$(CC) $(CCFLAGS) $(SHFLAGS) $(SHLIBFLAGS) $(EXTRA_PATH) -o $(EXE) \        $(OBJ) $(EXTRA_LIB) $(LIB)# Compilation rules%.o:%.cpp $(EXTRA_CPP_DEPENDS)$(CC) $(CCFLAGS) $(SHFLAGS) $(EXTRA_INC) -c $&lt;%.d:%.cpp $(EXTRA_CPP_DEPENDS)$(CC) $(CCFLAGS) $(EXTRA_INC) $(DEPFLAGS) $&lt; &gt; $@%.o:%.cu $(EXTRA_CPP_DEPENDS)$(CC) $(CCFLAGS) $(SHFLAGS) $(EXTRA_INC) -c $&lt;# Individual dependenciesdepend : fastdep.exe $(SRC)@./fastdep.exe $(EXTRA_INC) -- $^ &gt; .depend || exit 1fastdep.exe: ../DEPEND/fastdep.ccc -O -o $@ $&lt;sinclude .depend</code></pre><h3 id="Makefile-fftw"><a href="#Makefile-fftw" class="headerlink" title="Makefile.fftw"></a>Makefile.fftw</h3><pre class="language-none"><code class="language-none">FFT_INC =    -DFFT_FFTW3 -I/usr/local/includeFFT_PATH =      -L/usr/local/libFFT_LIB =-lfftw3</code></pre><h3 id="Makefile-g-openmpi-link"><a href="#Makefile-g-openmpi-link" class="headerlink" title="Makefile.g++_openmpi_link"></a>Makefile.g++_openmpi_link</h3><pre class="language-none"><code class="language-none">MPI_INC =       -DMPICH_SKIP_MPICXX -DOMPI_SKIP_MPICXX=1 -I/usr/local/includeMPI_PATH = -L/usr/local/libMPI_LIB =-lmpi -lmpi_cxx</code></pre>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> LAMMPS </tag>
            
        </tags>
      
    </entry>
    
    
    
    
  
  
</search>
